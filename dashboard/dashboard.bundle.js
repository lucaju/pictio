!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=91)}([function(t,e,n){var i;
/*!
 * jQuery JavaScript Library v3.4.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-04-10T19:48Z
 */
/*!
 * jQuery JavaScript Library v3.4.0
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-04-10T19:48Z
 */
!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,c=o.slice,u=o.concat,l=o.push,h=o.indexOf,f={},d=f.toString,p=f.hasOwnProperty,g=p.toString,v=g.call(Object),m={},w=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function(t){return null!=t&&t===t.window},b={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,n){var i,r,o=(n=n||s).createElement("script");if(o.text=t,e)for(i in b)(r=e[i]||e.getAttribute&&e.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function C(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?f[d.call(t)]||"object":typeof t}var k=function(t,e){return new k.fn.init(t,e)},T=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function A(t){var e=!!t&&"length"in t&&t.length,n=C(t);return!w(t)&&!y(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}k.fn=k.prototype={jquery:"3.4.0",constructor:k,length:0,toArray:function(){return c.call(this)},get:function(t){return null==t?c.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=k.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return k.each(this,t)},map:function(t){return this.pushStack(k.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(c.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},k.extend=k.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||w(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(t=arguments[a]))for(e in t)i=t[e],"__proto__"!==e&&s!==i&&(u&&i&&(k.isPlainObject(i)||(r=Array.isArray(i)))?(n=s[e],o=r&&!Array.isArray(n)?[]:r||k.isPlainObject(n)?n:{},r=!1,s[e]=k.extend(u,o,i)):void 0!==i&&(s[e]=i));return s},k.extend({expando:"jQuery"+("3.4.0"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==d.call(t))&&(!(e=a(t))||"function"==typeof(n=p.call(e,"constructor")&&e.constructor)&&g.call(n)===v)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){x(t,{nonce:e&&e.nonce})},each:function(t,e){var n,i=0;if(A(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(T,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(A(Object(t))?k.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:h.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,s=!n;r<o;r++)!e(t[r],r)!==s&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,s=[];if(A(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&s.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&s.push(r);return u.apply([],s)},guid:1,support:m}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=o[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){f["[object "+e+"]"]=e.toLowerCase()});var S=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(t){var e,n,i,r,o,s,a,c,u,l,h,f,d,p,g,v,m,w,y,b="sizzle"+1*new Date,x=t.document,C=0,k=0,T=ct(),A=ct(),S=ct(),L=ct(),E=function(t,e){return t===e&&(h=!0),0},_={}.hasOwnProperty,B=[],M=B.pop,I=B.push,N=B.push,$=B.slice,P=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},F="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",D="[\\x20\\t\\r\\n\\f]",O="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+D+"*("+O+")(?:"+D+"*([*^$|!~]?=)"+D+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+O+"))|)"+D+"*\\]",j=":("+O+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",H=new RegExp(D+"+","g"),z=new RegExp("^"+D+"+|((?:^|[^\\\\])(?:\\\\.)*)"+D+"+$","g"),q=new RegExp("^"+D+"*,"+D+"*"),W=new RegExp("^"+D+"*([>+~]|"+D+")"+D+"*"),U=new RegExp(D+"|>"),V=new RegExp(j),Y=new RegExp("^"+O+"$"),Z={ID:new RegExp("^#("+O+")"),CLASS:new RegExp("^\\.("+O+")"),TAG:new RegExp("^("+O+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+D+"*(even|odd|(([+-]|)(\\d*)n|)"+D+"*(?:([+-]|)"+D+"*(\\d+)|))"+D+"*\\)|)","i"),bool:new RegExp("^(?:"+F+")$","i"),needsContext:new RegExp("^"+D+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+D+"*((?:-\\d)?\\d*)"+D+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,J=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\([\\da-f]{1,6}"+D+"?|("+D+")|.)","ig"),nt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,rt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){f()},st=bt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{N.apply(B=$.call(x.childNodes),x.childNodes),B[x.childNodes.length].nodeType}catch(t){N={apply:B.length?function(t,e){I.apply(t,$.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function at(t,e,i,r){var o,a,u,l,h,p,m,w=e&&e.ownerDocument,C=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==C&&9!==C&&11!==C)return i;if(!r&&((e?e.ownerDocument||e:x)!==d&&f(e),e=e||d,g)){if(11!==C&&(h=Q.exec(t)))if(o=h[1]){if(9===C){if(!(u=e.getElementById(o)))return i;if(u.id===o)return i.push(u),i}else if(w&&(u=w.getElementById(o))&&y(e,u)&&u.id===o)return i.push(u),i}else{if(h[2])return N.apply(i,e.getElementsByTagName(t)),i;if((o=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return N.apply(i,e.getElementsByClassName(o)),i}if(n.qsa&&!L[t+" "]&&(!v||!v.test(t))&&(1!==C||"object"!==e.nodeName.toLowerCase())){if(m=t,w=e,1===C&&U.test(t)){for((l=e.getAttribute("id"))?l=l.replace(it,rt):e.setAttribute("id",l=b),a=(p=s(t)).length;a--;)p[a]="#"+l+" "+yt(p[a]);m=p.join(","),w=tt.test(t)&&mt(e.parentNode)||e}try{return N.apply(i,w.querySelectorAll(m)),i}catch(e){L(t,!0)}finally{l===b&&e.removeAttribute("id")}}}return c(t.replace(z,"$1"),e,i,r)}function ct(){var t=[];return function e(n,r){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=r}}function ut(t){return t[b]=!0,t}function lt(t){var e=d.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ht(t,e){for(var n=t.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=e}function ft(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function dt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function pt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function gt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&st(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function vt(t){return ut(function(e){return e=+e,ut(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=at.support={},o=at.isXML=function(t){var e=t.namespaceURI,n=(t.ownerDocument||t).documentElement;return!X.test(e||n&&n.nodeName||"HTML")},f=at.setDocument=function(t){var e,r,s=t?t.ownerDocument||t:x;return s!==d&&9===s.nodeType&&s.documentElement?(p=(d=s).documentElement,g=!o(d),x!==d&&(r=d.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ot,!1):r.attachEvent&&r.attachEvent("onunload",ot)),n.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),n.getElementsByTagName=lt(function(t){return t.appendChild(d.createComment("")),!t.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(d.getElementsByClassName),n.getById=lt(function(t){return p.appendChild(t).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&g){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&g)return e.getElementsByClassName(t)},m=[],v=[],(n.qsa=K.test(d.querySelectorAll))&&(lt(function(t){p.appendChild(t).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+D+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||v.push("\\["+D+"*(?:value|"+F+")"),t.querySelectorAll("[id~="+b+"-]").length||v.push("~="),t.querySelectorAll(":checked").length||v.push(":checked"),t.querySelectorAll("a#"+b+"+*").length||v.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=d.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&v.push("name"+D+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),v.push(",.*:")})),(n.matchesSelector=K.test(w=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&lt(function(t){n.disconnectedMatch=w.call(t,"*"),w.call(t,"[s!='']:x"),m.push("!=",j)}),v=v.length&&new RegExp(v.join("|")),m=m.length&&new RegExp(m.join("|")),e=K.test(p.compareDocumentPosition),y=e||K.test(p.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},E=e?function(t,e){if(t===e)return h=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t===d||t.ownerDocument===x&&y(x,t)?-1:e===d||e.ownerDocument===x&&y(x,e)?1:l?P(l,t)-P(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return h=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,s=[t],a=[e];if(!r||!o)return t===d?-1:e===d?1:r?-1:o?1:l?P(l,t)-P(l,e):0;if(r===o)return ft(t,e);for(n=t;n=n.parentNode;)s.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;s[i]===a[i];)i++;return i?ft(s[i],a[i]):s[i]===x?-1:a[i]===x?1:0},d):d},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if((t.ownerDocument||t)!==d&&f(t),n.matchesSelector&&g&&!L[e+" "]&&(!m||!m.test(e))&&(!v||!v.test(e)))try{var i=w.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){L(e,!0)}return at(e,d,null,[t]).length>0},at.contains=function(t,e){return(t.ownerDocument||t)!==d&&f(t),y(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!==d&&f(t);var r=i.attrHandle[e.toLowerCase()],o=r&&_.call(i.attrHandle,e.toLowerCase())?r(t,e,!g):void 0;return void 0!==o?o:n.attributes||!g?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(it,rt)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],r=0,o=0;if(h=!n.detectDuplicates,l=!n.sortStable&&t.slice(0),t.sort(E),h){for(;e=t[o++];)e===t[o]&&(r=i.push(o));for(;r--;)t.splice(i[r],1)}return l=null,t},r=at.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},(i=at.selectors={cacheLength:50,createPseudo:ut,match:Z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return Z.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=s(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=T[t+" "];return e||(e=new RegExp("(^|"+D+")"+t+"("+D+"|$)"))&&T(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,e,n){return function(i){var r=at.attr(i,t);return null==r?"!="===e:!e||(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r.replace(H," ")+" ").indexOf(n)>-1:"|="===e&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,c){var u,l,h,f,d,p,g=o!==s?"nextSibling":"previousSibling",v=e.parentNode,m=a&&e.nodeName.toLowerCase(),w=!c&&!a,y=!1;if(v){if(o){for(;g;){for(f=e;f=f[g];)if(a?f.nodeName.toLowerCase()===m:1===f.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?v.firstChild:v.lastChild],s&&w){for(y=(d=(u=(l=(h=(f=v)[b]||(f[b]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===C&&u[1])&&u[2],f=d&&v.childNodes[d];f=++d&&f&&f[g]||(y=d=0)||p.pop();)if(1===f.nodeType&&++y&&f===e){l[t]=[C,d,y];break}}else if(w&&(y=d=(u=(l=(h=(f=e)[b]||(f[b]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===C&&u[1]),!1===y)for(;(f=++d&&f&&f[g]||(y=d=0)||p.pop())&&((a?f.nodeName.toLowerCase()!==m:1!==f.nodeType)||!++y||(w&&((l=(h=f[b]||(f[b]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]=[C,y]),f!==e)););return(y-=r)===i||y%i==0&&y/i>=0}}},PSEUDO:function(t,e){var n,r=i.pseudos[t]||i.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[b]?r(e):r.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ut(function(t,n){for(var i,o=r(t,e),s=o.length;s--;)t[i=P(t,o[s])]=!(n[i]=o[s])}):function(t){return r(t,0,n)}):r}},pseudos:{not:ut(function(t){var e=[],n=[],i=a(t.replace(z,"$1"));return i[b]?ut(function(t,e,n,r){for(var o,s=i(t,null,r,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}}),has:ut(function(t){return function(e){return at(t,e).length>0}}),contains:ut(function(t){return t=t.replace(et,nt),function(e){return(e.textContent||r(e)).indexOf(t)>-1}}),lang:ut(function(t){return Y.test(t||"")||at.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=g?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===p},focus:function(t){return t===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:gt(!1),disabled:gt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return J.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:vt(function(){return[0]}),last:vt(function(t,e){return[e-1]}),eq:vt(function(t,e,n){return[n<0?n+e:n]}),even:vt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:vt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:vt(function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t}),gt:vt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=dt(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=pt(e);function wt(){}function yt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function bt(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,a=k++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r);return!1}:function(e,n,c){var u,l,h,f=[C,a];if(c){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,c))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(l=(h=e[b]||(e[b]={}))[e.uniqueID]||(h[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((u=l[o])&&u[0]===C&&u[1]===a)return f[2]=u[2];if(l[o]=f,f[2]=t(e,n,c))return!0}return!1}}function xt(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function Ct(t,e,n,i,r){for(var o,s=[],a=0,c=t.length,u=null!=e;a<c;a++)(o=t[a])&&(n&&!n(o,i,r)||(s.push(o),u&&e.push(a)));return s}function kt(t,e,n,i,r,o){return i&&!i[b]&&(i=kt(i)),r&&!r[b]&&(r=kt(r,o)),ut(function(o,s,a,c){var u,l,h,f=[],d=[],p=s.length,g=o||function(t,e,n){for(var i=0,r=e.length;i<r;i++)at(t,e[i],n);return n}(e||"*",a.nodeType?[a]:a,[]),v=!t||!o&&e?g:Ct(g,f,t,a,c),m=n?r||(o?t:p||i)?[]:s:v;if(n&&n(v,m,a,c),i)for(u=Ct(m,d),i(u,[],a,c),l=u.length;l--;)(h=u[l])&&(m[d[l]]=!(v[d[l]]=h));if(o){if(r||t){if(r){for(u=[],l=m.length;l--;)(h=m[l])&&u.push(v[l]=h);r(null,m=[],u,c)}for(l=m.length;l--;)(h=m[l])&&(u=r?P(o,h):f[l])>-1&&(o[u]=!(s[u]=h))}}else m=Ct(m===s?m.splice(p,m.length):m),r?r(null,s,m,c):N.apply(s,m)})}function Tt(t){for(var e,n,r,o=t.length,s=i.relative[t[0].type],a=s||i.relative[" "],c=s?1:0,l=bt(function(t){return t===e},a,!0),h=bt(function(t){return P(e,t)>-1},a,!0),f=[function(t,n,i){var r=!s&&(i||n!==u)||((e=n).nodeType?l(t,n,i):h(t,n,i));return e=null,r}];c<o;c++)if(n=i.relative[t[c].type])f=[bt(xt(f),n)];else{if((n=i.filter[t[c].type].apply(null,t[c].matches))[b]){for(r=++c;r<o&&!i.relative[t[r].type];r++);return kt(c>1&&xt(f),c>1&&yt(t.slice(0,c-1).concat({value:" "===t[c-2].type?"*":""})).replace(z,"$1"),n,c<r&&Tt(t.slice(c,r)),r<o&&Tt(t=t.slice(r)),r<o&&yt(t))}f.push(n)}return xt(f)}return wt.prototype=i.filters=i.pseudos,i.setFilters=new wt,s=at.tokenize=function(t,e){var n,r,o,s,a,c,u,l=A[t+" "];if(l)return e?0:l.slice(0);for(a=t,c=[],u=i.preFilter;a;){for(s in n&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),c.push(o=[])),n=!1,(r=W.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z," ")}),a=a.slice(n.length)),i.filter)!(r=Z[s].exec(a))||u[s]&&!(r=u[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return e?a.length:a?at.error(t):A(t,c).slice(0)},a=at.compile=function(t,e){var n,r=[],o=[],a=S[t+" "];if(!a){for(e||(e=s(t)),n=e.length;n--;)(a=Tt(e[n]))[b]?r.push(a):o.push(a);(a=S(t,function(t,e){var n=e.length>0,r=t.length>0,o=function(o,s,a,c,l){var h,p,v,m=0,w="0",y=o&&[],b=[],x=u,k=o||r&&i.find.TAG("*",l),T=C+=null==x?1:Math.random()||.1,A=k.length;for(l&&(u=s===d||s||l);w!==A&&null!=(h=k[w]);w++){if(r&&h){for(p=0,s||h.ownerDocument===d||(f(h),a=!g);v=t[p++];)if(v(h,s||d,a)){c.push(h);break}l&&(C=T)}n&&((h=!v&&h)&&m--,o&&y.push(h))}if(m+=w,n&&w!==m){for(p=0;v=e[p++];)v(y,b,s,a);if(o){if(m>0)for(;w--;)y[w]||b[w]||(b[w]=M.call(c));b=Ct(b)}N.apply(c,b),l&&!o&&b.length>0&&m+e.length>1&&at.uniqueSort(c)}return l&&(C=T,u=x),y};return n?ut(o):o}(o,r))).selector=t}return a},c=at.select=function(t,e,n,r){var o,c,u,l,h,f="function"==typeof t&&t,d=!r&&s(t=f.selector||t);if(n=n||[],1===d.length){if((c=d[0]=d[0].slice(0)).length>2&&"ID"===(u=c[0]).type&&9===e.nodeType&&g&&i.relative[c[1].type]){if(!(e=(i.find.ID(u.matches[0].replace(et,nt),e)||[])[0]))return n;f&&(e=e.parentNode),t=t.slice(c.shift().value.length)}for(o=Z.needsContext.test(t)?0:c.length;o--&&(u=c[o],!i.relative[l=u.type]);)if((h=i.find[l])&&(r=h(u.matches[0].replace(et,nt),tt.test(c[0].type)&&mt(e.parentNode)||e))){if(c.splice(o,1),!(t=r.length&&yt(c)))return N.apply(n,r),n;break}}return(f||a(t,d))(r,e,!g,n,!e||tt.test(t)&&mt(e.parentNode)||e),n},n.sortStable=b.split("").sort(E).join("")===b,n.detectDuplicates=!!h,f(),n.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(d.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ht("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),n.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ht("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ht(F,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),at}(n);k.find=S,k.expr=S.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=S.uniqueSort,k.text=S.getText,k.isXMLDoc=S.isXML,k.contains=S.contains,k.escapeSelector=S.escape;var L=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&k(t).is(n))break;i.push(t)}return i},E=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},_=k.expr.match.needsContext;function B(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function I(t,e,n){return w(e)?k.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?k.grep(t,function(t){return t===e!==n}):"string"!=typeof e?k.grep(t,function(t){return h.call(e,t)>-1!==n}):k.filter(e,t,n)}k.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?k.find.matchesSelector(i,t)?[i]:[]:k.find.matches(t,k.grep(e,function(t){return 1===t.nodeType}))},k.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(k(t).filter(function(){for(e=0;e<i;e++)if(k.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)k.find(t,r[e],n);return i>1?k.uniqueSort(n):n},filter:function(t){return this.pushStack(I(this,t||[],!1))},not:function(t){return this.pushStack(I(this,t||[],!0))},is:function(t){return!!I(this,"string"==typeof t&&_.test(t)?k(t):t||[],!1).length}});var N,$=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||N,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:$.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof k?e[0]:e,k.merge(this,k.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:s,!0)),M.test(i[1])&&k.isPlainObject(e))for(i in e)w(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=s.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):w(t)?void 0!==n.ready?n.ready(t):t(k):k.makeArray(t,this)}).prototype=k.fn,N=k(s);var P=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function D(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}k.fn.extend({has:function(t){var e=k(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(k.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&k(t);if(!_.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&k.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?k.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?h.call(k(t),this[0]):h.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),k.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return L(t,"parentNode")},parentsUntil:function(t,e,n){return L(t,"parentNode",n)},next:function(t){return D(t,"nextSibling")},prev:function(t){return D(t,"previousSibling")},nextAll:function(t){return L(t,"nextSibling")},prevAll:function(t){return L(t,"previousSibling")},nextUntil:function(t,e,n){return L(t,"nextSibling",n)},prevUntil:function(t,e,n){return L(t,"previousSibling",n)},siblings:function(t){return E((t.parentNode||{}).firstChild,t)},children:function(t){return E(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:(B(t,"template")&&(t=t.content||t),k.merge([],t.childNodes))}},function(t,e){k.fn[t]=function(n,i){var r=k.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=k.filter(i,r)),this.length>1&&(F[t]||k.uniqueSort(r),P.test(t)&&r.reverse()),this.pushStack(r)}});var O=/[^\x20\t\r\n\f]+/g;function R(t){return t}function j(t){throw t}function H(t,e,n,i){var r;try{t&&w(r=t.promise)?r.call(t).done(e).fail(n):t&&w(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}k.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return k.each(t.match(O)||[],function(t,n){e[n]=!0}),e}(t):k.extend({},t);var e,n,i,r,o=[],s=[],a=-1,c=function(){for(r=r||t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function e(n){k.each(n,function(n,i){w(i)?t.unique&&u.has(i)||o.push(i):i&&i.length&&"string"!==C(i)&&e(i)})}(arguments),n&&!e&&c()),this},remove:function(){return k.each(arguments,function(t,e){for(var n;(n=k.inArray(e,o,n))>-1;)o.splice(n,1),n<=a&&a--}),this},has:function(t){return t?k.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],s.push(n),e||c()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},k.extend({Deferred:function(t){var e=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return k.Deferred(function(n){k.each(e,function(e,i){var r=w(t[i[4]])&&t[i[4]];o[i[1]](function(){var t=r&&r.apply(this,arguments);t&&w(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,i,r){var o=0;function s(t,e,i,r){return function(){var a=this,c=arguments,u=function(){var n,u;if(!(t<o)){if((n=i.apply(a,c))===e.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,w(u)?r?u.call(n,s(o,e,R,r),s(o,e,j,r)):(o++,u.call(n,s(o,e,R,r),s(o,e,j,r),s(o,e,R,e.notifyWith))):(i!==R&&(a=void 0,c=[n]),(r||e.resolveWith)(a,c))}},l=r?u:function(){try{u()}catch(n){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(n,l.stackTrace),t+1>=o&&(i!==j&&(a=void 0,c=[n]),e.rejectWith(a,c))}};t?l():(k.Deferred.getStackHook&&(l.stackTrace=k.Deferred.getStackHook()),n.setTimeout(l))}}return k.Deferred(function(n){e[0][3].add(s(0,n,w(r)?r:R,n.notifyWith)),e[1][3].add(s(0,n,w(t)?t:R)),e[2][3].add(s(0,n,w(i)?i:j))}).promise()},promise:function(t){return null!=t?k.extend(t,r):r}},o={};return k.each(e,function(t,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=c.call(arguments),o=k.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?c.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(H(t,o.done(s(n)).resolve,o.reject,!e),"pending"===o.state()||w(r[n]&&r[n].then)))return o.then();for(;n--;)H(r[n],s(n),o.reject);return o.promise()}});var z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&z.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},k.readyException=function(t){n.setTimeout(function(){throw t})};var q=k.Deferred();function W(){s.removeEventListener("DOMContentLoaded",W),n.removeEventListener("load",W),k.ready()}k.fn.ready=function(t){return q.then(t).catch(function(t){k.readyException(t)}),this},k.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==t&&--k.readyWait>0||q.resolveWith(s,[k]))}}),k.ready.then=q.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(k.ready):(s.addEventListener("DOMContentLoaded",W),n.addEventListener("load",W));var U=function(t,e,n,i,r,o,s){var a=0,c=t.length,u=null==n;if("object"===C(n))for(a in r=!0,n)U(t,e,a,n[a],!0,o,s);else if(void 0!==i&&(r=!0,w(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(k(t),n)})),e))for(;a<c;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:u?e.call(t):c?e(t[0],n):o},V=/^-ms-/,Y=/-([a-z])/g;function Z(t,e){return e.toUpperCase()}function X(t){return t.replace(V,"ms-").replace(Y,Z)}var J=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function G(){this.expando=k.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},J(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[X(e)]=n;else for(i in e)r[X(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][X(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(X):(e=X(e))in i?[e]:e.match(O)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||k.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!k.isEmptyObject(e)}};var K=new G,Q=new G,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Q.set(t,e,n)}else n=void 0;return n}k.extend({hasData:function(t){return Q.hasData(t)||K.hasData(t)},data:function(t,e,n){return Q.access(t,e,n)},removeData:function(t,e){Q.remove(t,e)},_data:function(t,e,n){return K.access(t,e,n)},_removeData:function(t,e){K.remove(t,e)}}),k.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=Q.get(o),1===o.nodeType&&!K.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(i=s[n].name).indexOf("data-")&&(i=X(i.slice(5)),nt(o,i,r[i]));K.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Q.set(this,t)}):U(this,function(e){var n;if(o&&void 0===e)return void 0!==(n=Q.get(o,t))?n:void 0!==(n=nt(o,t))?n:void 0;this.each(function(){Q.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Q.remove(this,t)})}}),k.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=K.get(t,e),n&&(!i||Array.isArray(n)?i=K.access(t,e,k.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=k.queue(t,e),i=n.length,r=n.shift(),o=k._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,function(){k.dequeue(t,e)},o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return K.get(t,n)||K.access(t,n,{empty:k.Callbacks("once memory").add(function(){K.remove(t,[e+"queue",n])})})}}),k.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?k.queue(this[0],t):void 0===e?this:this.each(function(){var n=k.queue(this,t,e);k._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&k.dequeue(this,t)})},dequeue:function(t){return this.each(function(){k.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=k.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)(n=K.get(o[s],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],st=s.documentElement,at=function(t){return k.contains(t.ownerDocument,t)},ct={composed:!0};st.attachShadow&&(at=function(t){return k.contains(t.ownerDocument,t)||t.getRootNode(ct)===t.ownerDocument});var ut=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&at(t)&&"none"===k.css(t,"display")},lt=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];for(o in r=n.apply(t,i||[]),e)t.style[o]=s[o];return r};function ht(t,e,n,i){var r,o,s=20,a=i?function(){return i.cur()}:function(){return k.css(t,e,"")},c=a(),u=n&&n[3]||(k.cssNumber[e]?"":"px"),l=t.nodeType&&(k.cssNumber[e]||"px"!==u&&+c)&&rt.exec(k.css(t,e));if(l&&l[3]!==u){for(c/=2,u=u||l[3],l=+c||1;s--;)k.style(t,e,l+u),(1-o)*(1-(o=a()/c||.5))<=0&&(s=0),l/=o;l*=2,k.style(t,e,l+u),n=n||[]}return n&&(l=+l||+c||0,r=n[1]?l+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=l,i.end=r)),r}var ft={};function dt(t){var e,n=t.ownerDocument,i=t.nodeName,r=ft[i];return r||(e=n.body.appendChild(n.createElement(i)),r=k.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),ft[i]=r,r)}function pt(t,e){for(var n,i,r=[],o=0,s=t.length;o<s;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=K.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&ut(i)&&(r[o]=dt(i))):"none"!==n&&(r[o]="none",K.set(i,"display",n)));for(o=0;o<s;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}k.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){ut(this)?k(this).show():k(this).hide()})}});var gt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,mt=/^$|^module$|\/(?:java|ecma)script/i,wt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function yt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&B(t,e)?k.merge([t],n):n}function bt(t,e){for(var n=0,i=t.length;n<i;n++)K.set(t[n],"globalEval",!e||K.get(e[n],"globalEval"))}wt.optgroup=wt.option,wt.tbody=wt.tfoot=wt.colgroup=wt.caption=wt.thead,wt.th=wt.td;var xt,Ct,kt=/<|&#?\w+;/;function Tt(t,e,n,i,r){for(var o,s,a,c,u,l,h=e.createDocumentFragment(),f=[],d=0,p=t.length;d<p;d++)if((o=t[d])||0===o)if("object"===C(o))k.merge(f,o.nodeType?[o]:o);else if(kt.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(vt.exec(o)||["",""])[1].toLowerCase(),c=wt[a]||wt._default,s.innerHTML=c[1]+k.htmlPrefilter(o)+c[2],l=c[0];l--;)s=s.lastChild;k.merge(f,s.childNodes),(s=h.firstChild).textContent=""}else f.push(e.createTextNode(o));for(h.textContent="",d=0;o=f[d++];)if(i&&k.inArray(o,i)>-1)r&&r.push(o);else if(u=at(o),s=yt(h.appendChild(o),"script"),u&&bt(s),n)for(l=0;o=s[l++];)mt.test(o.type||"")&&n.push(o);return h}xt=s.createDocumentFragment().appendChild(s.createElement("div")),(Ct=s.createElement("input")).setAttribute("type","radio"),Ct.setAttribute("checked","checked"),Ct.setAttribute("name","t"),xt.appendChild(Ct),m.checkClone=xt.cloneNode(!0).cloneNode(!0).lastChild.checked,xt.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!xt.cloneNode(!0).lastChild.defaultValue;var At=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Lt=/^([^.]*)(?:\.(.+)|)/;function Et(){return!0}function _t(){return!1}function Bt(t,e){return t===function(){try{return s.activeElement}catch(t){}}()==("focus"===e)}function Mt(t,e,n,i,r,o){var s,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Mt(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=_t;else if(!r)return t;return 1===o&&(s=r,(r=function(t){return k().off(t),s.apply(this,arguments)}).guid=s.guid||(s.guid=k.guid++)),t.each(function(){k.event.add(this,e,r,i,n)})}function It(t,e,n){n?(K.set(t,e,!1),k.event.add(t,e,{namespace:!1,handler:function(t){var i,r,o=K.get(this,e);if(1&t.isTrigger&&this[e]){if(o)(k.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=c.call(arguments),K.set(this,e,o),i=n(this,e),this[e](),o!==(r=K.get(this,e))||i?K.set(this,e,!1):r=void 0,o!==r)return t.stopImmediatePropagation(),t.preventDefault(),r}else o&&(K.set(this,e,k.event.trigger(k.extend(o.shift(),k.Event.prototype),o,this)),t.stopImmediatePropagation())}})):k.event.add(t,e,Et)}k.event={global:{},add:function(t,e,n,i,r){var o,s,a,c,u,l,h,f,d,p,g,v=K.get(t);if(v)for(n.handler&&(n=(o=n).handler,r=o.selector),r&&k.find.matchesSelector(st,r),n.guid||(n.guid=k.guid++),(c=v.events)||(c=v.events={}),(s=v.handle)||(s=v.handle=function(e){return void 0!==k&&k.event.triggered!==e.type?k.event.dispatch.apply(t,arguments):void 0}),u=(e=(e||"").match(O)||[""]).length;u--;)d=g=(a=Lt.exec(e[u])||[])[1],p=(a[2]||"").split(".").sort(),d&&(h=k.event.special[d]||{},d=(r?h.delegateType:h.bindType)||d,h=k.event.special[d]||{},l=k.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&k.expr.match.needsContext.test(r),namespace:p.join(".")},o),(f=c[d])||((f=c[d]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,i,p,s)||t.addEventListener&&t.addEventListener(d,s)),h.add&&(h.add.call(t,l),l.handler.guid||(l.handler.guid=n.guid)),r?f.splice(f.delegateCount++,0,l):f.push(l),k.event.global[d]=!0)},remove:function(t,e,n,i,r){var o,s,a,c,u,l,h,f,d,p,g,v=K.hasData(t)&&K.get(t);if(v&&(c=v.events)){for(u=(e=(e||"").match(O)||[""]).length;u--;)if(d=g=(a=Lt.exec(e[u])||[])[1],p=(a[2]||"").split(".").sort(),d){for(h=k.event.special[d]||{},f=c[d=(i?h.delegateType:h.bindType)||d]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=f.length;o--;)l=f[o],!r&&g!==l.origType||n&&n.guid!==l.guid||a&&!a.test(l.namespace)||i&&i!==l.selector&&("**"!==i||!l.selector)||(f.splice(o,1),l.selector&&f.delegateCount--,h.remove&&h.remove.call(t,l));s&&!f.length&&(h.teardown&&!1!==h.teardown.call(t,p,v.handle)||k.removeEvent(t,d,v.handle),delete c[d])}else for(d in c)k.event.remove(t,d+e[u],n,i,!0);k.isEmptyObject(c)&&K.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=k.event.fix(t),c=new Array(arguments.length),u=(K.get(this,"events")||{})[a.type]||[],l=k.event.special[a.type]||{};for(c[0]=a,e=1;e<arguments.length;e++)c[e]=arguments[e];if(a.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,a)){for(s=k.event.handlers.call(this,a,u),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(i=((k.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,c))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s,a=[],c=e.delegateCount,u=t.target;if(c&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||!0!==u.disabled)){for(o=[],s={},n=0;n<c;n++)void 0===s[r=(i=e[n]).selector+" "]&&(s[r]=i.needsContext?k(r,this).index(u)>-1:k.find(r,this,null,[u]).length),s[r]&&o.push(i);o.length&&a.push({elem:u,handlers:o})}return u=this,c<e.length&&a.push({elem:u,handlers:e.slice(c)}),a},addProp:function(t,e){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:w(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[k.expando]?t:new k.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&B(e,"input")&&void 0===K.get(e,"click")&&It(e,"click",Et),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&B(e,"input")&&void 0===K.get(e,"click")&&It(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&B(e,"input")&&K.get(e,"click")||B(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},k.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},k.Event=function(t,e){if(!(this instanceof k.Event))return new k.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Et:_t,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&k.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:_t,isPropagationStopped:_t,isImmediatePropagationStopped:_t,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Et,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Et,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Et,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&At.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&St.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},k.event.addProp),k.each({focus:"focusin",blur:"focusout"},function(t,e){k.event.special[t]={setup:function(){return It(this,t,Bt),!1},trigger:function(){return It(this,t),!0},delegateType:e}}),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){k.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=t.relatedTarget,r=t.handleObj;return i&&(i===this||k.contains(this,i))||(t.type=r.origType,n=r.handler.apply(this,arguments),t.type=e),n}}}),k.fn.extend({on:function(t,e,n,i){return Mt(this,t,e,n,i)},one:function(t,e,n,i){return Mt(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,k(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=_t),this.each(function(){k.event.remove(this,t,n,e)})}});var Nt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,$t=/<script|<style|<link/i,Pt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ft=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Dt(t,e){return B(t,"table")&&B(11!==e.nodeType?e:e.firstChild,"tr")&&k(t).children("tbody")[0]||t}function Ot(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Rt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function jt(t,e){var n,i,r,o,s,a,c,u;if(1===e.nodeType){if(K.hasData(t)&&(o=K.access(t),s=K.set(e,o),u=o.events))for(r in delete s.handle,s.events={},u)for(n=0,i=u[r].length;n<i;n++)k.event.add(e,r,u[r][n]);Q.hasData(t)&&(a=Q.access(t),c=k.extend({},a),Q.set(e,c))}}function Ht(t,e,n,i){e=u.apply([],e);var r,o,s,a,c,l,h=0,f=t.length,d=f-1,p=e[0],g=w(p);if(g||f>1&&"string"==typeof p&&!m.checkClone&&Pt.test(p))return t.each(function(r){var o=t.eq(r);g&&(e[0]=p.call(this,r,o.html())),Ht(o,e,n,i)});if(f&&(o=(r=Tt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=(s=k.map(yt(r,"script"),Ot)).length;h<f;h++)c=r,h!==d&&(c=k.clone(c,!0,!0),a&&k.merge(s,yt(c,"script"))),n.call(t[h],c,h);if(a)for(l=s[s.length-1].ownerDocument,k.map(s,Rt),h=0;h<a;h++)c=s[h],mt.test(c.type||"")&&!K.access(c,"globalEval")&&k.contains(l,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?k._evalUrl&&!c.noModule&&k._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")}):x(c.textContent.replace(Ft,""),c,l))}return t}function zt(t,e,n){for(var i,r=e?k.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||k.cleanData(yt(i)),i.parentNode&&(n&&at(i)&&bt(yt(i,"script")),i.parentNode.removeChild(i));return t}k.extend({htmlPrefilter:function(t){return t.replace(Nt,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a,c,u,l=t.cloneNode(!0),h=at(t);if(!(m.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||k.isXMLDoc(t)))for(s=yt(l),i=0,r=(o=yt(t)).length;i<r;i++)a=o[i],c=s[i],u=void 0,"input"===(u=c.nodeName.toLowerCase())&&gt.test(a.type)?c.checked=a.checked:"input"!==u&&"textarea"!==u||(c.defaultValue=a.defaultValue);if(e)if(n)for(o=o||yt(t),s=s||yt(l),i=0,r=o.length;i<r;i++)jt(o[i],s[i]);else jt(t,l);return(s=yt(l,"script")).length>0&&bt(s,!h&&yt(t,"script")),l},cleanData:function(t){for(var e,n,i,r=k.event.special,o=0;void 0!==(n=t[o]);o++)if(J(n)){if(e=n[K.expando]){if(e.events)for(i in e.events)r[i]?k.event.remove(n,i):k.removeEvent(n,i,e.handle);n[K.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),k.fn.extend({detach:function(t){return zt(this,t,!0)},remove:function(t){return zt(this,t)},text:function(t){return U(this,function(t){return void 0===t?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Ht(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Dt(this,t).appendChild(t)})},prepend:function(){return Ht(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Dt(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Ht(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(k.cleanData(yt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return k.clone(this,t,e)})},html:function(t){return U(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!$t.test(t)&&!wt[(vt.exec(t)||["",""])[1].toLowerCase()]){t=k.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(k.cleanData(yt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Ht(this,arguments,function(e){var n=this.parentNode;k.inArray(this,t)<0&&(k.cleanData(yt(this)),n&&n.replaceChild(e,this))},t)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){k.fn[t]=function(t){for(var n,i=[],r=k(t),o=r.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),k(r[s])[e](n),l.apply(i,n.get());return this.pushStack(i)}});var qt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Wt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)},Ut=new RegExp(ot.join("|"),"i");function Vt(t,e,n){var i,r,o,s,a=t.style;return(n=n||Wt(t))&&(""!==(s=n.getPropertyValue(e)||n[e])||at(t)||(s=k.style(t,e)),!m.pixelBoxStyles()&&qt.test(s)&&Ut.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function Yt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",st.appendChild(u).appendChild(l);var t=n.getComputedStyle(l);i="1%"!==t.top,c=12===e(t.marginLeft),l.style.right="60%",a=36===e(t.right),r=36===e(t.width),l.style.position="absolute",o=12===e(l.offsetWidth/3),st.removeChild(u),l=null}}function e(t){return Math.round(parseFloat(t))}var i,r,o,a,c,u=s.createElement("div"),l=s.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===l.style.backgroundClip,k.extend(m,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),c},scrollboxSize:function(){return t(),o}}))}();var Zt=["Webkit","Moz","ms"],Xt=s.createElement("div").style,Jt={};function Gt(t){var e=k.cssProps[t]||Jt[t];return e||(t in Xt?t:Jt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Zt.length;n--;)if((t=Zt[n]+e)in Xt)return t}(t)||t)}var Kt=/^(none|table(?!-c[ea]).+)/,Qt=/^--/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"};function ne(t,e,n){var i=rt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function ie(t,e,n,i,r,o){var s="width"===e?1:0,a=0,c=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(c+=k.css(t,n+ot[s],!0,r)),i?("content"===n&&(c-=k.css(t,"padding"+ot[s],!0,r)),"margin"!==n&&(c-=k.css(t,"border"+ot[s]+"Width",!0,r))):(c+=k.css(t,"padding"+ot[s],!0,r),"padding"!==n?c+=k.css(t,"border"+ot[s]+"Width",!0,r):a+=k.css(t,"border"+ot[s]+"Width",!0,r));return!i&&o>=0&&(c+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-c-a-.5))||0),c}function re(t,e,n){var i=Wt(t),r=(!m.boxSizingReliable()||n)&&"border-box"===k.css(t,"boxSizing",!1,i),o=r,s=Vt(t,e,i),a="offset"+e[0].toUpperCase()+e.slice(1);if(qt.test(s)){if(!n)return s;s="auto"}return(!m.boxSizingReliable()&&r||"auto"===s||!parseFloat(s)&&"inline"===k.css(t,"display",!1,i))&&t.getClientRects().length&&(r="border-box"===k.css(t,"boxSizing",!1,i),(o=a in t)&&(s=t[a])),(s=parseFloat(s)||0)+ie(t,e,n||(r?"border":"content"),o,i,s)+"px"}function oe(t,e,n,i,r){return new oe.prototype.init(t,e,n,i,r)}k.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Vt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=X(e),c=Qt.test(e),u=t.style;if(c||(e=Gt(a)),s=k.cssHooks[e]||k.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:u[e];"string"===(o=typeof n)&&(r=rt.exec(n))&&r[1]&&(n=ht(t,e,r),o="number"),null!=n&&n==n&&("number"!==o||c||(n+=r&&r[3]||(k.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(c?u.setProperty(e,n):u[e]=n))}},css:function(t,e,n,i){var r,o,s,a=X(e);return Qt.test(e)||(e=Gt(a)),(s=k.cssHooks[e]||k.cssHooks[a])&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=Vt(t,e,i)),"normal"===r&&e in ee&&(r=ee[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),k.each(["height","width"],function(t,e){k.cssHooks[e]={get:function(t,n,i){if(n)return!Kt.test(k.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?re(t,e,i):lt(t,te,function(){return re(t,e,i)})},set:function(t,n,i){var r,o=Wt(t),s=!m.scrollboxSize()&&"absolute"===o.position,a=(s||i)&&"border-box"===k.css(t,"boxSizing",!1,o),c=i?ie(t,e,i,a,o):0;return a&&s&&(c-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ie(t,e,"border",!1,o)-.5)),c&&(r=rt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=k.css(t,e)),ne(0,n,c)}}}),k.cssHooks.marginLeft=Yt(m.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Vt(t,"marginLeft"))||t.getBoundingClientRect().left-lt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(t,e){k.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+ot[i]+e]=o[i]||o[i-2]||o[0];return r}},"margin"!==t&&(k.cssHooks[t+e].set=ne)}),k.fn.extend({css:function(t,e){return U(this,function(t,e,n){var i,r,o={},s=0;if(Array.isArray(e)){for(i=Wt(t),r=e.length;s<r;s++)o[e[s]]=k.css(t,e[s],!1,i);return o}return void 0!==n?k.style(t,e,n):k.css(t,e)},t,e,arguments.length>1)}}),k.Tween=oe,oe.prototype={constructor:oe,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||k.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(k.cssNumber[n]?"":"px")},cur:function(){var t=oe.propHooks[this.prop];return t&&t.get?t.get(this):oe.propHooks._default.get(this)},run:function(t){var e,n=oe.propHooks[this.prop];return this.options.duration?this.pos=e=k.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):oe.propHooks._default.set(this),this}},oe.prototype.init.prototype=oe.prototype,oe.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=k.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){k.fx.step[t.prop]?k.fx.step[t.prop](t):1!==t.elem.nodeType||!k.cssHooks[t.prop]&&null==t.elem.style[Gt(t.prop)]?t.elem[t.prop]=t.now:k.style(t.elem,t.prop,t.now+t.unit)}}},oe.propHooks.scrollTop=oe.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},k.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},k.fx=oe.prototype.init,k.fx.step={};var se,ae,ce=/^(?:toggle|show|hide)$/,ue=/queueHooks$/;function le(){ae&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(le):n.setTimeout(le,k.fx.interval),k.fx.tick())}function he(){return n.setTimeout(function(){se=void 0}),se=Date.now()}function fe(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=ot[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function de(t,e,n){for(var i,r=(pe.tweeners[e]||[]).concat(pe.tweeners["*"]),o=0,s=r.length;o<s;o++)if(i=r[o].call(n,e,t))return i}function pe(t,e,n){var i,r,o=0,s=pe.prefilters.length,a=k.Deferred().always(function(){delete c.elem}),c=function(){if(r)return!1;for(var e=se||he(),n=Math.max(0,u.startTime+u.duration-e),i=1-(n/u.duration||0),o=0,s=u.tweens.length;o<s;o++)u.tweens[o].run(i);return a.notifyWith(t,[u,i,n]),i<1&&s?n:(s||a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:k.extend({},e),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},n),originalProperties:e,originalOptions:n,startTime:se||he(),duration:n.duration,tweens:[],createTween:function(e,n){var i=k.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),l=u.props;for(!function(t,e){var n,i,r,o,s;for(n in t)if(r=e[i=X(n)],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(s=k.cssHooks[i])&&"expand"in s)for(n in o=s.expand(o),delete t[i],o)n in t||(t[n]=o[n],e[n]=r);else e[i]=r}(l,u.opts.specialEasing);o<s;o++)if(i=pe.prefilters[o].call(u,t,l,u.opts))return w(i.stop)&&(k._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return k.map(l,de,u),w(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),k.fx.timer(k.extend(c,{elem:t,anim:u,queue:u.opts.queue})),u}k.Animation=k.extend(pe,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ht(n.elem,t,rt.exec(e),n),n}]},tweener:function(t,e){w(t)?(e=t,t=["*"]):t=t.match(O);for(var n,i=0,r=t.length;i<r;i++)n=t[i],pe.tweeners[n]=pe.tweeners[n]||[],pe.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,s,a,c,u,l,h="width"in e||"height"in e,f=this,d={},p=t.style,g=t.nodeType&&ut(t),v=K.get(t,"fxshow");for(i in n.queue||(null==(s=k._queueHooks(t,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,f.always(function(){f.always(function(){s.unqueued--,k.queue(t,"fx").length||s.empty.fire()})})),e)if(r=e[i],ce.test(r)){if(delete e[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}d[i]=v&&v[i]||k.style(t,i)}if((c=!k.isEmptyObject(e))||!k.isEmptyObject(d))for(i in h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=v&&v.display)&&(u=K.get(t,"display")),"none"===(l=k.css(t,"display"))&&(u?l=u:(pt([t],!0),u=t.style.display||u,l=k.css(t,"display"),pt([t]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===k.css(t,"float")&&(c||(f.done(function(){p.display=u}),null==u&&(l=p.display,u="none"===l?"":l)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",f.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),c=!1,d)c||(v?"hidden"in v&&(g=v.hidden):v=K.access(t,"fxshow",{display:u}),o&&(v.hidden=!g),g&&pt([t],!0),f.done(function(){for(i in g||pt([t]),K.remove(t,"fxshow"),d)k.style(t,i,d[i])})),c=de(g?v[i]:0,i,f),i in v||(v[i]=c.start,g&&(c.end=c.start,c.start=0))}],prefilter:function(t,e){e?pe.prefilters.unshift(t):pe.prefilters.push(t)}}),k.speed=function(t,e,n){var i=t&&"object"==typeof t?k.extend({},t):{complete:n||!n&&e||w(t)&&t,duration:t,easing:n&&e||e&&!w(e)&&e};return k.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in k.fx.speeds?i.duration=k.fx.speeds[i.duration]:i.duration=k.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){w(i.old)&&i.old.call(this),i.queue&&k.dequeue(this,i.queue)},i},k.fn.extend({fadeTo:function(t,e,n,i){return this.filter(ut).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=k.isEmptyObject(t),o=k.speed(e,n,i),s=function(){var e=pe(this,k.extend({},t),o);(r||K.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=k.timers,s=K.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ue.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||k.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var e,n=K.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=k.timers,s=i?i.length:0;for(n.finish=!0,k.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<s;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),k.each(["toggle","show","hide"],function(t,e){var n=k.fn[e];k.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(fe(e,!0),t,i,r)}}),k.each({slideDown:fe("show"),slideUp:fe("hide"),slideToggle:fe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){k.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),k.timers=[],k.fx.tick=function(){var t,e=0,n=k.timers;for(se=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||k.fx.stop(),se=void 0},k.fx.timer=function(t){k.timers.push(t),k.fx.start()},k.fx.interval=13,k.fx.start=function(){ae||(ae=!0,le())},k.fx.stop=function(){ae=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(t,e){return t=k.fx&&k.fx.speeds[t]||t,e=e||"fx",this.queue(e,function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}})},function(){var t=s.createElement("input"),e=s.createElement("select").appendChild(s.createElement("option"));t.type="checkbox",m.checkOn=""!==t.value,m.optSelected=e.selected,(t=s.createElement("input")).value="t",t.type="radio",m.radioValue="t"===t.value}();var ge,ve=k.expr.attrHandle;k.fn.extend({attr:function(t,e){return U(this,k.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){k.removeAttr(this,t)})}}),k.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?k.prop(t,e,n):(1===o&&k.isXMLDoc(t)||(r=k.attrHooks[e.toLowerCase()]||(k.expr.match.bool.test(e)?ge:void 0)),void 0!==n?null===n?void k.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=k.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!m.radioValue&&"radio"===e&&B(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(O);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),ge={set:function(t,e,n){return!1===e?k.removeAttr(t,n):t.setAttribute(n,n),n}},k.each(k.expr.match.bool.source.match(/\w+/g),function(t,e){var n=ve[e]||k.find.attr;ve[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=ve[s],ve[s]=r,r=null!=n(t,e,i)?s:null,ve[s]=o),r}});var me=/^(?:input|select|textarea|button)$/i,we=/^(?:a|area)$/i;function ye(t){return(t.match(O)||[]).join(" ")}function be(t){return t.getAttribute&&t.getAttribute("class")||""}function xe(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(O)||[]}k.fn.extend({prop:function(t,e){return U(this,k.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[k.propFix[t]||t]})}}),k.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&k.isXMLDoc(t)||(e=k.propFix[e]||e,r=k.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=k.find.attr(t,"tabindex");return e?parseInt(e,10):me.test(t.nodeName)||we.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(k.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,c=0;if(w(t))return this.each(function(e){k(this).addClass(t.call(this,e,be(this)))});if((e=xe(t)).length)for(;n=this[c++];)if(r=be(n),i=1===n.nodeType&&" "+ye(r)+" "){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(a=ye(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,c=0;if(w(t))return this.each(function(e){k(this).removeClass(t.call(this,e,be(this)))});if(!arguments.length)return this.attr("class","");if((e=xe(t)).length)for(;n=this[c++];)if(r=be(n),i=1===n.nodeType&&" "+ye(r)+" "){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(a=ye(i))&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):w(t)?this.each(function(n){k(this).toggleClass(t.call(this,n,be(this),e),e)}):this.each(function(){var e,r,o,s;if(i)for(r=0,o=k(this),s=xe(t);e=s[r++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=be(this))&&K.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":K.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ye(be(n))+" ").indexOf(e)>-1)return!0;return!1}});var Ce=/\r/g;k.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=w(t),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,k(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=k.map(r,function(t){return null==t?"":t+""})),(e=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=k.valHooks[r.type]||k.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(Ce,""):null==n?"":n:void 0}}),k.extend({valHooks:{option:{get:function(t){var e=k.find.attr(t,"value");return null!=e?e:ye(k.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,s="select-one"===t.type,a=s?null:[],c=s?o+1:r.length;for(i=o<0?c:s?o:0;i<c;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!B(n.parentNode,"optgroup"))){if(e=k(n).val(),s)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,o=k.makeArray(e),s=r.length;s--;)((i=r[s]).selected=k.inArray(k.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=k.inArray(k(t).val(),e)>-1}},m.checkOn||(k.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),m.focusin="onfocusin"in n;var ke=/^(?:focusinfocus|focusoutblur)$/,Te=function(t){t.stopPropagation()};k.extend(k.event,{trigger:function(t,e,i,r){var o,a,c,u,l,h,f,d,g=[i||s],v=p.call(t,"type")?t.type:t,m=p.call(t,"namespace")?t.namespace.split("."):[];if(a=d=c=i=i||s,3!==i.nodeType&&8!==i.nodeType&&!ke.test(v+k.event.triggered)&&(v.indexOf(".")>-1&&(m=v.split("."),v=m.shift(),m.sort()),l=v.indexOf(":")<0&&"on"+v,(t=t[k.expando]?t:new k.Event(v,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:k.makeArray(e,[t]),f=k.event.special[v]||{},r||!f.trigger||!1!==f.trigger.apply(i,e))){if(!r&&!f.noBubble&&!y(i)){for(u=f.delegateType||v,ke.test(u+v)||(a=a.parentNode);a;a=a.parentNode)g.push(a),c=a;c===(i.ownerDocument||s)&&g.push(c.defaultView||c.parentWindow||n)}for(o=0;(a=g[o++])&&!t.isPropagationStopped();)d=a,t.type=o>1?u:f.bindType||v,(h=(K.get(a,"events")||{})[t.type]&&K.get(a,"handle"))&&h.apply(a,e),(h=l&&a[l])&&h.apply&&J(a)&&(t.result=h.apply(a,e),!1===t.result&&t.preventDefault());return t.type=v,r||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(g.pop(),e)||!J(i)||l&&w(i[v])&&!y(i)&&((c=i[l])&&(i[l]=null),k.event.triggered=v,t.isPropagationStopped()&&d.addEventListener(v,Te),i[v](),t.isPropagationStopped()&&d.removeEventListener(v,Te),k.event.triggered=void 0,c&&(i[l]=c)),t.result}},simulate:function(t,e,n){var i=k.extend(new k.Event,n,{type:t,isSimulated:!0});k.event.trigger(i,null,e)}}),k.fn.extend({trigger:function(t,e){return this.each(function(){k.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return k.event.trigger(t,e,n,!0)}}),m.focusin||k.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){k.event.simulate(e,t.target,k.event.fix(t))};k.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=K.access(i,e);r||i.addEventListener(t,n,!0),K.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=K.access(i,e)-1;r?K.access(i,e,r):(i.removeEventListener(t,n,!0),K.remove(i,e))}}});var Ae=n.location,Se=Date.now(),Le=/\?/;k.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+t),e};var Ee=/\[\]$/,_e=/\r?\n/g,Be=/^(?:submit|button|image|reset|file)$/i,Me=/^(?:input|select|textarea|keygen)/i;function Ie(t,e,n,i){var r;if(Array.isArray(e))k.each(e,function(e,r){n||Ee.test(t)?i(t,r):Ie(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==C(e))i(t,e);else for(r in e)Ie(t+"["+r+"]",e[r],n,i)}k.param=function(t,e){var n,i=[],r=function(t,e){var n=w(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!k.isPlainObject(t))k.each(t,function(){r(this.name,this.value)});else for(n in t)Ie(n,t[n],e,r);return i.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=k.prop(this,"elements");return t?k.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!k(this).is(":disabled")&&Me.test(this.nodeName)&&!Be.test(t)&&(this.checked||!gt.test(t))}).map(function(t,e){var n=k(this).val();return null==n?null:Array.isArray(n)?k.map(n,function(t){return{name:e.name,value:t.replace(_e,"\r\n")}}):{name:e.name,value:n.replace(_e,"\r\n")}}).get()}});var Ne=/%20/g,$e=/#.*$/,Pe=/([?&])_=[^&]*/,Fe=/^(.*?):[ \t]*([^\r\n]*)$/gm,De=/^(?:GET|HEAD)$/,Oe=/^\/\//,Re={},je={},He="*/".concat("*"),ze=s.createElement("a");function qe(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(O)||[];if(w(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function We(t,e,n,i){var r={},o=t===je;function s(a){var c;return r[a]=!0,k.each(t[a]||[],function(t,a){var u=a(e,n,i);return"string"!=typeof u||o||r[u]?o?!(c=u):void 0:(e.dataTypes.unshift(u),s(u),!1)}),c}return s(e.dataTypes[0])||!r["*"]&&s("*")}function Ue(t,e){var n,i,r=k.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&k.extend(!0,t,i),t}ze.href=Ae.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ae.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ae.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":He,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ue(Ue(t,k.ajaxSettings),e):Ue(k.ajaxSettings,t)},ajaxPrefilter:qe(Re),ajaxTransport:qe(je),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var i,r,o,a,c,u,l,h,f,d,p=k.ajaxSetup({},e),g=p.context||p,v=p.context&&(g.nodeType||g.jquery)?k(g):k.event,m=k.Deferred(),w=k.Callbacks("once memory"),y=p.statusCode||{},b={},x={},C="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(l){if(!a)for(a={};e=Fe.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=x[t.toLowerCase()]=x[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==l&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)T.always(t[T.status]);else for(e in t)y[e]=[y[e],t[e]];return this},abort:function(t){var e=t||C;return i&&i.abort(e),A(0,e),this}};if(m.promise(T),p.url=((t||p.url||Ae.href)+"").replace(Oe,Ae.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(O)||[""],null==p.crossDomain){u=s.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=ze.protocol+"//"+ze.host!=u.protocol+"//"+u.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=k.param(p.data,p.traditional)),We(Re,p,e,T),l)return T;for(f in(h=k.event&&p.global)&&0==k.active++&&k.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!De.test(p.type),r=p.url.replace($e,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ne,"+")):(d=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Le.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(Pe,"$1"),d=(Le.test(r)?"&":"?")+"_="+Se+++d),p.url=r+d),p.ifModified&&(k.lastModified[r]&&T.setRequestHeader("If-Modified-Since",k.lastModified[r]),k.etag[r]&&T.setRequestHeader("If-None-Match",k.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+He+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(g,T,p)||l))return T.abort();if(C="abort",w.add(p.complete),T.done(p.success),T.fail(p.error),i=We(je,p,e,T)){if(T.readyState=1,h&&v.trigger("ajaxSend",[T,p]),l)return T;p.async&&p.timeout>0&&(c=n.setTimeout(function(){T.abort("timeout")},p.timeout));try{l=!1,i.send(b,A)}catch(t){if(l)throw t;A(-1,t)}}else A(-1,"No Transport");function A(t,e,s,a){var u,f,d,b,x,C=e;l||(l=!0,c&&n.clearTimeout(c),i=void 0,o=a||"",T.readyState=t>0?4:0,u=t>=200&&t<300||304===t,s&&(b=function(t,e,n){for(var i,r,o,s,a=t.contents,c=t.dataTypes;"*"===c[0];)c.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){c.unshift(r);break}if(c[0]in n)o=c[0];else{for(r in n){if(!c[0]||t.converters[r+" "+c[0]]){o=r;break}s||(s=r)}o=o||s}if(o)return o!==c[0]&&c.unshift(o),n[o]}(p,T,s)),b=function(t,e,n,i){var r,o,s,a,c,u={},l=t.dataTypes.slice();if(l[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(o=l.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!c&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),c=o,o=l.shift())if("*"===o)o=c;else if("*"!==c&&c!==o){if(!(s=u[c+" "+o]||u["* "+o]))for(r in u)if((a=r.split(" "))[1]===o&&(s=u[c+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[r]:!0!==u[r]&&(o=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&t.throws)e=s(e);else try{e=s(e)}catch(t){return{state:"parsererror",error:s?t:"No conversion from "+c+" to "+o}}}return{state:"success",data:e}}(p,b,T,u),u?(p.ifModified&&((x=T.getResponseHeader("Last-Modified"))&&(k.lastModified[r]=x),(x=T.getResponseHeader("etag"))&&(k.etag[r]=x)),204===t||"HEAD"===p.type?C="nocontent":304===t?C="notmodified":(C=b.state,f=b.data,u=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),T.status=t,T.statusText=(e||C)+"",u?m.resolveWith(g,[f,C,T]):m.rejectWith(g,[T,C,d]),T.statusCode(y),y=void 0,h&&v.trigger(u?"ajaxSuccess":"ajaxError",[T,p,u?f:d]),w.fireWith(g,[T,C]),h&&(v.trigger("ajaxComplete",[T,p]),--k.active||k.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,n){return k.get(t,e,n,"json")},getScript:function(t,e){return k.get(t,void 0,e,"script")}}),k.each(["get","post"],function(t,e){k[e]=function(t,n,i,r){return w(n)&&(r=r||i,i=n,n=void 0),k.ajax(k.extend({url:t,type:e,dataType:r,data:n,success:i},k.isPlainObject(t)&&t))}}),k._evalUrl=function(t,e){return k.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){k.globalEval(t,e)}})},k.fn.extend({wrapAll:function(t){var e;return this[0]&&(w(t)&&(t=t.call(this[0])),e=k(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return w(t)?this.each(function(e){k(this).wrapInner(t.call(this,e))}):this.each(function(){var e=k(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=w(t);return this.each(function(n){k(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(t){return!k.expr.pseudos.visible(t)},k.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var Ve={0:200,1223:204},Ye=k.ajaxSettings.xhr();m.cors=!!Ye&&"withCredentials"in Ye,m.ajax=Ye=!!Ye,k.ajaxTransport(function(t){var e,i;if(m.cors||Ye&&!t.crossDomain)return{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];for(s in t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ve[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=a.ontimeout=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}}),k.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return k.globalEval(t),t}}}),k.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),k.ajaxTransport("script",function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,r){e=k("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),s.head.appendChild(e[0])},abort:function(){n&&n()}}});var Ze,Xe=[],Je=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Xe.pop()||k.expando+"_"+Se++;return this[t]=!0,t}}),k.ajaxPrefilter("json jsonp",function(t,e,i){var r,o,s,a=!1!==t.jsonp&&(Je.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Je.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=w(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Je,"$1"+r):!1!==t.jsonp&&(t.url+=(Le.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||k.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?k(n).removeProp(r):n[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,Xe.push(r)),s&&w(o)&&o(s[0]),s=o=void 0}),"script"}),m.createHTMLDocument=((Ze=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ze.childNodes.length),k.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(m.createHTMLDocument?((i=(e=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,e.head.appendChild(i)):e=s),o=!n&&[],(r=M.exec(t))?[e.createElement(r[1])]:(r=Tt([t],e,o),o&&o.length&&k(o).remove(),k.merge([],r.childNodes)));var i,r,o},k.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=ye(t.slice(a)),t=t.slice(0,a)),w(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&k.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?k("<div>").append(k.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){k.fn[e]=function(t){return this.on(e,t)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(e){return t===e.elem}).length},k.offset={setOffset:function(t,e,n){var i,r,o,s,a,c,u=k.css(t,"position"),l=k(t),h={};"static"===u&&(t.style.position="relative"),a=l.offset(),o=k.css(t,"top"),c=k.css(t,"left"),("absolute"===u||"fixed"===u)&&(o+c).indexOf("auto")>-1?(s=(i=l.position()).top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(c)||0),w(e)&&(e=e.call(t,n,k.extend({},a))),null!=e.top&&(h.top=e.top-a.top+s),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):l.css(h)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){k.offset.setOffset(this,t,e)});var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===k.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===k.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=k(t).offset()).top+=k.css(t,"borderTopWidth",!0),r.left+=k.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-k.css(i,"marginTop",!0),left:e.left-r.left-k.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===k.css(t,"position");)t=t.offsetParent;return t||st})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;k.fn[t]=function(i){return U(this,function(t,i,r){var o;if(y(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r},t,i,arguments.length)}}),k.each(["top","left"],function(t,e){k.cssHooks[e]=Yt(m.pixelPosition,function(t,n){if(n)return n=Vt(t,e),qt.test(n)?k(t).position()[e]+"px":n})}),k.each({Height:"height",Width:"width"},function(t,e){k.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){k.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===o?"margin":"border");return U(this,function(e,n,r){var o;return y(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?k.css(e,n,a):k.style(e,n,r,a)},e,s?r:void 0,s)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){k.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),k.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),k.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),k.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),w(t))return i=c.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(c.call(arguments)))}).guid=t.guid=t.guid||k.guid++,r},k.holdReady=function(t){t?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=B,k.isFunction=w,k.isWindow=y,k.camelCase=X,k.type=C,k.now=Date.now,k.isNumeric=function(t){var e=k.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},void 0===(i=function(){return k}.apply(e,[]))||(t.exports=i);var Ge=n.jQuery,Ke=n.$;return k.noConflict=function(t){return n.$===k&&(n.$=Ke),t&&n.jQuery===k&&(n.jQuery=Ge),k},r||(n.jQuery=n.$=k),k})},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2)],void 0===(o="function"==typeof(i=function(t){var e,n="ui-effects-animated",i=t;return t.effects={effect:{}},
/*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2014 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
function(t,e){var n,i=/^([\-+])=\s*(\d+\.?\d*)/,r=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],o=t.Color=function(e,n,i,r){return new t.Color.fn.parse(e,n,i,r)},s={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},a={byte:{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},c=o.support={},u=t("<p>")[0],l=t.each;function h(t,e,n){var i=a[e.type]||{};return null==t?n||!e.def?null:e.def:(t=i.floor?~~t:parseFloat(t),isNaN(t)?e.def:i.mod?(t+i.mod)%i.mod:0>t?0:i.max<t?i.max:t)}function f(e){var i=o(),a=i._rgba=[];return e=e.toLowerCase(),l(r,function(t,n){var r,o=n.re.exec(e),c=o&&n.parse(o),u=n.space||"rgba";if(c)return r=i[u](c),i[s[u].cache]=r[s[u].cache],a=i._rgba=r._rgba,!1}),a.length?("0,0,0,0"===a.join()&&t.extend(a,n.transparent),i):n[e]}function d(t,e,n){return 6*(n=(n+1)%1)<1?t+(e-t)*n*6:2*n<1?e:3*n<2?t+(e-t)*(2/3-n)*6:t}u.style.cssText="background-color:rgba(1,1,1,.5)",c.rgba=u.style.backgroundColor.indexOf("rgba")>-1,l(s,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),o.fn=t.extend(o.prototype,{parse:function(e,i,r,a){if(void 0===e)return this._rgba=[null,null,null,null],this;(e.jquery||e.nodeType)&&(e=t(e).css(i),i=void 0);var c=this,u=t.type(e),d=this._rgba=[];return void 0!==i&&(e=[e,i,r,a],u="array"),"string"===u?this.parse(f(e)||n._default):"array"===u?(l(s.rgba.props,function(t,n){d[n.idx]=h(e[n.idx],n)}),this):"object"===u?(l(s,e instanceof o?function(t,n){e[n.cache]&&(c[n.cache]=e[n.cache].slice())}:function(n,i){var r=i.cache;l(i.props,function(t,n){if(!c[r]&&i.to){if("alpha"===t||null==e[t])return;c[r]=i.to(c._rgba)}c[r][n.idx]=h(e[t],n,!0)}),c[r]&&t.inArray(null,c[r].slice(0,3))<0&&(c[r][3]=1,i.from&&(c._rgba=i.from(c[r])))}),this):void 0},is:function(t){var e=o(t),n=!0,i=this;return l(s,function(t,r){var o,s=e[r.cache];return s&&(o=i[r.cache]||r.to&&r.to(i._rgba)||[],l(r.props,function(t,e){if(null!=s[e.idx])return n=s[e.idx]===o[e.idx]})),n}),n},_space:function(){var t=[],e=this;return l(s,function(n,i){e[i.cache]&&t.push(n)}),t.pop()},transition:function(t,e){var n=o(t),i=n._space(),r=s[i],c=0===this.alpha()?o("transparent"):this,u=c[r.cache]||r.to(c._rgba),f=u.slice();return n=n[r.cache],l(r.props,function(t,i){var r=i.idx,o=u[r],s=n[r],c=a[i.type]||{};null!==s&&(null===o?f[r]=s:(c.mod&&(s-o>c.mod/2?o+=c.mod:o-s>c.mod/2&&(o-=c.mod)),f[r]=h((s-o)*e+o,i)))}),this[i](f)},blend:function(e){if(1===this._rgba[3])return this;var n=this._rgba.slice(),i=n.pop(),r=o(e)._rgba;return o(t.map(n,function(t,e){return(1-i)*r[e]+i*t}))},toRgbaString:function(){var e="rgba(",n=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===n[3]&&(n.pop(),e="rgb("),e+n.join()+")"},toHslaString:function(){var e="hsla(",n=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&e<3&&(t=Math.round(100*t)+"%"),t});return 1===n[3]&&(n.pop(),e="hsl("),e+n.join()+")"},toHexString:function(e){var n=this._rgba.slice(),i=n.pop();return e&&n.push(~~(255*i)),"#"+t.map(n,function(t){return 1===(t=(t||0).toString(16)).length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),o.fn.parse.prototype=o.fn,s.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,n,i=t[0]/255,r=t[1]/255,o=t[2]/255,s=t[3],a=Math.max(i,r,o),c=Math.min(i,r,o),u=a-c,l=a+c,h=.5*l;return e=c===a?0:i===a?60*(r-o)/u+360:r===a?60*(o-i)/u+120:60*(i-r)/u+240,n=0===u?0:h<=.5?u/l:u/(2-l),[Math.round(e)%360,n,h,null==s?1:s]},s.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,n=t[1],i=t[2],r=t[3],o=i<=.5?i*(1+n):i+n-i*n,s=2*i-o;return[Math.round(255*d(s,o,e+1/3)),Math.round(255*d(s,o,e)),Math.round(255*d(s,o,e-1/3)),r]},l(s,function(e,n){var r=n.props,s=n.cache,a=n.to,c=n.from;o.fn[e]=function(e){if(a&&!this[s]&&(this[s]=a(this._rgba)),void 0===e)return this[s].slice();var n,i=t.type(e),u="array"===i||"object"===i?e:arguments,f=this[s].slice();return l(r,function(t,e){var n=u["object"===i?t:e.idx];null==n&&(n=f[e.idx]),f[e.idx]=h(n,e)}),c?((n=o(c(f)))[s]=f,n):o(f)},l(r,function(n,r){o.fn[n]||(o.fn[n]=function(o){var s,a=t.type(o),c="alpha"===n?this._hsla?"hsla":"rgba":e,u=this[c](),l=u[r.idx];return"undefined"===a?l:("function"===a&&(o=o.call(this,l),a=t.type(o)),null==o&&r.empty?this:("string"===a&&(s=i.exec(o))&&(o=l+parseFloat(s[2])*("+"===s[1]?1:-1)),u[r.idx]=o,this[c](u)))})})}),o.hook=function(e){var n=e.split(" ");l(n,function(e,n){t.cssHooks[n]={set:function(e,i){var r,s,a="";if("transparent"!==i&&("string"!==t.type(i)||(r=f(i)))){if(i=o(r||i),!c.rgba&&1!==i._rgba[3]){for(s="backgroundColor"===n?e.parentNode:e;(""===a||"transparent"===a)&&s&&s.style;)try{a=t.css(s,"backgroundColor"),s=s.parentNode}catch(t){}i=i.blend(a&&"transparent"!==a?a:"_default")}i=i.toRgbaString()}try{e.style[n]=i}catch(t){}}},t.fx.step[n]=function(e){e.colorInit||(e.start=o(e.elem,n),e.end=o(e.end),e.colorInit=!0),t.cssHooks[n].set(e.elem,e.start.transition(e.end,e.pos))}})},o.hook("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor"),t.cssHooks.borderColor={expand:function(t){var e={};return l(["Top","Right","Bottom","Left"],function(n,i){e["border"+i+"Color"]=t}),e}},n=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(i),function(){var e,n=["add","remove","toggle"],r={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};function o(e){var n,i,r=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,o={};if(r&&r.length&&r[0]&&r[r[0]])for(i=r.length;i--;)"string"==typeof r[n=r[i]]&&(o[t.camelCase(n)]=r[n]);else for(n in r)"string"==typeof r[n]&&(o[n]=r[n]);return o}t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,n){t.fx.step[n]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(i.style(t.elem,n,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(e,i,s,a){var c=t.speed(i,s,a);return this.queue(function(){var i,s=t(this),a=s.attr("class")||"",u=c.children?s.find("*").addBack():s;u=u.map(function(){return{el:t(this),start:o(this)}}),(i=function(){t.each(n,function(t,n){e[n]&&s[n+"Class"](e[n])})})(),u=u.map(function(){return this.end=o(this.el[0]),this.diff=function(e,n){var i,o,s={};for(i in n)o=n[i],e[i]!==o&&(r[i]||!t.fx.step[i]&&isNaN(parseFloat(o))||(s[i]=o));return s}(this.start,this.end),this}),s.attr("class",a),u=u.map(function(){var e=this,n=t.Deferred(),i=t.extend({},c,{queue:!1,complete:function(){n.resolve(e)}});return this.el.animate(this.diff,i),n.promise()}),t.when.apply(t,u.get()).done(function(){i(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),c.complete.call(s[0])})})},t.fn.extend({addClass:(e=t.fn.addClass,function(n,i,r,o){return i?t.effects.animateClass.call(this,{add:n},i,r,o):e.apply(this,arguments)}),removeClass:function(e){return function(n,i,r,o){return arguments.length>1?t.effects.animateClass.call(this,{remove:n},i,r,o):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(e){return function(n,i,r,o,s){return"boolean"==typeof i||void 0===i?r?t.effects.animateClass.call(this,i?{add:n}:{remove:n},r,o,s):e.apply(this,arguments):t.effects.animateClass.call(this,{toggle:n},i,r,o)}}(t.fn.toggleClass),switchClass:function(e,n,i,r,o){return t.effects.animateClass.call(this,{add:n,remove:e},i,r,o)}})}(),function(){var e;function i(e,n,i,r){return t.isPlainObject(e)&&(n=e,e=e.effect),e={effect:e},null==n&&(n={}),t.isFunction(n)&&(r=n,i=null,n={}),("number"==typeof n||t.fx.speeds[n])&&(r=i,i=n,n={}),t.isFunction(i)&&(r=i,i=null),n&&t.extend(e,n),i=i||n.duration,e.duration=t.fx.off?0:"number"==typeof i?i:i in t.fx.speeds?t.fx.speeds[i]:t.fx.speeds._default,e.complete=r||n.complete,e}function r(e){return!(e&&"number"!=typeof e&&!t.fx.speeds[e])||"string"==typeof e&&!t.effects.effect[e]||!!t.isFunction(e)||"object"==typeof e&&!e.effect}function o(t,e){var n=e.outerWidth(),i=e.outerHeight(),r=/^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/.exec(t)||["",0,n,i,0];return{top:parseFloat(r[1])||0,right:"auto"===r[2]?n:parseFloat(r[2]),bottom:"auto"===r[3]?i:parseFloat(r[3]),left:parseFloat(r[4])||0}}t.expr&&t.expr.filters&&t.expr.filters.animated&&(t.expr.filters.animated=(e=t.expr.filters.animated,function(i){return!!t(i).data(n)||e(i)})),!1!==t.uiBackCompat&&t.extend(t.effects,{save:function(t,e){for(var n=0,i=e.length;n<i;n++)null!==e[n]&&t.data("ui-effects-"+e[n],t[0].style[e[n]])},restore:function(t,e){for(var n,i=0,r=e.length;i<r;i++)null!==e[i]&&(n=t.data("ui-effects-"+e[i]),t.css(e[i],n))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var n={width:e.outerWidth(!0),height:e.outerHeight(!0),float:e.css("float")},i=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),r={width:e.width(),height:e.height()},o=document.activeElement;try{o.id}catch(t){o=document.body}return e.wrap(i),(e[0]===o||t.contains(e[0],o))&&t(o).trigger("focus"),i=e.parent(),"static"===e.css("position")?(i.css({position:"relative"}),e.css({position:"relative"})):(t.extend(n,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,i){n[i]=e.css(i),isNaN(parseInt(n[i],10))&&(n[i]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(r),i.css(n).show()},removeWrapper:function(e){var n=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===n||t.contains(e[0],n))&&t(n).trigger("focus")),e}}),t.extend(t.effects,{version:"1.12.1",define:function(e,n,i){return i||(i=n,n="effect"),t.effects.effect[e]=i,t.effects.effect[e].mode=n,i},scaledDimensions:function(t,e,n){if(0===e)return{height:0,width:0,outerHeight:0,outerWidth:0};var i="horizontal"!==n?(e||100)/100:1,r="vertical"!==n?(e||100)/100:1;return{height:t.height()*r,width:t.width()*i,outerHeight:t.outerHeight()*r,outerWidth:t.outerWidth()*i}},clipToBox:function(t){return{width:t.clip.right-t.clip.left,height:t.clip.bottom-t.clip.top,left:t.clip.left,top:t.clip.top}},unshift:function(t,e,n){var i=t.queue();e>1&&i.splice.apply(i,[1,0].concat(i.splice(e,n))),t.dequeue()},saveStyle:function(t){t.data("ui-effects-style",t[0].style.cssText)},restoreStyle:function(t){t[0].style.cssText=t.data("ui-effects-style")||"",t.removeData("ui-effects-style")},mode:function(t,e){var n=t.is(":hidden");return"toggle"===e&&(e=n?"show":"hide"),(n?"hide"===e:"show"===e)&&(e="none"),e},getBaseline:function(t,e){var n,i;switch(t[0]){case"top":n=0;break;case"middle":n=.5;break;case"bottom":n=1;break;default:n=t[0]/e.height}switch(t[1]){case"left":i=0;break;case"center":i=.5;break;case"right":i=1;break;default:i=t[1]/e.width}return{x:i,y:n}},createPlaceholder:function(e){var n,i=e.css("position"),r=e.position();return e.css({marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()),/^(static|relative)/.test(i)&&(i="absolute",n=t("<"+e[0].nodeName+">").insertAfter(e).css({display:/^(inline|ruby)/.test(e.css("display"))?"inline-block":"block",visibility:"hidden",marginTop:e.css("marginTop"),marginBottom:e.css("marginBottom"),marginLeft:e.css("marginLeft"),marginRight:e.css("marginRight"),float:e.css("float")}).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"),e.data("ui-effects-placeholder",n)),e.css({position:i,left:r.left,top:r.top}),n},removePlaceholder:function(t){var e="ui-effects-placeholder",n=t.data(e);n&&(n.remove(),t.removeData(e))},cleanUp:function(e){t.effects.restoreStyle(e),t.effects.removePlaceholder(e)},setTransition:function(e,n,i,r){return r=r||{},t.each(n,function(t,n){var o=e.cssUnit(n);o[0]>0&&(r[n]=o[0]*i+o[1])}),r}}),t.fn.extend({effect:function(){var e=i.apply(this,arguments),r=t.effects.effect[e.effect],o=r.mode,s=e.queue,a=s||"fx",c=e.complete,u=e.mode,l=[],h=function(e){var i=t(this),r=t.effects.mode(i,u)||o;i.data(n,!0),l.push(r),o&&("show"===r||r===o&&"hide"===r)&&i.show(),o&&"none"===r||t.effects.saveStyle(i),t.isFunction(e)&&e()};if(t.fx.off||!r)return u?this[u](e.duration,c):this.each(function(){c&&c.call(this)});function f(i){var s=t(this);function a(){t.isFunction(c)&&c.call(s[0]),t.isFunction(i)&&i()}e.mode=l.shift(),!1===t.uiBackCompat||o?"none"===e.mode?(s[u](),a()):r.call(s[0],e,function(){s.removeData(n),t.effects.cleanUp(s),"hide"===e.mode&&s.hide(),a()}):(s.is(":hidden")?"hide"===u:"show"===u)?(s[u](),a()):r.call(s[0],e,a)}return!1===s?this.each(h).each(f):this.queue(a,h).queue(a,f)},show:function(t){return function(e){if(r(e))return t.apply(this,arguments);var n=i.apply(this,arguments);return n.mode="show",this.effect.call(this,n)}}(t.fn.show),hide:function(t){return function(e){if(r(e))return t.apply(this,arguments);var n=i.apply(this,arguments);return n.mode="hide",this.effect.call(this,n)}}(t.fn.hide),toggle:function(t){return function(e){if(r(e)||"boolean"==typeof e)return t.apply(this,arguments);var n=i.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)}}(t.fn.toggle),cssUnit:function(e){var n=this.css(e),i=[];return t.each(["em","px","%","pt"],function(t,e){n.indexOf(e)>0&&(i=[parseFloat(n),e])}),i},cssClip:function(t){return t?this.css("clip","rect("+t.top+"px "+t.right+"px "+t.bottom+"px "+t.left+"px)"):o(this.css("clip"),this)},transfer:function(e,n){var i=t(this),r=t(e.to),o="fixed"===r.css("position"),s=t("body"),a=o?s.scrollTop():0,c=o?s.scrollLeft():0,u=r.offset(),l={top:u.top-a,left:u.left-c,height:r.innerHeight(),width:r.innerWidth()},h=i.offset(),f=t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({top:h.top-a,left:h.left-c,height:i.innerHeight(),width:i.innerWidth(),position:o?"fixed":"absolute"}).animate(l,e.duration,e.easing,function(){f.remove(),t.isFunction(n)&&n()})}}),t.fx.step.clip=function(e){e.clipInit||(e.start=t(e.elem).cssClip(),"string"==typeof e.end&&(e.end=o(e.end,e.elem)),e.clipInit=!0),t(e.elem).cssClip({top:e.pos*(e.end.top-e.start.top)+e.start.top,right:e.pos*(e.end.right-e.start.right)+e.start.right,bottom:e.pos*(e.end.bottom-e.start.bottom)+e.start.bottom,left:e.pos*(e.end.left-e.start.left)+e.start.left})}}(),e={},t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,n){e[n]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,n=4;t<((e=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,n){t.easing["easeIn"+e]=n,t.easing["easeOut"+e]=function(t){return 1-n(1-t)},t.easing["easeInOut"+e]=function(t){return t<.5?n(2*t)/2:1-n(-2*t+2)/2}}),t.effects})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;r=[n(0)],void 0===(o="function"==typeof(i=function(t){return t.ui=t.ui||{},t.ui.version="1.12.1"})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){function i(t){if(t)return function(t){for(var e in i.prototype)t[e]=i.prototype[e];return t}(t)}t.exports=i,i.prototype.on=i.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},i.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},i.prototype.off=i.prototype.removeListener=i.prototype.removeAllListeners=i.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r=0;r<i.length;r++)if((n=i[r])===e||n.fn===e){i.splice(r,1);break}return this},i.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var i=0,r=(n=n.slice(0)).length;i<r;++i)n[i].apply(this,e);return this},i.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},i.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var i,r=n(57),o=n(26),s=n(59),a=n(60),c=n(61);"undefined"!=typeof ArrayBuffer&&(i=n(62));var u="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),l="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),h=u||l;e.protocol=3;var f=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},d=r(f),p={type:"error",data:"parser error"},g=n(63);function v(t,e,n){for(var i=new Array(t.length),r=a(t.length,n),o=function(t,n,r){e(n,function(e,n){i[t]=n,r(e,i)})},s=0;s<t.length;s++)o(s,t[s],r)}e.encodePacket=function(t,n,i,r){"function"==typeof n&&(r=n,n=!1),"function"==typeof i&&(r=i,i=null);var o=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&o instanceof ArrayBuffer)return function(t,n,i){if(!n)return e.encodeBase64Packet(t,i);var r=t.data,o=new Uint8Array(r),s=new Uint8Array(1+r.byteLength);s[0]=f[t.type];for(var a=0;a<o.length;a++)s[a+1]=o[a];return i(s.buffer)}(t,n,r);if(void 0!==g&&o instanceof g)return function(t,n,i){if(!n)return e.encodeBase64Packet(t,i);if(h)return function(t,n,i){if(!n)return e.encodeBase64Packet(t,i);var r=new FileReader;return r.onload=function(){e.encodePacket({type:t.type,data:r.result},n,!0,i)},r.readAsArrayBuffer(t.data)}(t,n,i);var r=new Uint8Array(1);r[0]=f[t.type];var o=new g([r.buffer,t.data]);return i(o)}(t,n,r);if(o&&o.base64)return function(t,n){var i="b"+e.packets[t.type]+t.data.data;return n(i)}(t,r);var s=f[t.type];return void 0!==t.data&&(s+=i?c.encode(String(t.data),{strict:!1}):String(t.data)),r(""+s)},e.encodeBase64Packet=function(t,n){var i,r="b"+e.packets[t.type];if(void 0!==g&&t.data instanceof g){var o=new FileReader;return o.onload=function(){var t=o.result.split(",")[1];n(r+t)},o.readAsDataURL(t.data)}try{i=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),c=0;c<s.length;c++)a[c]=s[c];i=String.fromCharCode.apply(null,a)}return r+=btoa(i),n(r)},e.decodePacket=function(t,n,i){if(void 0===t)return p;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(i&&!1===(t=function(t){try{t=c.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return p;var r=t.charAt(0);return Number(r)==r&&d[r]?t.length>1?{type:d[r],data:t.substring(1)}:{type:d[r]}:p}r=new Uint8Array(t)[0];var o=s(t,1);return g&&"blob"===n&&(o=new g([o])),{type:d[r],data:o}},e.decodeBase64Packet=function(t,e){var n=d[t.charAt(0)];if(!i)return{type:n,data:{base64:!0,data:t.substr(1)}};var r=i.decode(t.substr(1));return"blob"===e&&g&&(r=new g([r])),{type:n,data:r}},e.encodePayload=function(t,n,i){"function"==typeof n&&(i=n,n=null);var r=o(t);if(n&&r)return g&&!h?e.encodePayloadAsBlob(t,i):e.encodePayloadAsArrayBuffer(t,i);if(!t.length)return i("0:");v(t,function(t,i){e.encodePacket(t,!!r&&n,!1,function(t){i(null,function(t){return t.length+":"+t}(t))})},function(t,e){return i(e.join(""))})},e.decodePayload=function(t,n,i){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,i);var r;if("function"==typeof n&&(i=n,n=null),""===t)return i(p,0,1);for(var o,s,a="",c=0,u=t.length;c<u;c++){var l=t.charAt(c);if(":"===l){if(""===a||a!=(o=Number(a)))return i(p,0,1);if(a!=(s=t.substr(c+1,o)).length)return i(p,0,1);if(s.length){if(r=e.decodePacket(s,n,!1),p.type===r.type&&p.data===r.data)return i(p,0,1);if(!1===i(r,c+o,u))return}c+=o,a=""}else a+=l}return""!==a?i(p,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));v(t,function(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})},function(t,e){var i=e.reduce(function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2},0),r=new Uint8Array(i),o=0;return e.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var i=new Uint8Array(t.length),s=0;s<t.length;s++)i[s]=t.charCodeAt(s);n=i.buffer}r[o++]=e?0:1;var a=n.byteLength.toString();for(s=0;s<a.length;s++)r[o++]=parseInt(a[s]);r[o++]=255;for(i=new Uint8Array(n),s=0;s<i.length;s++)r[o++]=i[s]}),n(r.buffer)})},e.encodePayloadAsBlob=function(t,n){v(t,function(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var i=new Uint8Array(t.length),r=0;r<t.length;r++)i[r]=t.charCodeAt(r);t=i.buffer,e[0]=0}var o=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(o.length+1);for(r=0;r<o.length;r++)s[r]=parseInt(o[r]);if(s[o.length]=255,g){var a=new g([e.buffer,s.buffer,t]);n(null,a)}})},function(t,e){return n(new g(e))})},e.decodePayloadAsBinary=function(t,n,i){"function"==typeof n&&(i=n,n=null);for(var r=t,o=[];r.byteLength>0;){for(var a=new Uint8Array(r),c=0===a[0],u="",l=1;255!==a[l];l++){if(u.length>310)return i(p,0,1);u+=a[l]}r=s(r,2+u.length),u=parseInt(u);var h=s(r,0,u);if(c)try{h=String.fromCharCode.apply(null,new Uint8Array(h))}catch(t){var f=new Uint8Array(h);h="";for(l=0;l<f.length;l++)h+=String.fromCharCode(f[l])}o.push(h),r=s(r,u)}var d=o.length;o.forEach(function(t,r){i(e.decodePacket(t,n,!0),r,d)})}},function(t,e){var n="Webkit Moz O ms".split(" "),i=.001;function r(t,e,i){for(var r=t.style,s=0;s<n.length;++s){r[n[s]+o(e)]=i}r[e]=i}function o(t){return t.charAt(0).toUpperCase()+t.slice(1)}function s(t){return!function(t){return"[object Array]"===Object.prototype.toString.call(t)}(t)&&("object"===typeof t&&!!t)}function a(t,e){for(var n in t){if(t.hasOwnProperty(n))e(t[n],n)}}t.exports={extend:function t(e,n,i){for(var r in e=e||{},i=i||!1,n=n||{})if(n.hasOwnProperty(r)){var o=e[r],a=n[r];i&&s(o)&&s(a)?e[r]=t(o,a,i):e[r]=a}return e},render:function(t,e){var n=t;for(var i in e)if(e.hasOwnProperty(i)){var r=e[i],o=new RegExp("\\{"+i+"\\}","g");n=n.replace(o,r)}return n},setStyle:r,setStyles:function(t,e){a(e,function(e,n){null!=e&&(s(e)&&!0===e.prefix?r(t,n,e.value):t.style[n]=e)})},capitalize:o,isString:function(t){return"string"==typeof t||t instanceof String},isFunction:function(t){return"function"==typeof t},isObject:s,forEachObject:a,floatEquals:function(t,e){return Math.abs(t-e)<i},removeChildren:function(t){for(;t.firstChild;)t.removeChild(t.firstChild)}}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,i,r=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{i="function"==typeof clearTimeout?clearTimeout:s}catch(t){i=s}}();var c,u=[],l=!1,h=-1;function f(){l&&c&&(l=!1,c.length?u=c.concat(u):h=-1,u.length&&d())}function d(){if(!l){var t=a(f);l=!0;for(var e=u.length;e;){for(c=u,u=[];++h<e;)c&&c[h].run();h=-1,e=u.length}c=null,l=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===s||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function g(){}r.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new p(t,e)),1!==u.length||l||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=g,r.addListener=g,r.once=g,r.off=g,r.removeListener=g,r.removeAllListeners=g,r.emit=g,r.prependListener=g,r.prependOnceListener=g,r.listeners=function(t){return[]},r.binding=function(t){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(t){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(t,e,n){(function(i){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG),t}(e=t.exports=n(46)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var i="color: "+this.color;t.splice(1,0,i,"color: inherit");var r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(r++,"%c"===t&&(o=r))}),t.splice(o,0,i)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())}).call(this,n(7))},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),i=0,r=n.length;i<r;i++){var o=n[i].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(i){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG),t}(e=t.exports=n(64)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var i="color: "+this.color;t.splice(1,0,i,"color: inherit");var r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(r++,"%c"===t&&(o=r))}),t.splice(o,0,i)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())}).call(this,n(7))},function(t,e,n){var i=n(84);i.Template=n(85).Template,i.template=i.Template,t.exports=i},function(t,e,n){var i=n(34),r=n(5),o=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");if(0!==arguments.length){this._opts=r.extend({color:"#555",strokeWidth:1,trailColor:null,trailWidth:null,fill:null,text:{style:{color:null,position:"absolute",left:"50%",top:"50%",padding:0,margin:0,transform:{prefix:!0,value:"translate(-50%, -50%)"}},autoStyleContainer:!0,alignToBottom:!0,value:null,className:"progressbar-text"},svgStyle:{display:"block",width:"100%"},warnings:!1},n,!0),r.isObject(n)&&void 0!==n.svgStyle&&(this._opts.svgStyle=n.svgStyle),r.isObject(n)&&r.isObject(n.text)&&void 0!==n.text.style&&(this._opts.text.style=n.text.style);var o,s=this._createSvgView(this._opts);if(!(o=r.isString(e)?document.querySelector(e):e))throw new Error("Container does not exist: "+e);this._container=o,this._container.appendChild(s.svg),this._opts.warnings&&this._warnContainerAspectRatio(this._container),this._opts.svgStyle&&r.setStyles(s.svg,this._opts.svgStyle),this.svg=s.svg,this.path=s.path,this.trail=s.trail,this.text=null;var a=r.extend({attachment:void 0,shape:this},this._opts);this._progressPath=new i(s.path,a),r.isObject(this._opts.text)&&null!==this._opts.text.value&&this.setText(this._opts.text.value)}};o.prototype.animate=function(t,e,n){if(null===this._progressPath)throw new Error("Object is destroyed");this._progressPath.animate(t,e,n)},o.prototype.stop=function(){if(null===this._progressPath)throw new Error("Object is destroyed");void 0!==this._progressPath&&this._progressPath.stop()},o.prototype.destroy=function(){if(null===this._progressPath)throw new Error("Object is destroyed");this.stop(),this.svg.parentNode.removeChild(this.svg),this.svg=null,this.path=null,this.trail=null,this._progressPath=null,null!==this.text&&(this.text.parentNode.removeChild(this.text),this.text=null)},o.prototype.set=function(t){if(null===this._progressPath)throw new Error("Object is destroyed");this._progressPath.set(t)},o.prototype.value=function(){if(null===this._progressPath)throw new Error("Object is destroyed");return void 0===this._progressPath?0:this._progressPath.value()},o.prototype.setText=function(t){if(null===this._progressPath)throw new Error("Object is destroyed");null===this.text&&(this.text=this._createTextContainer(this._opts,this._container),this._container.appendChild(this.text)),r.isObject(t)?(r.removeChildren(this.text),this.text.appendChild(t)):this.text.innerHTML=t},o.prototype._createSvgView=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");this._initializeSvg(e,t);var n=null;(t.trailColor||t.trailWidth)&&(n=this._createTrail(t),e.appendChild(n));var i=this._createPath(t);return e.appendChild(i),{svg:e,path:i,trail:n}},o.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 100")},o.prototype._createPath=function(t){var e=this._pathString(t);return this._createPathElement(e,t)},o.prototype._createTrail=function(t){var e=this._trailString(t),n=r.extend({},t);return n.trailColor||(n.trailColor="#eee"),n.trailWidth||(n.trailWidth=n.strokeWidth),n.color=n.trailColor,n.strokeWidth=n.trailWidth,n.fill=null,this._createPathElement(e,n)},o.prototype._createPathElement=function(t,e){var n=document.createElementNS("http://www.w3.org/2000/svg","path");return n.setAttribute("d",t),n.setAttribute("stroke",e.color),n.setAttribute("stroke-width",e.strokeWidth),e.fill?n.setAttribute("fill",e.fill):n.setAttribute("fill-opacity","0"),n},o.prototype._createTextContainer=function(t,e){var n=document.createElement("div");n.className=t.text.className;var i=t.text.style;return i&&(t.text.autoStyleContainer&&(e.style.position="relative"),r.setStyles(n,i),i.color||(n.style.color=t.color)),this._initializeTextContainer(t,e,n),n},o.prototype._initializeTextContainer=function(t,e,n){},o.prototype._pathString=function(t){throw new Error("Override this function for each progress bar")},o.prototype._trailString=function(t){throw new Error("Override this function for each progress bar")},o.prototype._warnContainerAspectRatio=function(t){if(this.containerAspectRatio){var e=window.getComputedStyle(t,null),n=parseFloat(e.getPropertyValue("width"),10),i=parseFloat(e.getPropertyValue("height"),10);r.floatEquals(this.containerAspectRatio,n/i)||(console.warn("Incorrect aspect ratio of container","#"+t.id,"detected:",e.getPropertyValue("width")+"(width)","/",e.getPropertyValue("height")+"(height)","=",n/i),console.warn("Aspect ratio of should be",this.containerAspectRatio))}},t.exports=o},function(t,e){var n=1e3,i=60*n,r=60*i,o=24*r,s=365.25*o;function a(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var c,u=typeof t;if("string"===u&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*i;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===u&&!1===isNaN(t))return e.long?a(c=t,o,"day")||a(c,r,"hour")||a(c,i,"minute")||a(c,n,"second")||c+" ms":function(t){if(t>=o)return Math.round(t/o)+"d";if(t>=r)return Math.round(t/r)+"h";if(t>=i)return Math.round(t/i)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var i=n(47)("socket.io-parser"),r=n(3),o=n(49),s=n(21),a=n(22);function c(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=c,e.Decoder=h;var u=e.ERROR+'"encode error"';function l(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var r=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===r)return u;n+=r}return i("encoded %j as %s",t,n),n}function h(){this.reconstructor=null}function f(t){this.reconPack=t,this.buffers=[]}function d(t){return{type:e.ERROR,data:"parser error: "+t}}c.prototype.encode=function(t,n){(i("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){o.removeBlobs(t,function(t){var n=o.deconstructPacket(t),i=l(n.packet),r=n.buffers;r.unshift(i),e(r)})}(t,n):n([l(t)])},r(h.prototype),h.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,r={type:Number(t.charAt(0))};if(null==e.types[r.type])return d("unknown packet type "+r.type);if(e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type){for(var o="";"-"!==t.charAt(++n)&&(o+=t.charAt(n),n!=t.length););if(o!=Number(o)||"-"!==t.charAt(n))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===t.charAt(n+1))for(r.nsp="";++n;){var a=t.charAt(n);if(","===a)break;if(r.nsp+=a,n===t.length)break}else r.nsp="/";var c=t.charAt(n+1);if(""!==c&&Number(c)==c){for(r.id="";++n;){var a=t.charAt(n);if(null==a||Number(a)!=a){--n;break}if(r.id+=t.charAt(n),n===t.length)break}r.id=Number(r.id)}if(t.charAt(++n)){var u=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n)),l=!1!==u&&(r.type===e.ERROR||s(u));if(!l)return d("invalid payload");r.data=u}return i("decoded %s as %j",t,r),r}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new f(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},h.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},f.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},f.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var i=n(50),r=n(51),o=n(52);function s(){return c.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return c.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=c.prototype:(null===t&&(t=new c(e)),t.length=e),t}function c(t,e,n){if(!(c.TYPED_ARRAY_SUPPORT||this instanceof c))return new c(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return u(this,t,e,n)}function u(t,e,n,i){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,i){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(i||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===i?new Uint8Array(e):void 0===i?new Uint8Array(e,n):new Uint8Array(e,n,i);c.TYPED_ARRAY_SUPPORT?(t=e).__proto__=c.prototype:t=f(t,e);return t}(t,e,n,i):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!c.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var i=0|p(e,n),r=(t=a(t,i)).write(e,n);r!==i&&(t=t.slice(0,r));return t}(t,e,n):function(t,e){if(c.isBuffer(e)){var n=0|d(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(i=e.length)!=i?a(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=a(t,e<0?0:0|d(e)),!c.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|d(e.length);t=a(t,n);for(var i=0;i<n;i+=1)t[i]=255&e[i];return t}function d(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function p(t,e){if(c.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return H(t).length;default:if(i)return j(t).length;e=(""+e).toLowerCase(),i=!0}}function g(t,e,n){var i=t[e];t[e]=t[n],t[n]=i}function v(t,e,n,i,r){if(0===t.length)return-1;if("string"==typeof n?(i=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=r?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(r)return-1;n=t.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof e&&(e=c.from(e,i)),c.isBuffer(e))return 0===e.length?-1:m(t,e,n,i,r);if("number"==typeof e)return e&=255,c.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,i,r);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,i,r){var o,s=1,a=t.length,c=e.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(t.length<2||e.length<2)return-1;s=2,a/=2,c/=2,n/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(r){var l=-1;for(o=n;o<a;o++)if(u(t,o)===u(e,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===c)return l*s}else-1!==l&&(o-=o-l),l=-1}else for(n+c>a&&(n=a-c),o=n;o>=0;o--){for(var h=!0,f=0;f<c;f++)if(u(t,o+f)!==u(e,f)){h=!1;break}if(h)return o}return-1}function w(t,e,n,i){n=Number(n)||0;var r=t.length-n;i?(i=Number(i))>r&&(i=r):i=r;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");i>o/2&&(i=o/2);for(var s=0;s<i;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function y(t,e,n,i){return z(j(e,t.length-n),t,n,i)}function b(t,e,n,i){return z(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,i)}function x(t,e,n,i){return b(t,e,n,i)}function C(t,e,n,i){return z(H(e),t,n,i)}function k(t,e,n,i){return z(function(t,e){for(var n,i,r,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),i=n>>8,r=n%256,o.push(r),o.push(i);return o}(e,t.length-n),t,n,i)}function T(t,e,n){return 0===e&&n===t.length?i.fromByteArray(t):i.fromByteArray(t.slice(e,n))}function A(t,e,n){n=Math.min(t.length,n);for(var i=[],r=e;r<n;){var o,s,a,c,u=t[r],l=null,h=u>239?4:u>223?3:u>191?2:1;if(r+h<=n)switch(h){case 1:u<128&&(l=u);break;case 2:128==(192&(o=t[r+1]))&&(c=(31&u)<<6|63&o)>127&&(l=c);break;case 3:o=t[r+1],s=t[r+2],128==(192&o)&&128==(192&s)&&(c=(15&u)<<12|(63&o)<<6|63&s)>2047&&(c<55296||c>57343)&&(l=c);break;case 4:o=t[r+1],s=t[r+2],a=t[r+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(c=(15&u)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&c<1114112&&(l=c)}null===l?(l=65533,h=1):l>65535&&(l-=65536,i.push(l>>>10&1023|55296),l=56320|1023&l),i.push(l),r+=h}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);var n="",i=0;for(;i<e;)n+=String.fromCharCode.apply(String,t.slice(i,i+=S));return n}(i)}e.Buffer=c,e.SlowBuffer=function(t){+t!=t&&(t=0);return c.alloc(+t)},e.INSPECT_MAX_BYTES=50,c.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),c.poolSize=8192,c._augment=function(t){return t.__proto__=c.prototype,t},c.from=function(t,e,n){return u(null,t,e,n)},c.TYPED_ARRAY_SUPPORT&&(c.prototype.__proto__=Uint8Array.prototype,c.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&c[Symbol.species]===c&&Object.defineProperty(c,Symbol.species,{value:null,configurable:!0})),c.alloc=function(t,e,n){return function(t,e,n,i){return l(e),e<=0?a(t,e):void 0!==n?"string"==typeof i?a(t,e).fill(n,i):a(t,e).fill(n):a(t,e)}(null,t,e,n)},c.allocUnsafe=function(t){return h(null,t)},c.allocUnsafeSlow=function(t){return h(null,t)},c.isBuffer=function(t){return!(null==t||!t._isBuffer)},c.compare=function(t,e){if(!c.isBuffer(t)||!c.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,i=e.length,r=0,o=Math.min(n,i);r<o;++r)if(t[r]!==e[r]){n=t[r],i=e[r];break}return n<i?-1:i<n?1:0},c.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return c.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var i=c.allocUnsafe(e),r=0;for(n=0;n<t.length;++n){var s=t[n];if(!c.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(i,r),r+=s.length}return i},c.byteLength=p,c.prototype._isBuffer=!0,c.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},c.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},c.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},c.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?A(this,0,t):function(t,e,n){var i=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return _(this,e,n);case"utf8":case"utf-8":return A(this,e,n);case"ascii":return L(this,e,n);case"latin1":case"binary":return E(this,e,n);case"base64":return T(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,e,n);default:if(i)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),i=!0}}.apply(this,arguments)},c.prototype.equals=function(t){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===c.compare(this,t)},c.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},c.prototype.compare=function(t,e,n,i,r){if(!c.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===i&&(i=0),void 0===r&&(r=this.length),e<0||n>t.length||i<0||r>this.length)throw new RangeError("out of range index");if(i>=r&&e>=n)return 0;if(i>=r)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(r>>>=0)-(i>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(o,s),u=this.slice(i,r),l=t.slice(e,n),h=0;h<a;++h)if(u[h]!==l[h]){o=u[h],s=l[h];break}return o<s?-1:s<o?1:0},c.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},c.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},c.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},c.prototype.write=function(t,e,n,i){if(void 0===e)i="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)i=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var r=this.length-e;if((void 0===n||n>r)&&(n=r),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var o=!1;;)switch(i){case"hex":return w(this,t,e,n);case"utf8":case"utf-8":return y(this,t,e,n);case"ascii":return b(this,t,e,n);case"latin1":case"binary":return x(this,t,e,n);case"base64":return C(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function L(t,e,n){var i="";n=Math.min(t.length,n);for(var r=e;r<n;++r)i+=String.fromCharCode(127&t[r]);return i}function E(t,e,n){var i="";n=Math.min(t.length,n);for(var r=e;r<n;++r)i+=String.fromCharCode(t[r]);return i}function _(t,e,n){var i=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>i)&&(n=i);for(var r="",o=e;o<n;++o)r+=R(t[o]);return r}function B(t,e,n){for(var i=t.slice(e,n),r="",o=0;o<i.length;o+=2)r+=String.fromCharCode(i[o]+256*i[o+1]);return r}function M(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function I(t,e,n,i,r,o){if(!c.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>r||e<o)throw new RangeError('"value" argument is out of bounds');if(n+i>t.length)throw new RangeError("Index out of range")}function N(t,e,n,i){e<0&&(e=65535+e+1);for(var r=0,o=Math.min(t.length-n,2);r<o;++r)t[n+r]=(e&255<<8*(i?r:1-r))>>>8*(i?r:1-r)}function $(t,e,n,i){e<0&&(e=4294967295+e+1);for(var r=0,o=Math.min(t.length-n,4);r<o;++r)t[n+r]=e>>>8*(i?r:3-r)&255}function P(t,e,n,i,r,o){if(n+i>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function F(t,e,n,i,o){return o||P(t,0,n,4),r.write(t,e,n,i,23,4),n+4}function D(t,e,n,i,o){return o||P(t,0,n,8),r.write(t,e,n,i,52,8),n+8}c.prototype.slice=function(t,e){var n,i=this.length;if((t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(e=void 0===e?i:~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),e<t&&(e=t),c.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=c.prototype;else{var r=e-t;n=new c(r,void 0);for(var o=0;o<r;++o)n[o]=this[o+t]}return n},c.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var i=this[t],r=1,o=0;++o<e&&(r*=256);)i+=this[t+o]*r;return i},c.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var i=this[t+--e],r=1;e>0&&(r*=256);)i+=this[t+--e]*r;return i},c.prototype.readUInt8=function(t,e){return e||M(t,1,this.length),this[t]},c.prototype.readUInt16LE=function(t,e){return e||M(t,2,this.length),this[t]|this[t+1]<<8},c.prototype.readUInt16BE=function(t,e){return e||M(t,2,this.length),this[t]<<8|this[t+1]},c.prototype.readUInt32LE=function(t,e){return e||M(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},c.prototype.readUInt32BE=function(t,e){return e||M(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},c.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var i=this[t],r=1,o=0;++o<e&&(r*=256);)i+=this[t+o]*r;return i>=(r*=128)&&(i-=Math.pow(2,8*e)),i},c.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||M(t,e,this.length);for(var i=e,r=1,o=this[t+--i];i>0&&(r*=256);)o+=this[t+--i]*r;return o>=(r*=128)&&(o-=Math.pow(2,8*e)),o},c.prototype.readInt8=function(t,e){return e||M(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},c.prototype.readInt16LE=function(t,e){e||M(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt16BE=function(t,e){e||M(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},c.prototype.readInt32LE=function(t,e){return e||M(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},c.prototype.readInt32BE=function(t,e){return e||M(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},c.prototype.readFloatLE=function(t,e){return e||M(t,4,this.length),r.read(this,t,!0,23,4)},c.prototype.readFloatBE=function(t,e){return e||M(t,4,this.length),r.read(this,t,!1,23,4)},c.prototype.readDoubleLE=function(t,e){return e||M(t,8,this.length),r.read(this,t,!0,52,8)},c.prototype.readDoubleBE=function(t,e){return e||M(t,8,this.length),r.read(this,t,!1,52,8)},c.prototype.writeUIntLE=function(t,e,n,i){(t=+t,e|=0,n|=0,i)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var r=1,o=0;for(this[e]=255&t;++o<n&&(r*=256);)this[e+o]=t/r&255;return e+n},c.prototype.writeUIntBE=function(t,e,n,i){(t=+t,e|=0,n|=0,i)||I(this,t,e,n,Math.pow(2,8*n)-1,0);var r=n-1,o=1;for(this[e+r]=255&t;--r>=0&&(o*=256);)this[e+r]=t/o&255;return e+n},c.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,255,0),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},c.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):N(this,t,e,!0),e+2},c.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,65535,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):N(this,t,e,!1),e+2},c.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):$(this,t,e,!0),e+4},c.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,4294967295,0),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):$(this,t,e,!1),e+4},c.prototype.writeIntLE=function(t,e,n,i){if(t=+t,e|=0,!i){var r=Math.pow(2,8*n-1);I(this,t,e,n,r-1,-r)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},c.prototype.writeIntBE=function(t,e,n,i){if(t=+t,e|=0,!i){var r=Math.pow(2,8*n-1);I(this,t,e,n,r-1,-r)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},c.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,1,127,-128),c.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},c.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):N(this,t,e,!0),e+2},c.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,2,32767,-32768),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):N(this,t,e,!1),e+2},c.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),c.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):$(this,t,e,!0),e+4},c.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||I(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),c.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):$(this,t,e,!1),e+4},c.prototype.writeFloatLE=function(t,e,n){return F(this,t,e,!0,n)},c.prototype.writeFloatBE=function(t,e,n){return F(this,t,e,!1,n)},c.prototype.writeDoubleLE=function(t,e,n){return D(this,t,e,!0,n)},c.prototype.writeDoubleBE=function(t,e,n){return D(this,t,e,!1,n)},c.prototype.copy=function(t,e,n,i){if(n||(n=0),i||0===i||(i=this.length),e>=t.length&&(e=t.length),e||(e=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-e<i-n&&(i=t.length-e+n);var r,o=i-n;if(this===t&&n<e&&e<i)for(r=o-1;r>=0;--r)t[r+e]=this[r+n];else if(o<1e3||!c.TYPED_ARRAY_SUPPORT)for(r=0;r<o;++r)t[r+e]=this[r+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},c.prototype.fill=function(t,e,n,i){if("string"==typeof t){if("string"==typeof e?(i=e,e=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===t.length){var r=t.charCodeAt(0);r<256&&(t=r)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!c.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=c.isBuffer(t)?t:j(new c(t,i).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var O=/[^+\/0-9A-Za-z-_]/g;function R(t){return t<16?"0"+t.toString(16):t.toString(16)}function j(t,e){var n;e=e||1/0;for(var i=t.length,r=null,o=[],s=0;s<i;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!r){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===i){(e-=3)>-1&&o.push(239,191,189);continue}r=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(e-=3)>-1&&o.push(239,191,189);if(r=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function H(t){return i.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(O,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,n,i){for(var r=0;r<i&&!(r+n>=e.length||r>=t.length);++r)e[r+n]=t[r];return r}}).call(this,n(6))},function(t,e,n){var i=n(55);t.exports=function(t){var e=t.xdomain,n=t.xscheme,r=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||i))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&r)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e,n){var i=n(4),r=n(3);function o(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=o,r(o.prototype),o.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},o.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},o.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},o.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},o.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},o.prototype.onData=function(t){var e=i.decodePacket(t,this.socket.binaryType);this.onPacket(e)},o.prototype.onPacket=function(t){this.emit("packet",t)},o.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,n){var i=n(45),r=n(15),o=n(23),s=n(8)("socket.io-client");t.exports=e=c;var a=e.managers={};function c(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,r=i(t),c=r.source,u=r.id,l=r.path,h=a[u]&&l in a[u].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||h?(s("ignoring socket cache for %s",c),n=o(c,e)):(a[u]||(s("new io instance for %s",c),a[u]=o(c,e)),n=a[u]),r.query&&!e.query&&(e.query=r.query),n.socket(r.path,e)}e.protocol=r.protocol,e.connect=c,e.Manager=n(23),e.Socket=n(29)},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,i=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,r=t.indexOf("["),o=t.indexOf("]");-1!=r&&-1!=o&&(t=t.substring(0,r)+t.substring(r,o).replace(/:/g,";")+t.substring(o,t.length));for(var s=n.exec(t||""),a={},c=14;c--;)a[i[c]]=s[c]||"";return-1!=r&&-1!=o&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||i&&(t instanceof ArrayBuffer||r(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,i="function"==typeof ArrayBuffer,r=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}}).call(this,n(16).Buffer)},function(t,e,n){var i=n(53),r=n(29),o=n(3),s=n(15),a=n(30),c=n(31),u=n(8)("socket.io-client:manager"),l=n(28),h=n(69),f=Object.prototype.hasOwnProperty;function d(t,e){if(!(this instanceof d))return new d(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new h({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=d,d.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},d.prototype.updateSocketIds=function(){for(var t in this.nsps)f.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},d.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},o(d.prototype),d.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},d.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},d.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},d.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},d.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},d.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},d.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},d.prototype.open=d.prototype.connect=function(t,e){if(u("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=i(this.uri,this.opts);var n=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var o=a(n,"open",function(){r.onopen(),t&&t()}),s=a(n,"error",function(e){if(u("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else r.maybeReconnectOnOpen()});if(!1!==this._timeout){var c=this._timeout;u("connect attempt will timeout after %d",c);var l=setTimeout(function(){u("connect attempt timed out after %d",c),o.destroy(),n.close(),n.emit("error","timeout"),r.emitAll("connect_timeout",c)},c);this.subs.push({destroy:function(){clearTimeout(l)}})}return this.subs.push(o),this.subs.push(s),this},d.prototype.onopen=function(){u("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",c(this,"ondata"))),this.subs.push(a(t,"ping",c(this,"onping"))),this.subs.push(a(t,"pong",c(this,"onpong"))),this.subs.push(a(t,"error",c(this,"onerror"))),this.subs.push(a(t,"close",c(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",c(this,"ondecoded")))},d.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},d.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},d.prototype.ondata=function(t){this.decoder.add(t)},d.prototype.ondecoded=function(t){this.emit("packet",t)},d.prototype.onerror=function(t){u("error",t),this.emitAll("error",t)},d.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new r(this,t,e),this.nsps[t]=n;var i=this;n.on("connecting",o),n.on("connect",function(){n.id=i.generateId(t)}),this.autoConnect&&o()}function o(){~l(i.connecting,n)||i.connecting.push(n)}return n},d.prototype.destroy=function(t){var e=l(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},d.prototype.packet=function(t){u("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var i=0;i<n.length;i++)e.engine.write(n[i],t.options);e.encoding=!1,e.processPacketQueue()}))},d.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},d.prototype.cleanup=function(){u("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},d.prototype.close=d.prototype.disconnect=function(){u("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},d.prototype.onclose=function(t){u("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},d.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();u("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(u("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(u("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(u("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},d.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var i=n(17),r=n(56),o=n(65),s=n(66);e.polling=function(t){var e=!1,n=!1,s=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,c=location.port;c||(c=a?443:80),e=t.hostname!==location.hostname||c!==t.port,n=t.secure!==a}if(t.xdomain=e,t.xscheme=n,"open"in new i(t)&&!t.forceJSONP)return new r(t);if(!s)throw new Error("JSONP disabled");return new o(t)},e.websocket=s},function(t,e,n){var i=n(18),r=n(9),o=n(4),s=n(10),a=n(27),c=n(11)("engine.io-client:polling");t.exports=l;var u=null!=new(n(17))({xdomain:!1}).responseType;function l(t){var e=t&&t.forceBase64;u&&!e||(this.supportsBinary=!1),i.call(this,t)}s(l,i),l.prototype.name="polling",l.prototype.doOpen=function(){this.poll()},l.prototype.pause=function(t){var e=this;function n(){c("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var i=0;this.polling&&(c("we are currently polling - waiting to pause"),i++,this.once("pollComplete",function(){c("pre-pause polling complete"),--i||n()})),this.writable||(c("we are currently writing - waiting to pause"),i++,this.once("drain",function(){c("pre-pause writing complete"),--i||n()}))}else n()},l.prototype.poll=function(){c("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},l.prototype.onData=function(t){var e=this;c("polling got data %s",t);o.decodePayload(t,this.socket.binaryType,function(t,n,i){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():c('ignoring poll - transport state "%s"',this.readyState))},l.prototype.doClose=function(){var t=this;function e(){c("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(c("transport open - closing"),e()):(c("transport not open - deferring close"),this.once("open",e))},l.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};o.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=r.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var i=n(58),r=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(i(n)){for(var r=0,a=n.length;r<a;r++)if(t(n[r]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||o&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var c in n)if(Object.prototype.hasOwnProperty.call(n,c)&&t(n[c]))return!0;return!1}}).call(this,n(16).Buffer)},function(t,e,n){"use strict";var i,r="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),o=64,s={},a=0,c=0;function u(t){var e="";do{e=r[t%o]+e,t=Math.floor(t/o)}while(t>0);return e}function l(){var t=u(+new Date);return t!==i?(a=0,i=t):t+"."+u(a++)}for(;c<o;c++)s[r[c]]=c;l.encode=u,l.decode=function(t){var e=0;for(c=0;c<t.length;c++)e=e*o+s[t.charAt(c)];return e},t.exports=l},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var i=0;i<t.length;++i)if(t[i]===e)return i;return-1}},function(t,e,n){var i=n(15),r=n(3),o=n(68),s=n(30),a=n(31),c=n(8)("socket.io-client:socket"),u=n(9),l=n(26);t.exports=d;var h={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=r.prototype.emit;function d(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}r(d.prototype),d.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[s(t,"open",a(this,"onopen")),s(t,"packet",a(this,"onpacket")),s(t,"close",a(this,"onclose"))]}},d.prototype.open=d.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},d.prototype.send=function(){var t=o(arguments);return t.unshift("message"),this.emit.apply(this,t),this},d.prototype.emit=function(t){if(h.hasOwnProperty(t))return f.apply(this,arguments),this;var e=o(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:l(e))?i.BINARY_EVENT:i.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(c("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},d.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},d.prototype.onopen=function(){if(c("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?u.encode(this.query):this.query;c("sending connect packet with query %s",t),this.packet({type:i.CONNECT,query:t})}else this.packet({type:i.CONNECT})},d.prototype.onclose=function(t){c("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},d.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===i.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case i.CONNECT:this.onconnect();break;case i.EVENT:case i.BINARY_EVENT:this.onevent(t);break;case i.ACK:case i.BINARY_ACK:this.onack(t);break;case i.DISCONNECT:this.ondisconnect();break;case i.ERROR:this.emit("error",t.data)}},d.prototype.onevent=function(t){var e=t.data||[];c("emitting event %j",e),null!=t.id&&(c("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?f.apply(this,e):this.receiveBuffer.push(e)},d.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var r=o(arguments);c("sending ack %j",r),e.packet({type:l(r)?i.BINARY_ACK:i.ACK,id:t,data:r})}}},d.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(c("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):c("bad ack %s",t.id)},d.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},d.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)f.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},d.prototype.ondisconnect=function(){c("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},d.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},d.prototype.close=d.prototype.disconnect=function(){return this.connected&&(c("performing disconnect (%s)",this.nsp),this.packet({type:i.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},d.prototype.compress=function(t){return this.flags.compress=t,this},d.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var i=n.call(arguments,2);return function(){return e.apply(t,i.concat(n.call(arguments)))}}},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Scale 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1),n(33)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("scale",function(e,n){var i=t(this),r=e.mode,o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"effect"!==r?0:100),s=t.extend(!0,{from:t.effects.scaledDimensions(i),to:t.effects.scaledDimensions(i,o,e.direction||"both"),origin:e.origin||["middle","center"]},e);e.fade&&(s.from.opacity=1,s.to.opacity=0),t.effects.effect.size.call(this,s,n)})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Size 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("size",function(e,n){var i,r,o,s=t(this),a=["fontSize"],c=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],u=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],l=e.mode,h="effect"!==l,f=e.scale||"both",d=e.origin||["middle","center"],p=s.css("position"),g=s.position(),v=t.effects.scaledDimensions(s),m=e.from||v,w=e.to||t.effects.scaledDimensions(s,0);t.effects.createPlaceholder(s),"show"===l&&(o=m,m=w,w=o),r={from:{y:m.height/v.height,x:m.width/v.width},to:{y:w.height/v.height,x:w.width/v.width}},"box"!==f&&"both"!==f||(r.from.y!==r.to.y&&(m=t.effects.setTransition(s,c,r.from.y,m),w=t.effects.setTransition(s,c,r.to.y,w)),r.from.x!==r.to.x&&(m=t.effects.setTransition(s,u,r.from.x,m),w=t.effects.setTransition(s,u,r.to.x,w))),"content"!==f&&"both"!==f||r.from.y!==r.to.y&&(m=t.effects.setTransition(s,a,r.from.y,m),w=t.effects.setTransition(s,a,r.to.y,w)),d&&(i=t.effects.getBaseline(d,v),m.top=(v.outerHeight-m.outerHeight)*i.y+g.top,m.left=(v.outerWidth-m.outerWidth)*i.x+g.left,w.top=(v.outerHeight-w.outerHeight)*i.y+g.top,w.left=(v.outerWidth-w.outerWidth)*i.x+g.left),s.css(m),"content"!==f&&"both"!==f||(c=c.concat(["marginTop","marginBottom"]).concat(a),u=u.concat(["marginLeft","marginRight"]),s.find("*[width]").each(function(){var n=t(this),i=t.effects.scaledDimensions(n),o={height:i.height*r.from.y,width:i.width*r.from.x,outerHeight:i.outerHeight*r.from.y,outerWidth:i.outerWidth*r.from.x},s={height:i.height*r.to.y,width:i.width*r.to.x,outerHeight:i.height*r.to.y,outerWidth:i.width*r.to.x};r.from.y!==r.to.y&&(o=t.effects.setTransition(n,c,r.from.y,o),s=t.effects.setTransition(n,c,r.to.y,s)),r.from.x!==r.to.x&&(o=t.effects.setTransition(n,u,r.from.x,o),s=t.effects.setTransition(n,u,r.to.x,s)),h&&t.effects.saveStyle(n),n.css(o),n.animate(s,e.duration,e.easing,function(){h&&t.effects.restoreStyle(n)})})),s.animate(w,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){var e=s.offset();0===w.opacity&&s.css("opacity",m.opacity),h||(s.css("position","static"===p?"relative":p).offset(e),t.effects.saveStyle(s)),n()}})})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i=n(87),r=n(5),o={easeIn:"easeInCubic",easeOut:"easeOutCubic",easeInOut:"easeInOutCubic"},s=function t(e,n){if(!(this instanceof t))throw new Error("Constructor was called without new keyword");var i;n=r.extend({duration:800,easing:"linear",from:{},to:{},step:function(){}},n),i=r.isString(e)?document.querySelector(e):e,this.path=i,this._opts=n,this._tweenable=null;var o=this.path.getTotalLength();this.path.style.strokeDasharray=o+" "+o,this.set(0)};s.prototype.value=function(){var t=this._getComputedDashOffset(),e=this.path.getTotalLength();return parseFloat((1-t/e).toFixed(6),10)},s.prototype.set=function(t){this.stop(),this.path.style.strokeDashoffset=this._progressToOffset(t);var e=this._opts.step;if(r.isFunction(e)){var n=this._easing(this._opts.easing);e(this._calculateTo(t,n),this._opts.shape||this,this._opts.attachment)}},s.prototype.stop=function(){this._stopTween(),this.path.style.strokeDashoffset=this._getComputedDashOffset()},s.prototype.animate=function(t,e,n){e=e||{},r.isFunction(e)&&(n=e,e={});var o=r.extend({},e),s=r.extend({},this._opts);e=r.extend(s,e);var a=this._easing(e.easing),c=this._resolveFromAndTo(t,a,o);this.stop(),this.path.getBoundingClientRect();var u=this._getComputedDashOffset(),l=this._progressToOffset(t),h=this;this._tweenable=new i,this._tweenable.tween({from:r.extend({offset:u},c.from),to:r.extend({offset:l},c.to),duration:e.duration,easing:a,step:function(t){h.path.style.strokeDashoffset=t.offset;var n=e.shape||h;e.step(t,n,e.attachment)},finish:function(t){r.isFunction(n)&&n()}})},s.prototype._getComputedDashOffset=function(){var t=window.getComputedStyle(this.path,null);return parseFloat(t.getPropertyValue("stroke-dashoffset"),10)},s.prototype._progressToOffset=function(t){var e=this.path.getTotalLength();return e-t*e},s.prototype._resolveFromAndTo=function(t,e,n){return n.from&&n.to?{from:n.from,to:n.to}:{from:this._calculateFrom(e),to:this._calculateTo(t,e)}},s.prototype._calculateFrom=function(t){return i.interpolate(this._opts.from,this._opts.to,this.value(),t)},s.prototype._calculateTo=function(t,e){return i.interpolate(this._opts.from,this._opts.to,t,e)},s.prototype._stopTween=function(){null!==this._tweenable&&(this._tweenable.stop(),this._tweenable=null)},s.prototype._easing=function(t){return o.hasOwnProperty(t)?o[t]:t},t.exports=s},function(t,e,n){var i=n(13),r=n(5),o=function(t,e){this._pathTemplate="M 50,50 m 0,-{radius} a {radius},{radius} 0 1 1 0,{2radius} a {radius},{radius} 0 1 1 0,-{2radius}",this.containerAspectRatio=1,i.apply(this,arguments)};(o.prototype=new i).constructor=o,o.prototype._pathString=function(t){var e=t.strokeWidth;t.trailWidth&&t.trailWidth>t.strokeWidth&&(e=t.trailWidth);var n=50-e/2;return r.render(this._pathTemplate,{radius:n,"2radius":2*n})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},function(t,e,n){(function(e){/*! UIkit 3.1.4 | http://www.getuikit.com | (c) 2014 - 2018 YOOtheme | MIT License */
t.exports=function(){"use strict";function t(t,e){return function(n){var i=arguments.length;return i?1<i?t.apply(e,arguments):t.call(e,n):t.call(e)}}var n=Object.prototype,i=n.hasOwnProperty;function r(t,e){return i.call(t,e)}var o={},s=/([a-z\d])([A-Z])/g;function a(t){return t in o||(o[t]=t.replace(s,"$1-$2").toLowerCase()),o[t]}var c=/-(\w)/g;function u(t){return t.replace(c,l)}function l(t,e){return e?e.toUpperCase():""}function h(t){return t.length?l(0,t.charAt(0))+t.slice(1):""}var f=String.prototype,d=f.startsWith||function(t){return 0===this.lastIndexOf(t,0)};function p(t,e){return d.call(t,e)}var g=f.endsWith||function(t){return this.substr(-t.length)===t};function v(t,e){return g.call(t,e)}var m=Array.prototype,w=function(t,e){return~this.indexOf(t,e)},y=f.includes||w,b=m.includes||w;function x(t,e){return t&&(P(t)?y:b).call(t,e)}var C=m.findIndex||function(t){for(var e=arguments,n=0;n<this.length;n++)if(t.call(e[1],this[n],n,this))return n;return-1};function k(t,e){return C.call(t,e)}var T=Array.isArray;function A(t){return"function"==typeof t}function S(t){return null!==t&&"object"==typeof t}function L(t){return S(t)&&Object.getPrototypeOf(t)===n}function E(t){return S(t)&&t===t.window}function _(t){return S(t)&&9===t.nodeType}function B(t){return S(t)&&!!t.jquery}function M(t){return t instanceof Node||S(t)&&1<=t.nodeType}var I=n.toString;function N(t){return I.call(t).match(/^\[object (NodeList|HTMLCollection)\]$/)}function $(t){return"boolean"==typeof t}function P(t){return"string"==typeof t}function F(t){return"number"==typeof t}function D(t){return F(t)||P(t)&&!isNaN(t-parseFloat(t))}function O(t){return!(T(t)?t.length:S(t)&&Object.keys(t).length)}function R(t){return void 0===t}function j(t){return $(t)?t:"true"===t||"1"===t||""===t||"false"!==t&&"0"!==t&&t}function H(t){var e=Number(t);return!isNaN(e)&&e}function z(t){return parseFloat(t)||0}function q(t){return M(t)||E(t)||_(t)?t:N(t)||B(t)?t[0]:T(t)?q(t[0]):null}function W(t){return M(t)?[t]:N(t)?m.slice.call(t):T(t)?t.map(q).filter(Boolean):B(t)?t.toArray():[]}function U(t){return T(t)?t:P(t)?t.split(/,(?![^(]*\))/).map(function(t){return D(t)?H(t):j(t.trim())}):[t]}function V(t){return t?v(t,"ms")?z(t):1e3*z(t):0}function Y(t,e){return t===e||S(t)&&S(e)&&Object.keys(t).length===Object.keys(e).length&&J(t,function(t,n){return t===e[n]})}function Z(t,e,n){return t.replace(new RegExp(e+"|"+n,"mg"),function(t){return t===e?n:e})}var X=Object.assign||function(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];t=Object(t);for(var i=0;i<e.length;i++){var o=e[i];if(null!==o)for(var s in o)r(o,s)&&(t[s]=o[s])}return t};function J(t,e){for(var n in t)if(!1===e(t[n],n))return!1;return!0}function G(t,e){return t.sort(function(t,n){var i=t[e];void 0===i&&(i=0);var r=n[e];return void 0===r&&(r=0),r<i?1:i<r?-1:0})}function K(t,e){var n=new Set;return t.filter(function(t){var i=t[e];return!n.has(i)&&(n.add(i)||!0)})}function Q(t,e,n){return void 0===e&&(e=0),void 0===n&&(n=1),Math.min(Math.max(H(t)||0,e),n)}function tt(){}function et(t,e){return t.left<e.right&&t.right>e.left&&t.top<e.bottom&&t.bottom>e.top}function nt(t,e){return t.x<=e.right&&t.x>=e.left&&t.y<=e.bottom&&t.y>=e.top}var it={ratio:function(t,e,n){var i,r="width"===e?"height":"width";return(i={})[r]=t[e]?Math.round(n*t[r]/t[e]):t[r],i[e]=n,i},contain:function(t,e){var n=this;return J(t=X({},t),function(i,r){return t=t[r]>e[r]?n.ratio(t,r,e[r]):t}),t},cover:function(t,e){var n=this;return J(t=this.contain(t,e),function(i,r){return t=t[r]<e[r]?n.ratio(t,r,e[r]):t}),t}};function rt(t,e,n){if(S(e))for(var i in e)rt(t,i,e[i]);else{if(R(n))return(t=q(t))&&t.getAttribute(e);W(t).forEach(function(t){A(n)&&(n=n.call(t,rt(t,e))),null===n?st(t,e):t.setAttribute(e,n)})}}function ot(t,e){return W(t).some(function(t){return t.hasAttribute(e)})}function st(t,e){t=W(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.hasAttribute(e)&&t.removeAttribute(e)})})}function at(t,e){for(var n=0,i=[e,"data-"+e];n<i.length;n++)if(ot(t,i[n]))return rt(t,i[n])}function ct(t,e){return q(t)||ht(t,lt(t,e))}function ut(t,e){var n=W(t);return n.length&&n||ft(t,lt(t,e))}function lt(t,e){return void 0===e&&(e=document),vt(t)||_(e)?e:e.ownerDocument}function ht(t,e){return q(dt(t,e,"querySelector"))}function ft(t,e){return W(dt(t,e,"querySelectorAll"))}function dt(t,e,n){if(void 0===e&&(e=document),!t||!P(t))return null;var i;vt(t=t.replace(gt,"$1 *"))&&(i=[],t=function(t){return t.match(mt).map(function(t){return t.replace(/,$/,"").trim()})}(t).map(function(t,n){var r=e;if("!"===t[0]){var o=t.substr(1).trim().split(" ");r=Ct(e.parentNode,o[0]),t=o.slice(1).join(" ").trim()}if("-"===t[0]){var s=t.substr(1).trim().split(" "),a=(r||e).previousElementSibling;r=bt(a,t.substr(1))?a:null,t=s.slice(1).join(" ")}return r?(r.id||(r.id="uk-"+Date.now()+n,i.push(function(){return st(r,"id")})),"#"+At(r.id)+" "+t):null}).filter(Boolean).join(","),e=document);try{return e[n](t)}catch(t){return null}finally{i&&i.forEach(function(t){return t()})}}var pt=/(^|[^\\],)\s*[!>+~-]/,gt=/([!>+~-])(?=\s+[!>+~-]|\s*$)/g;function vt(t){return P(t)&&t.match(pt)}var mt=/.*?[^\\](?:,|$)/g,wt=Element.prototype,yt=wt.matches||wt.webkitMatchesSelector||wt.msMatchesSelector;function bt(t,e){return W(t).some(function(t){return yt.call(t,e)})}var xt=wt.closest||function(t){var e=this;do{if(bt(e,t))return e;e=e.parentNode}while(e&&1===e.nodeType)};function Ct(t,e){return p(e,">")&&(e=e.slice(1)),M(t)?t.parentNode&&xt.call(t,e):W(t).map(function(t){return Ct(t,e)}).filter(Boolean)}function kt(t,e){for(var n=[],i=q(t).parentNode;i&&1===i.nodeType;)bt(i,e)&&n.push(i),i=i.parentNode;return n}var Tt=window.CSS&&CSS.escape||function(t){return t.replace(/([^\x7f-\uFFFF\w-])/g,function(t){return"\\"+t})};function At(t){return P(t)?Tt.call(null,t):""}var St={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0};function Lt(t){return W(t).some(function(t){return St[t.tagName.toLowerCase()]})}function Et(t){return W(t).some(function(t){return t.offsetWidth||t.offsetHeight||t.getClientRects().length})}var _t="input,select,textarea,button";function Bt(t){return W(t).some(function(t){return bt(t,_t)})}function Mt(t,e){return W(t).filter(function(t){return bt(t,e)})}function It(t,e){return P(e)?bt(t,e)||Ct(t,e):t===e||(_(e)?e.documentElement:q(e)).contains(q(t))}function Nt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Ot(t),i=n[0],r=n[1],o=n[2],s=n[3],a=n[4];return i=Ht(i),o&&(s=function(t,e,n){var i=this;return function(r){t.forEach(function(t){var o=">"===e[0]?ft(e,t).reverse().filter(function(t){return It(r.target,t)})[0]:Ct(r.target,e);o&&(r.delegate=t,r.current=o,n.call(i,r))})}}(i,o,s)),1<s.length&&(s=function(t){return function(e){return T(e.detail)?t.apply(void 0,[e].concat(e.detail)):t(e)}}(s)),r.split(" ").forEach(function(t){return i.forEach(function(e){return e.addEventListener(t,s,a)})}),function(){return $t(i,r,s,a)}}function $t(t,e,n,i){void 0===i&&(i=!1),t=Ht(t),e.split(" ").forEach(function(e){return t.forEach(function(t){return t.removeEventListener(e,n,i)})})}function Pt(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];var n=Ot(t),i=n[0],r=n[1],o=n[2],s=n[3],a=n[4],c=n[5],u=Nt(i,r,o,function(t){var e=!c||c(t);e&&(u(),s(t,e))},a);return u}function Ft(t,e,n){return Ht(t).reduce(function(t,i){return t&&i.dispatchEvent(Dt(e,!0,!0,n))},!0)}function Dt(t,e,n,i){if(void 0===e&&(e=!0),void 0===n&&(n=!1),P(t)){var r=document.createEvent("CustomEvent");r.initCustomEvent(t,e,n,i),t=r}return t}function Ot(t){return A(t[2])&&t.splice(2,0,!1),t}function Rt(t){return t&&"addEventListener"in t}function jt(t){return Rt(t)?t:q(t)}function Ht(t){return T(t)?t.map(jt).filter(Boolean):P(t)?ft(t):Rt(t)?[t]:W(t)}function zt(t){return"touch"===t.pointerType||t.touches}function qt(t,e){void 0===e&&(e="client");var n=t.touches,i=t.changedTouches,r=n&&n[0]||i&&i[0]||t;return{x:r[e+"X"],y:r[e+"Y"]}}var Wt="Promise"in window?window.Promise:Zt,Ut=function(){var t=this;this.promise=new Wt(function(e,n){t.reject=n,t.resolve=e})},Vt=2,Yt="setImmediate"in window?e:setTimeout;function Zt(t){this.state=Vt,this.value=void 0,this.deferred=[];var e=this;try{t(function(t){e.resolve(t)},function(t){e.reject(t)})}catch(t){e.reject(t)}}Zt.reject=function(t){return new Zt(function(e,n){n(t)})},Zt.resolve=function(t){return new Zt(function(e,n){e(t)})},Zt.all=function(t){return new Zt(function(e,n){var i=[],r=0;function o(n){return function(o){i[n]=o,(r+=1)===t.length&&e(i)}}0===t.length&&e(i);for(var s=0;s<t.length;s+=1)Zt.resolve(t[s]).then(o(s),n)})},Zt.race=function(t){return new Zt(function(e,n){for(var i=0;i<t.length;i+=1)Zt.resolve(t[i]).then(e,n)})};var Xt=Zt.prototype;function Jt(t,e){return new Wt(function(n,i){var r=X({data:null,method:"GET",headers:{},xhr:new XMLHttpRequest,beforeSend:tt,responseType:""},e);r.beforeSend(r);var o=r.xhr;for(var s in r)if(s in o)try{o[s]=r[s]}catch(n){}for(var a in o.open(r.method.toUpperCase(),t),r.headers)o.setRequestHeader(a,r.headers[a]);Nt(o,"load",function(){0===o.status||200<=o.status&&o.status<300||304===o.status?n(o):i(X(Error(o.statusText),{xhr:o,status:o.status}))}),Nt(o,"error",function(){return i(X(Error("Network Error"),{xhr:o}))}),Nt(o,"timeout",function(){return i(X(Error("Network Timeout"),{xhr:o}))}),o.send(r.data)})}function Gt(t,e,n){return new Wt(function(i,r){var o=new Image;o.onerror=r,o.onload=function(){return i(o)},n&&(o.sizes=n),e&&(o.srcset=e),o.src=t})}Xt.resolve=function(t){var e=this;if(e.state===Vt){if(t===e)throw new TypeError("Promise settled with itself.");var n=!1;try{var i=t&&t.then;if(null!==t&&S(t)&&A(i))return void i.call(t,function(t){n||e.resolve(t),n=!0},function(t){n||e.reject(t),n=!0})}catch(t){return void(n||e.reject(t))}e.state=0,e.value=t,e.notify()}},Xt.reject=function(t){var e=this;if(e.state===Vt){if(t===e)throw new TypeError("Promise settled with itself.");e.state=1,e.value=t,e.notify()}},Xt.notify=function(){var t=this;Yt(function(){if(t.state!==Vt)for(;t.deferred.length;){var e=t.deferred.shift(),n=e[0],i=e[1],r=e[2],o=e[3];try{0===t.state?A(n)?r(n.call(void 0,t.value)):r(t.value):1===t.state&&(A(i)?r(i.call(void 0,t.value)):o(t.value))}catch(e){o(e)}}})},Xt.then=function(t,e){var n=this;return new Zt(function(i,r){n.deferred.push([t,e,i,r]),n.notify()})},Xt.catch=function(t){return this.then(void 0,t)};var Kt=/msie|trident/i.test(window.navigator.userAgent),Qt="rtl"===rt(document.documentElement,"dir"),te="ontouchstart"in window,ee=window.PointerEvent,ne=te||window.DocumentTouch&&document instanceof DocumentTouch||navigator.maxTouchPoints,ie=ee?"pointerdown":te?"touchstart":"mousedown",re=ee?"pointermove":te?"touchmove":"mousemove",oe=ee?"pointerup":te?"touchend":"mouseup",se=ee?"pointerenter":te?"":"mouseenter",ae=ee?"pointerleave":te?"":"mouseleave",ce=ee?"pointercancel":"touchcancel";function ue(t){if("loading"===document.readyState)var e=Nt(document,"DOMContentLoaded",function(){e(),t()});else t()}function le(t,e){return e?W(t).indexOf(q(e)):W((t=q(t))&&t.parentNode.children).indexOf(t)}function he(t,e,n,i){void 0===n&&(n=0),void 0===i&&(i=!1);var r=(e=W(e)).length;return t=D(t)?H(t):"next"===t?n+1:"previous"===t?n-1:le(e,t),i?Q(t,0,r-1):(t%=r)<0?t+r:t}function fe(t){return(t=Se(t)).innerHTML="",t}function de(t,e){return t=Se(t),R(e)?t.innerHTML:pe(t.hasChildNodes()?fe(t):t,e)}function pe(t,e){return t=Se(t),me(e,function(e){return t.appendChild(e)})}function ge(t,e){return t=Se(t),me(e,function(e){return t.parentNode.insertBefore(e,t)})}function ve(t,e){return t=Se(t),me(e,function(e){return t.nextSibling?ge(t.nextSibling,e):pe(t.parentNode,e)})}function me(t,e){return(t=P(t)?Te(t):t)?"length"in t?W(t).map(e):e(t):null}function we(t){W(t).map(function(t){return t.parentNode&&t.parentNode.removeChild(t)})}function ye(t,e){for(e=q(ge(t,e));e.firstChild;)e=e.firstChild;return pe(e,t),e}function be(t,e){return W(W(t).map(function(t){return t.hasChildNodes?ye(W(t.childNodes),e):pe(t,e)}))}function xe(t){W(t).map(function(t){return t.parentNode}).filter(function(t,e,n){return n.indexOf(t)===e}).forEach(function(t){ge(t,t.childNodes),we(t)})}var Ce=/^\s*<(\w+|!)[^>]*>/,ke=/^<(\w+)\s*\/?>(?:<\/\1>)?$/;function Te(t){var e=ke.exec(t);if(e)return document.createElement(e[1]);var n=document.createElement("div");return Ce.test(t)?n.insertAdjacentHTML("beforeend",t.trim()):n.textContent=t,1<n.childNodes.length?W(n.childNodes):n.firstChild}function Ae(t,e){if(t&&1===t.nodeType)for(e(t),t=t.firstElementChild;t;)Ae(t,e),t=t.nextElementSibling}function Se(t,e){return P(t)?Ee(t)?q(Te(t)):ht(t,e):q(t)}function Le(t,e){return P(t)?Ee(t)?W(Te(t)):ft(t,e):W(t)}function Ee(t){return"<"===t[0]||t.match(/^\s*</)}function _e(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];Pe(t,e,"add")}function Be(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];Pe(t,e,"remove")}function Me(t,e){rt(t,"class",function(t){return(t||"").replace(new RegExp("\\b"+e+"\\b","g"),"")})}function Ie(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];e[0]&&Be(t,e[0]),e[1]&&_e(t,e[1])}function Ne(t,e){return e&&W(t).some(function(t){return t.classList.contains(e.split(" ")[0])})}function $e(t){for(var e=[],n=arguments.length-1;0<n--;)e[n]=arguments[n+1];if(e.length){var i=P((e=Fe(e))[e.length-1])?[]:e.pop();e=e.filter(Boolean),W(t).forEach(function(t){for(var n=t.classList,r=0;r<e.length;r++)De.Force?n.toggle.apply(n,[e[r]].concat(i)):n[(R(i)?!n.contains(e[r]):i)?"add":"remove"](e[r])})}}function Pe(t,e,n){(e=Fe(e).filter(Boolean)).length&&W(t).forEach(function(t){var i=t.classList;De.Multiple?i[n].apply(i,e):e.forEach(function(t){return i[n](t)})})}function Fe(t){return t.reduce(function(t,e){return t.concat.call(t,P(e)&&x(e," ")?e.trim().split(" "):e)},[])}var De={get Multiple(){return this.get("_multiple")},get Force(){return this.get("_force")},get:function(t){if(!r(this,t)){var e=document.createElement("_").classList;e.add("a","b"),e.toggle("c",!1),this._multiple=e.contains("b"),this._force=!e.contains("c")}return this[t]}},Oe={"animation-iteration-count":!0,"column-count":!0,"fill-opacity":!0,"flex-grow":!0,"flex-shrink":!0,"font-weight":!0,"line-height":!0,opacity:!0,order:!0,orphans:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,widows:!0,"z-index":!0,zoom:!0};function Re(t,e,n){return W(t).map(function(t){if(P(e)){if(e=Ue(e),R(n))return He(t,e);n||F(n)?t.style[e]=D(n)&&!Oe[e]?n+"px":n:t.style.removeProperty(e)}else{if(T(e)){var i=je(t);return e.reduce(function(t,e){return t[e]=i[Ue(e)],t},{})}S(e)&&J(e,function(e,n){return Re(t,n,e)})}return t})[0]}function je(t,e){return(t=q(t)).ownerDocument.defaultView.getComputedStyle(t,e)}function He(t,e,n){return je(t,n)[e]}var ze={};function qe(t){var e=document.documentElement;if(!Kt)return je(e).getPropertyValue("--uk-"+t);if(!(t in ze)){var n=pe(e,document.createElement("div"));_e(n,"uk-"+t),ze[t]=He(n,"content",":before").replace(/^["'](.*)["']$/,"$1"),we(n)}return ze[t]}var We={};function Ue(t){var e=We[t];return e||(e=We[t]=function(t){t=a(t);var e=document.documentElement.style;if(t in e)return t;for(var n,i=Ve.length;i--;)if((n="-"+Ve[i]+"-"+t)in e)return n}(t)||t),e}var Ve=["webkit","moz","ms"];function Ye(t,e,n,i){return void 0===n&&(n=400),void 0===i&&(i="linear"),Wt.all(W(t).map(function(t){return new Wt(function(r,o){for(var s in e){var a=Re(t,s);""===a&&Re(t,s,a)}var c=setTimeout(function(){return Ft(t,"transitionend")},n);Pt(t,"transitionend transitioncanceled",function(e){var n=e.type;clearTimeout(c),Be(t,"uk-transition"),Re(t,{"transition-property":"","transition-duration":"","transition-timing-function":""}),"transitioncanceled"===n?o():r()},!1,function(e){var n=e.target;return t===n}),_e(t,"uk-transition"),Re(t,X({"transition-property":Object.keys(e).map(Ue).join(","),"transition-duration":n+"ms","transition-timing-function":i},e))})}))}var Ze={start:Ye,stop:function(t){return Ft(t,"transitionend"),Wt.resolve()},cancel:function(t){Ft(t,"transitioncanceled")},inProgress:function(t){return Ne(t,"uk-transition")}},Xe="uk-animation-",Je="uk-cancel-animation";function Ge(t,e,n,i,r){var o=arguments;return void 0===n&&(n=200),Wt.all(W(t).map(function(t){return new Wt(function(s,a){if(Ne(t,Je))requestAnimationFrame(function(){return Wt.resolve().then(function(){return Ge.apply(void 0,o).then(s,a)})});else{var c=e+" "+Xe+(r?"leave":"enter");p(e,Xe)&&(i&&(c+=" uk-transform-origin-"+i),r&&(c+=" "+Xe+"reverse")),u(),Pt(t,"animationend animationcancel",function(e){var n=e.type,i=!1;"animationcancel"===n?(a(),u()):(s(),Wt.resolve().then(function(){i=!0,u()})),requestAnimationFrame(function(){i||(_e(t,Je),requestAnimationFrame(function(){return Be(t,Je)}))})},!1,function(e){var n=e.target;return t===n}),Re(t,"animationDuration",n+"ms"),_e(t,c)}function u(){Re(t,"animationDuration",""),Me(t,Xe+"\\S*")}})}))}var Ke=new RegExp(Xe+"(enter|leave)"),Qe={in:function(t,e,n,i){return Ge(t,e,n,i,!1)},out:function(t,e,n,i){return Ge(t,e,n,i,!0)},inProgress:function(t){return Ke.test(rt(t,"class"))},cancel:function(t){Ft(t,"animationcancel")}},tn={width:["x","left","right"],height:["y","top","bottom"]};function en(t,e,n,i,r,o,s,a){n=hn(n),i=hn(i);var c={element:n,target:i};if(!t||!e)return c;var u=rn(t),l=rn(e),h=l;if(ln(h,n,u,-1),ln(h,i,l,1),r=fn(r,u.width,u.height),o=fn(o,l.width,l.height),r.x+=o.x,r.y+=o.y,h.left+=r.x,h.top+=r.y,s){var f=[rn(bn(t))];a&&f.unshift(rn(a)),J(tn,function(t,e){var o=t[0],a=t[1],d=t[2];(!0===s||x(s,o))&&f.some(function(t){var s=n[o]===a?-u[e]:n[o]===d?u[e]:0,f=i[o]===a?l[e]:i[o]===d?-l[e]:0;if(h[a]<t[a]||h[a]+u[e]>t[d]){var p=u[e]/2,g="center"===i[o]?-l[e]/2:0;return"center"===n[o]&&(v(p,g)||v(-p,-g))||v(s,f)}function v(n,i){var s=h[a]+n+i-2*r[o];if(s>=t[a]&&s+u[e]<=t[d])return h[a]=s,["element","target"].forEach(function(t){c[t][o]=n?c[t][o]===tn[e][1]?tn[e][2]:tn[e][1]:c[t][o]}),!0}})})}return nn(t,h),c}function nn(t,e){if(t=q(t),!e)return rn(t);var n=nn(t),i=Re(t,"position");["left","top"].forEach(function(r){if(r in e){var o=Re(t,r);Re(t,r,e[r]-n[r]+z("absolute"===i&&"auto"===o?on(t)[r]:o))}})}function rn(t){var e,n,i=bn(t=q(t)),r=i.pageYOffset,o=i.pageXOffset;if(E(t)){var s=t.innerHeight,a=t.innerWidth;return{top:r,left:o,height:s,width:a,bottom:r+s,right:o+a}}Et(t)||"none"!==Re(t,"display")||(e=rt(t,"style"),n=rt(t,"hidden"),rt(t,{style:(e||"")+";display:block !important;",hidden:null}));var c=t.getBoundingClientRect();return R(e)||rt(t,{style:e,hidden:n}),{height:c.height,width:c.width,top:c.top+r,left:c.left+o,bottom:c.bottom+r,right:c.right+o}}function on(t){var e=(t=q(t)).offsetParent||function(t){return xn(t).documentElement}(t),n=nn(e),i=["top","left"].reduce(function(i,r){var o=h(r);return i[r]-=n[r]+z(Re(t,"margin"+o))+z(Re(e,"border"+o+"Width")),i},nn(t));return{top:i.top,left:i.left}}var sn=cn("height"),an=cn("width");function cn(t){var e=h(t);return function(n,i){if(n=q(n),R(i)){if(E(n))return n["inner"+e];if(_(n)){var r=n.documentElement;return Math.max(r["offset"+e],r["scroll"+e])}return(i="auto"===(i=Re(n,t))?n["offset"+e]:z(i)||0)-un(t,n)}Re(n,t,i||0===i?+i+un(t,n)+"px":"")}}function un(t,e,n){return void 0===n&&(n="border-box"),Re(e,"boxSizing")===n?tn[t].slice(1).map(h).reduce(function(t,n){return t+z(Re(e,"padding"+n))+z(Re(e,"border"+n+"Width"))},0):0}function ln(t,e,n,i){J(tn,function(r,o){var s=r[0],a=r[1],c=r[2];e[s]===c?t[a]+=n[o]*i:"center"===e[s]&&(t[a]+=n[o]*i/2)})}function hn(t){var e=/left|center|right/,n=/top|center|bottom/;return 1===(t=(t||"").split(" ")).length&&(t=e.test(t[0])?t.concat(["center"]):n.test(t[0])?["center"].concat(t):["center","center"]),{x:e.test(t[0])?t[0]:"center",y:n.test(t[1])?t[1]:"center"}}function fn(t,e,n){var i=(t||"").split(" "),r=i[0],o=i[1];return{x:r?z(r)*(v(r,"%")?e/100:1):0,y:o?z(o)*(v(o,"%")?n/100:1):0}}function dn(t){switch(t){case"left":return"right";case"right":return"left";case"top":return"bottom";case"bottom":return"top";default:return t}}function pn(t,e,n){if(void 0===e&&(e=0),void 0===n&&(n=0),!Et(t))return!1;var i=bn(t=q(t)),r=t.getBoundingClientRect(),o={top:-e,left:-n,bottom:e+sn(i),right:n+an(i)};return et(r,o)||nt({x:r.left,y:r.top},o)}function gn(t,e){if(void 0===e&&(e=0),!Et(t))return 0;var n=bn(t=q(t)),i=xn(t),r=t.offsetHeight+e,o=mn(t)[0],s=sn(n),a=s+Math.min(0,o-s),c=Math.max(0,s-(sn(i)+e-(o+r)));return Q((a+n.pageYOffset-o)/((a+(r-(c<s?c:0)))/100)/100)}function vn(t,e){if(E(t=q(t))||_(t)){var n=bn(t);(0,n.scrollTo)(n.pageXOffset,e)}else t.scrollTop=e}function mn(t){var e=[0,0];do{if(e[0]+=t.offsetTop,e[1]+=t.offsetLeft,"fixed"===Re(t,"position")){var n=bn(t);return e[0]+=n.pageYOffset,e[1]+=n.pageXOffset,e}}while(t=t.offsetParent);return e}function wn(t,e,n){return void 0===e&&(e="width"),void 0===n&&(n=window),D(t)?+t:v(t,"vh")?yn(sn(bn(n)),t):v(t,"vw")?yn(an(bn(n)),t):v(t,"%")?yn(rn(n)[e],t):z(t)}function yn(t,e){return t*z(e)/100}function bn(t){return E(t)?t:xn(t).defaultView}function xn(t){return q(t).ownerDocument}var Cn={reads:[],writes:[],read:function(t){return this.reads.push(t),kn(),t},write:function(t){return this.writes.push(t),kn(),t},clear:function(t){return An(this.reads,t)||An(this.writes,t)},flush:function(){Tn(this.reads),Tn(this.writes.splice(0,this.writes.length)),this.scheduled=!1,(this.reads.length||this.writes.length)&&kn()}};function kn(){Cn.scheduled||(Cn.scheduled=!0,requestAnimationFrame(Cn.flush.bind(Cn)))}function Tn(t){for(var e;e=t.shift();)e()}function An(t,e){var n=t.indexOf(e);return!!~n&&!!t.splice(n,1)}function Sn(){}function Ln(t,e){return(e.y-t.y)/(e.x-t.x)}Sn.prototype={positions:[],position:null,init:function(){var t=this;this.positions=[],this.position=null;var e=!1;this.unbind=Nt(document,"mousemove",function(n){e||(setTimeout(function(){var i=Date.now(),r=t.positions.length;r&&100<i-t.positions[r-1].time&&t.positions.splice(0,r),t.positions.push({time:i,x:n.pageX,y:n.pageY}),5<t.positions.length&&t.positions.shift(),e=!1},5),e=!0)})},cancel:function(){this.unbind&&this.unbind()},movesTo:function(t){if(this.positions.length<2)return!1;var e=nn(t),n=this.positions[this.positions.length-1],i=this.positions[0];if(e.left<=n.x&&n.x<=e.right&&e.top<=n.y&&n.y<=e.bottom)return!1;var r=[[{x:e.left,y:e.top},{x:e.right,y:e.bottom}],[{x:e.right,y:e.top},{x:e.left,y:e.bottom}]];return e.right<=n.x||(e.left>=n.x?(r[0].reverse(),r[1].reverse()):e.bottom<=n.y?r[0].reverse():e.top>=n.y&&r[1].reverse()),!!r.reduce(function(t,e){return t+(Ln(i,e[0])<Ln(n,e[0])&&Ln(i,e[1])>Ln(n,e[1]))},0)}};var En={};function _n(t,e,n){return En.computed(A(t)?t.call(n,n):t,A(e)?e.call(n,n):e)}function Bn(t,e){return t=t&&!T(t)?[t]:t,e?t?t.concat(e):T(e)?e:[e]:t}function Mn(t,e,n){var i={};if(A(e)&&(e=e.options),e.extends&&(t=Mn(t,e.extends,n)),e.mixins)for(var o=0,s=e.mixins.length;o<s;o++)t=Mn(t,e.mixins[o],n);for(var a in t)u(a);for(var c in e)r(t,c)||u(c);function u(r){i[r]=(En[r]||function(t,e){return R(e)?t:e})(t[r],e[r],n)}return i}function In(t,e){var n;void 0===e&&(e=[]);try{return t?p(t,"{")?JSON.parse(t):e.length&&!x(t,":")?((n={})[e[0]]=t,n):t.split(";").reduce(function(t,e){var n=e.split(/:(.*)/),i=n[0],r=n[1];return i&&!R(r)&&(t[i.trim()]=r.trim()),t},{}):{}}catch(t){return{}}}En.events=En.created=En.beforeConnect=En.connected=En.beforeDisconnect=En.disconnected=En.destroy=Bn,En.args=function(t,e){return Bn(e||t)},En.update=function(t,e){return G(Bn(t,A(e)?{read:e}:e),"order")},En.props=function(t,e){return T(e)&&(e=e.reduce(function(t,e){return t[e]=String,t},{})),En.methods(t,e)},En.computed=En.methods=function(t,e){return e?t?X({},t,e):e:t},En.data=function(t,e,n){return n?_n(t,e,n):e?t?function(n){return _n(t,e,n)}:e:t};var Nn=0,$n=function(t){this.id=++Nn,this.el=q(t)};function Pn(t,e){try{t.contentWindow.postMessage(JSON.stringify(X({event:"command"},e)),"*")}catch(t){}}$n.prototype.isVideo=function(){return this.isYoutube()||this.isVimeo()||this.isHTML5()},$n.prototype.isHTML5=function(){return"VIDEO"===this.el.tagName},$n.prototype.isIFrame=function(){return"IFRAME"===this.el.tagName},$n.prototype.isYoutube=function(){return this.isIFrame()&&!!this.el.src.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/(watch\?v=[^&\s]+|embed)|youtu\.be\/.*/)},$n.prototype.isVimeo=function(){return this.isIFrame()&&!!this.el.src.match(/vimeo\.com\/video\/.*/)},$n.prototype.enableApi=function(){var t=this;if(this.ready)return this.ready;var e,n=this.isYoutube(),i=this.isVimeo();return n||i?this.ready=new Wt(function(r){Pt(t.el,"load",function(){if(n){var i=function(){return Pn(t.el,{event:"listening",id:t.id})};e=setInterval(i,100),i()}}),function(t){return new Wt(function(e){Pt(window,"message",function(t,n){return e(n)},!1,function(e){var n=e.data;if(n&&P(n)){try{n=JSON.parse(n)}catch(e){return}return n&&t(n)}})})}(function(e){return n&&e.id===t.id&&"onReady"===e.event||i&&Number(e.player_id)===t.id}).then(function(){r(),e&&clearInterval(e)}),rt(t.el,"src",t.el.src+(x(t.el.src,"?")?"&":"?")+(n?"enablejsapi=1":"api=1&player_id="+t.id))}):Wt.resolve()},$n.prototype.play=function(){var t=this;if(this.isVideo())if(this.isIFrame())this.enableApi().then(function(){return Pn(t.el,{func:"playVideo",method:"play"})});else if(this.isHTML5())try{var e=this.el.play();e&&e.catch(tt)}catch(t){}},$n.prototype.pause=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return Pn(t.el,{func:"pauseVideo",method:"pause"})}):this.isHTML5()&&this.el.pause())},$n.prototype.mute=function(){var t=this;this.isVideo()&&(this.isIFrame()?this.enableApi().then(function(){return Pn(t.el,{func:"mute",method:"setVolume",value:0})}):this.isHTML5()&&(this.el.muted=!0,rt(this.el,"muted","")))};var Fn="IntersectionObserver"in window?window.IntersectionObserver:function(){function t(t,e){var n=this;void 0===e&&(e={});var i=e.rootMargin;void 0===i&&(i="0 0"),this.targets=[];var r,o=(i||"0 0").split(" ").map(z),s=o[0],a=o[1];this.offsetTop=s,this.offsetLeft=a,this.apply=function(){r||(r=requestAnimationFrame(function(){return setTimeout(function(){var e=n.takeRecords();e.length&&t(e,n),r=!1})}))},this.off=Nt(window,"scroll resize load",this.apply,{passive:!0,capture:!0})}return t.prototype.takeRecords=function(){var t=this;return this.targets.filter(function(e){var n=pn(e.target,t.offsetTop,t.offsetLeft);if(null===e.isIntersecting||n^e.isIntersecting)return e.isIntersecting=n,!0})},t.prototype.observe=function(t){this.targets.push({target:t,isIntersecting:null}),this.apply()},t.prototype.disconnect=function(){this.targets=[],this.off()},t}();function Dn(t){return!(!p(t,"uk-")&&!p(t,"data-uk-"))&&u(t.replace("data-uk-","").replace("uk-",""))}var On,Rn,jn,Hn,zn=function(t){this._init(t)};zn.util=Object.freeze({ajax:Jt,getImage:Gt,transition:Ye,Transition:Ze,animate:Ge,Animation:Qe,attr:rt,hasAttr:ot,removeAttr:st,data:at,addClass:_e,removeClass:Be,removeClasses:Me,replaceClass:Ie,hasClass:Ne,toggleClass:$e,positionAt:en,offset:nn,position:on,height:sn,width:an,boxModelAdjust:un,flipPosition:dn,isInView:pn,scrolledOver:gn,scrollTop:vn,offsetPosition:mn,toPx:wn,ready:ue,index:le,getIndex:he,empty:fe,html:de,prepend:function(t,e){return(t=Se(t)).hasChildNodes()?me(e,function(e){return t.insertBefore(e,t.firstChild)}):pe(t,e)},append:pe,before:ge,after:ve,remove:we,wrapAll:ye,wrapInner:be,unwrap:xe,fragment:Te,apply:Ae,$:Se,$$:Le,isIE:Kt,isRtl:Qt,hasTouch:ne,pointerDown:ie,pointerMove:re,pointerUp:oe,pointerEnter:se,pointerLeave:ae,pointerCancel:ce,on:Nt,off:$t,once:Pt,trigger:Ft,createEvent:Dt,toEventTargets:Ht,isTouch:zt,getEventPos:qt,fastdom:Cn,isVoidElement:Lt,isVisible:Et,selInput:_t,isInput:Bt,filter:Mt,within:It,bind:t,hasOwn:r,hyphenate:a,camelize:u,ucfirst:h,startsWith:p,endsWith:v,includes:x,findIndex:k,isArray:T,isFunction:A,isObject:S,isPlainObject:L,isWindow:E,isDocument:_,isJQuery:B,isNode:M,isNodeCollection:N,isBoolean:$,isString:P,isNumber:F,isNumeric:D,isEmpty:O,isUndefined:R,toBoolean:j,toNumber:H,toFloat:z,toNode:q,toNodes:W,toList:U,toMs:V,isEqual:Y,swap:Z,assign:X,each:J,sortBy:G,uniqueBy:K,clamp:Q,noop:tt,intersectRect:et,pointInRect:nt,Dimensions:it,MouseTracker:Sn,mergeOptions:Mn,parseOptions:In,Player:$n,Promise:Wt,Deferred:Ut,IntersectionObserver:Fn,query:ct,queryAll:ut,find:ht,findAll:ft,matches:bt,closest:Ct,parents:kt,escape:At,css:Re,getStyles:je,getStyle:He,getCssVar:qe,propName:Ue}),zn.data="__uikit__",zn.prefix="uk-",zn.options={},function(t){var e,n=t.data;function i(t,e){if(t)for(var n in t)t[n]._connected&&t[n]._callUpdate(e)}t.use=function(t){if(!t.installed)return t.call(null,this),t.installed=!0,this},t.mixin=function(e,n){(n=(P(n)?t.component(n):n)||this).options=Mn(n.options,e)},t.extend=function(t){t=t||{};var e=function(t){this._init(t)};return((e.prototype=Object.create(this.prototype)).constructor=e).options=Mn(this.options,t),e.super=this,e.extend=this.extend,e},t.update=function(t,e){(function t(e,n){e&&e!==document.body&&e.parentNode&&(t(e.parentNode,n),n(e.parentNode))})(t=t?q(t):document.body,function(t){return i(t[n],e)}),Ae(t,function(t){return i(t[n],e)})},Object.defineProperty(t,"container",{get:function(){return e||document.body},set:function(t){e=Se(t)}})}(zn),(On=zn).prototype._callHook=function(t){var e=this,n=this.$options[t];n&&n.forEach(function(t){return t.call(e)})},On.prototype._callConnected=function(){this._connected||(this._data={},this._computeds={},this._initProps(),this._callHook("beforeConnect"),this._connected=!0,this._initEvents(),this._initObserver(),this._callHook("connected"),this._callUpdate())},On.prototype._callDisconnected=function(){this._connected&&(this._callHook("beforeDisconnect"),this._observer&&(this._observer.disconnect(),this._observer=null),this._unbindEvents(),this._callHook("disconnected"),this._connected=!1)},On.prototype._callUpdate=function(t){var e=this;void 0===t&&(t="update");var n=t.type||t;x(["update","resize"],n)&&this._callWatches();var i=this.$options.update,r=this._frames,o=r.reads,s=r.writes;i&&i.forEach(function(t,i){var r=t.read,a=t.write,c=t.events;("update"===n||x(c,n))&&(r&&!x(Cn.reads,o[i])&&(o[i]=Cn.read(function(){var t=e._connected&&r.call(e,e._data,n);!1===t&&a?Cn.clear(s[i]):L(t)&&X(e._data,t)})),a&&!x(Cn.writes,s[i])&&(s[i]=Cn.write(function(){return e._connected&&a.call(e,e._data,n)})))})},function(e){var n=0;function i(t,e){var n={},i=t.args;void 0===i&&(i=[]);var r=t.props;void 0===r&&(r={});var o=t.el;if(!r)return n;for(var s in r){var c=a(s),h=at(o,c);if(!R(h)){if(h=r[s]===Boolean&&""===h||l(r[s],h),"target"===c&&(!h||p(h,"_")))continue;n[s]=h}}var f=In(at(o,e),i);for(var d in f){var g=u(d);void 0!==r[g]&&(n[g]=l(r[g],f[d]))}return n}function o(t,e,n){Object.defineProperty(t,e,{enumerable:!0,get:function(){var i=t._computeds,o=t.$props,s=t.$el;return r(i,e)||(i[e]=(n.get||n).call(t,o,s)),i[e]},set:function(i){var r=t._computeds;r[e]=n.set?n.set.call(t,i):i,R(r[e])&&delete r[e]}})}function s(e,n,i){L(n)||(n={name:i,handler:n});var r=n.name,o=n.el,a=n.handler,c=n.capture,u=n.passive,l=n.delegate,h=n.filter,f=n.self;o=A(o)?o.call(e):o||e.$el,T(o)?o.forEach(function(t){return s(e,X({},n,{el:t}),i)}):!o||h&&!h.call(e)||(a=function(t){return function(e){return T(e.detail)?t.apply(void 0,[e].concat(e.detail)):t(e)}}(P(a)?e[a]:t(a,e)),f&&(a=function(t){return function(e){if(e.target===e.currentTarget||e.target===e.current)return t.call(null,e)}}(a)),e._events.push(Nt(o,r,l?P(l)?l:l.call(e):null,a,$(u)?{passive:u,capture:c}:c)))}function c(t,e){return t.every(function(t){return!t||!r(t,e)})}function l(t,e){return t===Boolean?j(e):t===Number?H(e):"list"===t?U(e):t?t(e):e}e.prototype._init=function(t){(t=t||{}).data=function(t,e){var n=t.data,i=(t.el,e.args),r=e.props;if(void 0===r&&(r={}),n=T(n)?O(i)?void 0:n.slice(0,i.length).reduce(function(t,e,n){return L(e)?X(t,e):t[i[n]]=e,t},{}):n)for(var o in n)R(n[o])?delete n[o]:n[o]=r[o]?l(r[o],n[o]):n[o];return n}(t,this.constructor.options),this.$options=Mn(this.constructor.options,t,this),this.$el=null,this.$props={},this._frames={reads:{},writes:{}},this._events=[],this._uid=n++,this._initData(),this._initMethods(),this._initComputeds(),this._callHook("created"),t.el&&this.$mount(t.el)},e.prototype._initData=function(){var t=this.$options.data;for(var e in void 0===t&&(t={}),t)this.$props[e]=this[e]=t[e]},e.prototype._initMethods=function(){var e=this.$options.methods;if(e)for(var n in e)this[n]=t(e[n],this)},e.prototype._initComputeds=function(){var t=this.$options.computed;if(this._computeds={},t)for(var e in t)o(this,e,t[e])},e.prototype._callWatches=function(){var t=this.$options.computed,e=this._computeds;for(var n in e){var i=e[n];delete e[n],t[n].watch&&!Y(i,this[n])&&t[n].watch.call(this,this[n],i)}},e.prototype._initProps=function(t){var e;for(e in t=t||i(this.$options,this.$name))R(t[e])||(this.$props[e]=t[e]);var n=[this.$options.computed,this.$options.methods];for(e in this.$props)e in t&&c(n,e)&&(this[e]=this.$props[e])},e.prototype._initEvents=function(){var t=this,e=this.$options.events;e&&e.forEach(function(e){if(r(e,"handler"))s(t,e);else for(var n in e)s(t,e[n],n)})},e.prototype._unbindEvents=function(){this._events.forEach(function(t){return t()}),this._events=[]},e.prototype._initObserver=function(){var t=this,e=this.$options,n=e.attrs,r=e.props,o=e.el;if(!this._observer&&r&&!1!==n){n=T(n)?n:Object.keys(r),this._observer=new MutationObserver(function(){var e=i(t.$options,t.$name);n.some(function(n){return!R(e[n])&&e[n]!==t.$props[n]})&&t.$reset()});var s=n.map(function(t){return a(t)}).concat(this.$name);this._observer.observe(o,{attributes:!0,attributeFilter:s.concat(s.map(function(t){return"data-"+t}))})}}}(zn),jn=(Rn=zn).data,Hn={},Rn.component=function(t,e){if(!e)return L(Hn[t])&&(Hn[t]=Rn.extend(Hn[t])),Hn[t];Rn[t]=function(e,n){for(var i=arguments.length,r=Array(i);i--;)r[i]=arguments[i];var o=Rn.component(t);return L(e)?new o({data:e}):o.options.functional?new o({data:[].concat(r)}):e&&e.nodeType?s(e):Le(e).map(s)[0];function s(e){var i=Rn.getComponent(e,t);if(i){if(!n)return i;i.$destroy()}return new o({el:e,data:n})}};var n=L(e)?X({},e):e.options;if(n.name=t,n.install&&n.install(Rn,n,t),Rn._initialized&&!n.functional){var i=a(t);Cn.read(function(){return Rn[t]("[uk-"+i+"],[data-uk-"+i+"]")})}return Hn[t]=L(e)?n:e},Rn.getComponents=function(t){return t&&t[jn]||{}},Rn.getComponent=function(t,e){return Rn.getComponents(t)[e]},Rn.connect=function(t){if(t[jn])for(var e in t[jn])t[jn][e]._callConnected();for(var n=0;n<t.attributes.length;n++){var i=Dn(t.attributes[n].name);i&&i in Hn&&Rn[i](t)}},Rn.disconnect=function(t){for(var e in t[jn])t[jn][e]._callDisconnected()},function(t){var e=t.data;t.prototype.$mount=function(t){var n=this.$options.name;t[e]||(t[e]={}),t[e][n]||((t[e][n]=this).$el=this.$options.el=this.$options.el||t,It(t,document)&&this._callConnected())},t.prototype.$emit=function(t){this._callUpdate(t)},t.prototype.$reset=function(){this._callDisconnected(),this._callConnected()},t.prototype.$destroy=function(t){void 0===t&&(t=!1);var n=this.$options,i=n.el,r=n.name;i&&this._callDisconnected(),this._callHook("destroy"),i&&i[e]&&(delete i[e][r],O(i[e])||delete i[e],t&&we(this.$el))},t.prototype.$create=function(e,n,i){return t[e](n,i)},t.prototype.$update=t.update,t.prototype.$getComponent=t.getComponent;var n={};Object.defineProperties(t.prototype,{$container:Object.getOwnPropertyDescriptor(t,"container"),$name:{get:function(){var e=this.$options.name;return n[e]||(n[e]=t.prefix+a(e)),n[e]}}})}(zn);var qn,Wn,Un={connected:function(){!Ne(this.$el,this.$name)&&_e(this.$el,this.$name)}},Vn={props:{cls:Boolean,animation:"list",duration:Number,origin:String,transition:String,queued:Boolean},data:{cls:!1,animation:[!1],duration:200,origin:!1,transition:"linear",queued:!1,initProps:{overflow:"",height:"",paddingTop:"",paddingBottom:"",marginTop:"",marginBottom:""},hideProps:{overflow:"hidden",height:0,paddingTop:0,paddingBottom:0,marginTop:0,marginBottom:0}},computed:{hasAnimation:function(t){return!!t.animation[0]},hasTransition:function(t){var e=t.animation;return this.hasAnimation&&!0===e[0]}},methods:{toggleElement:function(t,e,n){var i=this;return new Wt(function(r){t=W(t);var o,s=function(t){return Wt.all(t.map(function(t){return i._toggleElement(t,e,n)}))},a=t.filter(function(t){return i.isToggled(t)}),c=t.filter(function(t){return!x(a,t)});if(i.queued&&R(n)&&R(e)&&i.hasAnimation&&!(t.length<2)){var u=document.body,l=u.scrollTop,h=a[0],f=Qe.inProgress(h)&&Ne(h,"uk-animation-leave")||Ze.inProgress(h)&&"0px"===h.style.height;o=s(a),f||(o=o.then(function(){var t=s(c);return u.scrollTop=l,t}))}else o=s(c.concat(a));o.then(r,tt)})},toggleNow:function(t,e){var n=this;return new Wt(function(i){return Wt.all(W(t).map(function(t){return n._toggleElement(t,e,!1)})).then(i,tt)})},isToggled:function(t){var e=W(t||this.$el);return this.cls?Ne(e,this.cls.split(" ")[0]):!ot(e,"hidden")},updateAria:function(t){!1===this.cls&&rt(t,"aria-hidden",!this.isToggled(t))},_toggleElement:function(t,e,n){var i=this;if(e=$(e)?e:Qe.inProgress(t)?Ne(t,"uk-animation-leave"):Ze.inProgress(t)?"0px"===t.style.height:!this.isToggled(t),!Ft(t,"before"+(e?"show":"hide"),[this]))return Wt.reject();var r=(A(n)?n:!1!==n&&this.hasAnimation?this.hasTransition?function(t){var e=t.isToggled,n=t.duration,i=t.initProps,r=t.hideProps,o=t.transition,s=t._toggle;return function(t,a){var c=Ze.inProgress(t),u=t.hasChildNodes?z(Re(t.firstElementChild,"marginTop"))+z(Re(t.lastElementChild,"marginBottom")):0,l=Et(t)?sn(t)+(c?0:u):0;Ze.cancel(t),e(t)||s(t,!0),sn(t,""),Cn.flush();var h=sn(t)+(c?0:u);return sn(t,l),(a?Ze.start(t,X({},i,{overflow:"hidden",height:h}),Math.round(n*(1-l/h)),o):Ze.start(t,r,Math.round(n*(l/h)),o).then(function(){return s(t,!1)})).then(function(){return Re(t,i)})}}(this):function(t){var e=t.animation,n=t.duration,i=t.origin,r=t._toggle;return function(t,o){return Qe.cancel(t),o?(r(t,!0),Qe.in(t,e[0],n,i)):Qe.out(t,e[1]||e[0],n,i).then(function(){return r(t,!1)})}}(this):this._toggle)(t,e);Ft(t,e?"show":"hide",[this]);var o=function(){Ft(t,e?"shown":"hidden",[i]),i.$update(t)};return r?r.then(o):Wt.resolve(o())},_toggle:function(t,e){var n;t&&(e=Boolean(e),this.cls?(n=x(this.cls," ")||e!==Ne(t,this.cls))&&$e(t,this.cls,x(this.cls," ")?void 0:e):(n=e===ot(t,"hidden"))&&rt(t,"hidden",e?null:""),Le("[autofocus]",t).some(function(t){return Et(t)?t.focus()||!0:t.blur()}),this.updateAria(t),n&&this.$update(t))}}},Yn={mixins:[Un,Vn],props:{targets:String,active:null,collapsible:Boolean,multiple:Boolean,toggle:String,content:String,transition:String},data:{targets:"> *",active:!1,animation:[!0],collapsible:!0,multiple:!1,clsOpen:"uk-open",toggle:"> .uk-accordion-title",content:"> .uk-accordion-content",transition:"ease"},computed:{items:function(t,e){return Le(t.targets,e)}},events:[{name:"click",delegate:function(){return this.targets+" "+this.$props.toggle},handler:function(t){t.preventDefault(),this.toggle(le(Le(this.targets+" "+this.$props.toggle,this.$el),t.current))}}],connected:function(){if(!1!==this.active){var t=this.items[Number(this.active)];t&&!Ne(t,this.clsOpen)&&this.toggle(t,!1)}},update:function(){var t=this;this.items.forEach(function(e){return t._toggle(Se(t.content,e),Ne(e,t.clsOpen))});var e=!this.collapsible&&!Ne(this.items,this.clsOpen)&&this.items[0];e&&this.toggle(e,!1)},methods:{toggle:function(t,e){var n=this,i=he(t,this.items),r=Mt(this.items,"."+this.clsOpen);(t=this.items[i])&&[t].concat(!this.multiple&&!x(r,t)&&r||[]).forEach(function(i){var o=i===t,s=o&&!Ne(i,n.clsOpen);if(s||!o||n.collapsible||!(r.length<2)){$e(i,n.clsOpen,s);var a=i._wrapper?i._wrapper.firstElementChild:Se(n.content,i);i._wrapper||(i._wrapper=ye(a,"<div>"),rt(i._wrapper,"hidden",s?"":null)),n._toggle(a,!0),n.toggleElement(i._wrapper,s,e).then(function(){Ne(i,n.clsOpen)===s&&(s||n._toggle(a,!1),i._wrapper=null,xe(a))})}})}}},Zn={mixins:[Un,Vn],args:"animation",props:{close:String},data:{animation:[!0],selClose:".uk-alert-close",duration:150,hideProps:X({opacity:0},Vn.data.hideProps)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.close()}}],methods:{close:function(){var t=this;this.toggleElement(this.$el).then(function(){return t.$destroy(!0)})}}},Xn={args:"autoplay",props:{automute:Boolean,autoplay:Boolean},data:{automute:!1,autoplay:!0},computed:{inView:function(t){return"inview"===t.autoplay}},connected:function(){this.inView&&!ot(this.$el,"preload")&&(this.$el.preload="none"),this.player=new $n(this.$el),this.automute&&this.player.mute()},update:{read:function(){return!!this.player&&{visible:Et(this.$el)&&"hidden"!==Re(this.$el,"visibility"),inView:this.inView&&pn(this.$el)}},write:function(t){var e=t.visible,n=t.inView;!e||this.inView&&!n?this.player.pause():(!0===this.autoplay||this.inView&&n)&&this.player.play()},events:["resize","scroll"]}},Jn={mixins:[Un,Xn],props:{width:Number,height:Number},data:{automute:!0},update:{read:function(){var t=this.$el;if(!Et(t))return!1;var e=t.parentNode;return{height:e.offsetHeight,width:e.offsetWidth}},write:function(t){var e=t.height,n=t.width,i=this.$el,r=this.width||i.naturalWidth||i.videoWidth||i.clientWidth,o=this.height||i.naturalHeight||i.videoHeight||i.clientHeight;r&&o&&Re(i,it.cover({width:r,height:o},{width:n+(n%2?1:0),height:e+(e%2?1:0)}))},events:["resize"]}},Gn={props:{pos:String,offset:null,flip:Boolean,clsPos:String},data:{pos:"bottom-"+(Qt?"right":"left"),flip:!0,offset:!1,clsPos:""},computed:{pos:function(t){var e=t.pos;return(e+(x(e,"-")?"":"-center")).split("-")},dir:function(){return this.pos[0]},align:function(){return this.pos[1]}},methods:{positionAt:function(t,e,n){var i;Me(t,this.clsPos+"-(top|bottom|left|right)(-[a-z]+)?"),Re(t,{top:"",left:""});var r=this.offset,o=this.getAxis();D(r)||(r=(i=Se(r))?nn(i)["x"===o?"left":"top"]-nn(e)["x"===o?"right":"bottom"]:0);var s=en(t,e,"x"===o?dn(this.dir)+" "+this.align:this.align+" "+dn(this.dir),"x"===o?this.dir+" "+this.align:this.align+" "+this.dir,"x"===o?""+("left"===this.dir?-r:r):" "+("top"===this.dir?-r:r),null,this.flip,n).target,a=s.x,c=s.y;this.dir="x"===o?a:c,this.align="x"===o?c:a,$e(t,this.clsPos+"-"+this.dir+"-"+this.align,!1===this.offset)},getAxis:function(){return"top"===this.dir||"bottom"===this.dir?"y":"x"}}},Kn={mixins:[Gn,Vn],args:"pos",props:{mode:"list",toggle:Boolean,boundary:Boolean,boundaryAlign:Boolean,delayShow:Number,delayHide:Number,clsDrop:String},data:{mode:["click","hover"],toggle:"- *",boundary:window,boundaryAlign:!1,delayShow:0,delayHide:800,clsDrop:!1,hoverIdle:200,animation:["uk-animation-fade"],cls:"uk-open"},computed:{boundary:function(t,e){return ct(t.boundary,e)},clsDrop:function(t){return t.clsDrop||"uk-"+this.$options.name},clsPos:function(){return this.clsDrop}},created:function(){this.tracker=new Sn},connected:function(){_e(this.$el,this.clsDrop);var t=this.$props.toggle;this.toggle=t&&this.$create("toggle",ct(t,this.$el),{target:this.$el,mode:this.mode}),!this.toggle&&Ft(this.$el,"updatearia")},events:[{name:"click",delegate:function(){return"."+this.clsDrop+"-close"},handler:function(t){t.preventDefault(),this.hide(!1)}},{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.target.hash;e||t.preventDefault(),e&&It(e,this.$el)||this.hide(!1)}},{name:"beforescroll",handler:function(){this.hide(!1)}},{name:"toggle",self:!0,handler:function(t,e){t.preventDefault(),this.isToggled()?this.hide(!1):this.show(e,!1)}},{name:se,filter:function(){return x(this.mode,"hover")},handler:function(t){zt(t)||(qn&&qn!==this&&qn.toggle&&x(qn.toggle.mode,"hover")&&!It(t.target,qn.toggle.$el)&&!nt({x:t.pageX,y:t.pageY},nn(qn.$el))&&qn.hide(!1),t.preventDefault(),this.show(this.toggle))}},{name:"toggleshow",handler:function(t,e){e&&!x(e.target,this.$el)||(t.preventDefault(),this.show(e||this.toggle))}},{name:"togglehide "+ae,handler:function(t,e){zt(t)||e&&!x(e.target,this.$el)||(t.preventDefault(),this.toggle&&x(this.toggle.mode,"hover")&&this.hide())}},{name:"beforeshow",self:!0,handler:function(){this.clearTimers(),Qe.cancel(this.$el),this.position()}},{name:"show",self:!0,handler:function(){this.tracker.init(),Ft(this.$el,"updatearia"),Wn||(Wn=!0,Nt(document,oe,function(t){var e,n=t.target,i=t.defaultPrevented;if(!i)for(;qn&&qn!==e&&!It(n,qn.$el)&&(!qn.toggle||!It(n,qn.toggle.$el));)(e=qn).hide(!1)}))}},{name:"beforehide",self:!0,handler:function(){this.clearTimers()}},{name:"hide",handler:function(t){var e=t.target;this.$el===e?(qn=this.isActive()?null:qn,Ft(this.$el,"updatearia"),this.tracker.cancel()):qn=null===qn&&It(e,this.$el)&&this.isToggled()?this:qn}},{name:"updatearia",self:!0,handler:function(t,e){t.preventDefault(),this.updateAria(this.$el),(e||this.toggle)&&(rt((e||this.toggle).$el,"aria-expanded",this.isToggled()?"true":"false"),$e(this.toggle.$el,this.cls,this.isToggled()))}}],update:{write:function(){this.isToggled()&&!Qe.inProgress(this.$el)&&this.position()},events:["resize"]},methods:{show:function(t,e){var n=this;void 0===e&&(e=!0);var i=function(){return!n.isToggled()&&n.toggleElement(n.$el,!0)},r=function(){if(n.toggle=t||n.toggle,n.clearTimers(),!n.isActive())if(e&&qn&&qn!==n&&qn.isDelaying)n.showTimer=setTimeout(n.show,10);else{if(n.isParentOf(qn)){if(!qn.hideTimer)return;qn.hide(!1)}else if(qn&&n.isChildOf(qn))qn.clearTimers();else if(qn&&!n.isChildOf(qn)&&!n.isParentOf(qn))for(var r;qn&&qn!==r&&!n.isChildOf(qn);)(r=qn).hide(!1);e&&n.delayShow?n.showTimer=setTimeout(i,n.delayShow):i(),qn=n}};t&&this.toggle&&t.$el!==this.toggle.$el?(Pt(this.$el,"hide",r),this.hide(!1)):r()},hide:function(t){var e=this;void 0===t&&(t=!0);var n=function(){return e.toggleNow(e.$el,!1)};this.clearTimers(),this.isDelaying=this.tracker.movesTo(this.$el),t&&this.isDelaying?this.hideTimer=setTimeout(this.hide,this.hoverIdle):t&&this.delayHide?this.hideTimer=setTimeout(n,this.delayHide):n()},clearTimers:function(){clearTimeout(this.showTimer),clearTimeout(this.hideTimer),this.showTimer=null,this.hideTimer=null,this.isDelaying=!1},isActive:function(){return qn===this},isChildOf:function(t){return t&&t!==this&&It(this.$el,t.$el)},isParentOf:function(t){return t&&t!==this&&It(t.$el,this.$el)},position:function(){Me(this.$el,this.clsDrop+"-(stack|boundary)"),Re(this.$el,{top:"",left:"",display:"block"}),$e(this.$el,this.clsDrop+"-boundary",this.boundaryAlign);var t=nn(this.boundary),e=this.boundaryAlign?t:nn(this.toggle.$el);if("justify"===this.align){var n="y"===this.getAxis()?"width":"height";Re(this.$el,n,e[n])}else this.$el.offsetWidth>Math.max(t.right-e.left,e.right-t.left)&&_e(this.$el,this.clsDrop+"-stack");this.positionAt(this.$el,this.boundaryAlign?this.boundary:this.toggle.$el,this.boundary),Re(this.$el,"display","")}}},Qn={extends:Kn},ti={mixins:[Un],args:"target",props:{target:Boolean},data:{target:!1},computed:{input:function(t,e){return Se(_t,e)},state:function(){return this.input.nextElementSibling},target:function(t,e){var n=t.target;return n&&(!0===n&&this.input.parentNode===e&&this.input.nextElementSibling||ct(n,e))}},update:function(){var t=this.target,e=this.input;if(t){var n,i=Bt(t)?"value":"textContent",r=t[i],o=e.files&&e.files[0]?e.files[0].name:bt(e,"select")&&(n=Le("option",e).filter(function(t){return t.selected})[0])?n.textContent:e.value;r!==o&&(t[i]=o)}},events:{change:function(){this.$emit()}}},ei={update:{read:function(t){var e=pn(this.$el);if(!e||t.isInView===e)return!1;t.isInView=e},write:function(){this.$el.src=this.$el.src},events:["scroll","resize"]}},ni={props:{margin:String,firstColumn:Boolean},data:{margin:"uk-margin-small-top",firstColumn:"uk-first-column"},update:{read:function(t){var e=this.$el.children;if(!e.length||!Et(this.$el))return t.rows=[[]];t.rows=ii(e),t.stacks=!t.rows.some(function(t){return 1<t.length})},write:function(t){var e=this;t.rows.forEach(function(t,n){return t.forEach(function(t,i){$e(t,e.margin,0!==n),$e(t,e.firstColumn,0===i)})})},events:["resize"]}};function ii(t){for(var e=[[]],n=0;n<t.length;n++){var i=t[n],r=ri(i);if(r.height)for(var o=e.length-1;0<=o;o--){var s=e[o];if(!s[0]){s.push(i);break}var a=void 0;if(a=s[0].offsetParent===i.offsetParent?ri(s[0]):(r=ri(i,!0),ri(s[0],!0)),r.top>=a.bottom-1){e.push([i]);break}if(r.bottom>a.top){if(r.left<a.left&&!Qt){s.unshift(i);break}s.push(i);break}if(0===o){e.unshift([i]);break}}}return e}function ri(t,e){var n;void 0===e&&(e=!1);var i=t.offsetTop,r=t.offsetLeft,o=t.offsetHeight;return e&&(i=(n=mn(t))[0],r=n[1]),{top:i,left:r,height:o,bottom:i+o}}var oi={extends:ni,mixins:[Un],name:"grid",props:{masonry:Boolean,parallax:Number},data:{margin:"uk-grid-margin",clsStack:"uk-grid-stack",masonry:!1,parallax:0},computed:{length:function(t,e){return e.children.length},parallax:function(t){var e=t.parallax;return e&&this.length?Math.abs(e):""}},connected:function(){this.masonry&&_e(this.$el,"uk-flex-top uk-flex-wrap-top")},update:[{read:function(t){var e=t.rows;(this.masonry||this.parallax)&&(e=e.map(function(t){return G(t,"offsetLeft")}),Qt&&e.map(function(t){return t.reverse()}));var n=e.some(function(t){return t.some(Ze.inProgress)}),i=!1,r="";if(this.masonry&&this.length){var o=0;i=e.reduce(function(t,n,i){return t[i]=n.map(function(n,r){return 0===i?0:z(t[i-1][r])+(o-z(e[i-1][r]&&e[i-1][r].offsetHeight))}),o=n.reduce(function(t,e){return Math.max(t,e.offsetHeight)},0),t},[]),r=function(t){return Math.max.apply(Math,t.reduce(function(t,e){return e.forEach(function(e,n){return t[n]=(t[n]||0)+e.offsetHeight}),t},[]))}(e)+function(t,e){var n=W(t.children),i=n.filter(function(t){return Ne(t,e)})[0];return z(i?Re(i,"marginTop"):Re(n[0],"paddingLeft"))}(this.$el,this.margin)*(e.length-1)}return{rows:e,translates:i,height:!n&&r}},write:function(t){var e=t.stacks,n=t.height;$e(this.$el,this.clsStack,e),Re(this.$el,"paddingBottom",this.parallax),!1!==n&&Re(this.$el,"height",n)},events:["resize"]},{read:function(t){var e=t.height;return{scrolled:!!this.parallax&&gn(this.$el,e?e-sn(this.$el):0)*this.parallax}},write:function(t){var e=t.rows,n=t.scrolled,i=t.translates;(!1!==n||i)&&e.forEach(function(t,e){return t.forEach(function(t,r){return Re(t,"transform",n||i?"translateY("+((i&&-i[e][r])+(n?r%2?n:n/8:0))+"px)":"")})})},events:["scroll","resize"]}]},si=Kt?{data:{selMinHeight:!1,forceHeight:!1},computed:{elements:function(t,e){var n=t.selMinHeight;return n?Le(n,e):[e]}},update:[{read:function(){Re(this.elements,"height","")},order:-5,events:["resize"]},{write:function(){var t=this;this.elements.forEach(function(e){var n=z(Re(e,"minHeight"));n&&(t.forceHeight||Math.round(n+un("height",e,"content-box"))>=e.offsetHeight)&&Re(e,"height",n)})},order:5,events:["resize"]}]}:{},ai={mixins:[si],args:"target",props:{target:String,row:Boolean},data:{target:"> *",row:!0,forceHeight:!0},computed:{elements:function(t,e){return Le(t.target,e)}},update:{read:function(){return{rows:(this.row?ii(this.elements):[this.elements]).map(ci)}},write:function(t){t.rows.forEach(function(t){var e=t.heights;return t.elements.forEach(function(t,n){return Re(t,"minHeight",e[n])})})},events:["resize"]}};function ci(t){var e;if(t.length<2)return{heights:[""],elements:t};var n=ui(t),i=n.heights,r=n.max,o=t.some(function(t){return t.style.minHeight}),s=t.some(function(t,e){return!t.style.minHeight&&i[e]<r});return o&&s&&(Re(t,"minHeight",""),e=ui(t),i=e.heights,r=e.max),{heights:i=t.map(function(t,e){return i[e]===r&&z(t.style.minHeight).toFixed(2)!==r.toFixed(2)?"":r}),elements:t}}function ui(t){var e=t.map(function(t){return nn(t).height-un("height",t,"content-box")});return{heights:e,max:Math.max.apply(null,e)}}var li={mixins:[si],props:{expand:Boolean,offsetTop:Boolean,offsetBottom:Boolean,minHeight:Number},data:{expand:!1,offsetTop:!1,offsetBottom:!1,minHeight:0},update:{read:function(){var t="",e=un("height",this.$el,"content-box");if(this.expand)t=sn(window)-(hi(document.documentElement)-hi(this.$el))-e||"";else{if(t="calc(100vh",this.offsetTop){var n=nn(this.$el).top;t+=n<sn(window)/2?" - "+n+"px":""}!0===this.offsetBottom?t+=" - "+hi(this.$el.nextElementSibling)+"px":D(this.offsetBottom)?t+=" - "+this.offsetBottom+"vh":this.offsetBottom&&v(this.offsetBottom,"px")?t+=" - "+z(this.offsetBottom)+"px":P(this.offsetBottom)&&(t+=" - "+hi(ct(this.offsetBottom,this.$el))+"px"),t+=(e?" - "+e+"px":"")+")"}return{minHeight:t}},write:function(t){var e=t.minHeight;Re(this.$el,{minHeight:e}),this.minHeight&&z(Re(this.$el,"minHeight"))<this.minHeight&&Re(this.$el,"minHeight",this.minHeight)},events:["resize"]}};function hi(t){return t&&t.offsetHeight||0}var fi={args:"src",props:{id:Boolean,icon:String,src:String,style:String,width:Number,height:Number,ratio:Number,class:String,strokeAnimation:Boolean,attributes:"list"},data:{ratio:1,include:["style","class"],class:"",strokeAnimation:!1},connected:function(){var t,e=this;if(this.class+=" uk-svg",!this.icon&&x(this.src,"#")){var n=this.src.split("#");1<n.length&&(t=n,this.src=t[0],this.icon=t[1])}this.svg=this.getSvg().then(function(t){return e.applyAttributes(t),e.svgEl=function(t,e){if(Lt(e)||"CANVAS"===e.tagName){rt(e,"hidden",!0);var n=e.nextElementSibling;return mi(t,n)?n:ve(e,t)}var i=e.lastElementChild;return mi(t,i)?i:pe(e,t)}(t,e.$el)},tt)},disconnected:function(){var t=this;Lt(this.$el)&&rt(this.$el,"hidden",null),this.svg&&this.svg.then(function(e){return(!t._connected||e!==t.svgEl)&&we(e)},tt),this.svg=this.svgEl=null},update:{read:function(){return!!(this.strokeAnimation&&this.svgEl&&Et(this.svgEl))},write:function(){var t,e;t=this.svgEl,(e=vi(t))&&t.style.setProperty("--uk-animation-stroke",e)},type:["resize"]},methods:{getSvg:function(){var t,e=this;return(t=this.src,di[t]?di[t]:di[t]=new Wt(function(e,n){t?p(t,"data:")?e(decodeURIComponent(t.split(",")[1])):Jt(t).then(function(t){return e(t.response)},function(){return n("SVG not found.")}):n()})).then(function(t){return function(t,e){return e&&x(t,"<symbol")&&(t=function(t,e){if(!gi[t]){var n;for(gi[t]={};n=pi.exec(t);)gi[t][n[3]]='<svg xmlns="http://www.w3.org/2000/svg"'+n[1]+"svg>";pi.lastIndex=0}return gi[t][e]}(t,e)||t),(t=Se(t.substr(t.indexOf("<svg"))))&&t.hasChildNodes()&&t}(t,e.icon)||Wt.reject("SVG not found.")})},applyAttributes:function(t){var e=this;for(var n in this.$options.props)this[n]&&x(this.include,n)&&rt(t,n,this[n]);for(var i in this.attributes){var r=this.attributes[i].split(":",2),o=r[0],s=r[1];rt(t,o,s)}this.id||st(t,"id");var a=["width","height"],c=[this.width,this.height];c.some(function(t){return t})||(c=a.map(function(e){return rt(t,e)}));var u=rt(t,"viewBox");u&&!c.some(function(t){return t})&&(c=u.split(" ").slice(2)),c.forEach(function(n,i){(n=(0|n)*e.ratio)&&rt(t,a[i],n),n&&!c[1^i]&&st(t,a[1^i])}),rt(t,"data-svg",this.icon||this.src)}}},di={},pi=/<symbol(.*?id=(['"])(.*?)\2[^]*?<\/)symbol>/g,gi={};function vi(t){return Math.ceil(Math.max.apply(Math,Le("[stroke]",t).map(function(t){return t.getTotalLength&&t.getTotalLength()||0}).concat([0])))}function mi(t,e){return rt(t,"data-svg")===rt(e,"data-svg")}var wi={},yi={spinner:'<svg width="30" height="30" viewBox="0 0 30 30" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="15" cy="15" r="14"/></svg>',totop:'<svg width="18" height="10" viewBox="0 0 18 10" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 9 9 1 17 9 "/></svg>',marker:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="4" width="1" height="11"/><rect x="4" y="9" width="11" height="1"/></svg>',"close-icon":'<svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="1" y1="1" x2="13" y2="13"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13" y1="1" x2="1" y2="13"/></svg>',"close-large":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.4" x1="1" y1="1" x2="19" y2="19"/><line fill="none" stroke="#000" stroke-width="1.4" x1="19" y1="1" x2="1" y2="19"/></svg>',"navbar-toggle-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="9" width="20" height="2"/><rect y="3" width="20" height="2"/><rect y="15" width="20" height="2"/></svg>',"overlay-icon":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><rect x="19" y="0" width="1" height="40"/><rect x="0" y="19" width="40" height="1"/></svg>',"pagination-next":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="1 1 6 6 1 11"/></svg>',"pagination-previous":'<svg width="7" height="12" viewBox="0 0 7 12" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.2" points="6 1 1 6 6 11"/></svg>',"search-icon":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',"search-large":'<svg width="40" height="40" viewBox="0 0 40 40" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.8" cx="17.5" cy="17.5" r="16.5"/><line fill="none" stroke="#000" stroke-width="1.8" x1="38" y1="39" x2="29" y2="30"/></svg>',"search-navbar":'<svg width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10.5" cy="10.5" r="9.5"/><line fill="none" stroke="#000" stroke-width="1.1" x1="23" y1="23" x2="17" y2="17"/></svg>',"slidenav-next":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="1.225,23 12.775,12 1.225,1 "/></svg>',"slidenav-next-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="4.002,38.547 22.527,20.024 4,1.5 "/></svg>',"slidenav-previous":'<svg width="14px" height="24px" viewBox="0 0 14 24" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.4" points="12.775,1 1.225,12 12.775,23 "/></svg>',"slidenav-previous-large":'<svg width="25px" height="40px" viewBox="0 0 25 40" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="2" points="20.527,1.5 2,20.024 20.525,38.547 "/></svg>'},bi={install:function(t){t.icon.add=function(e,n){var i,r=P(e)?((i={})[e]=n,i):e;J(r,function(t,e){yi[e]=t,delete wi[e]}),t._initialized&&Ae(document.body,function(e){return J(t.getComponents(e),function(t){t.$options.isIcon&&t.icon in r&&t.$reset()})})}},mixins:[Un,fi],args:"icon",props:["icon"],data:{include:[]},isIcon:!0,connected:function(){_e(this.$el,"uk-icon")},methods:{getSvg:function(){var t=function(t){return yi[t]?(wi[t]||(wi[t]=Se(yi[t].trim())),wi[t].cloneNode(!0)):null}(function(t){return Qt?Z(Z(t,"left","right"),"previous","next"):t}(this.icon));return t?Wt.resolve(t):Wt.reject("Icon not found.")}}},xi={extends:bi,data:function(t){return{icon:a(t.constructor.options.name)}}},Ci={extends:xi,connected:function(){_e(this.$el,"uk-slidenav")},computed:{icon:function(t,e){var n=t.icon;return Ne(e,"uk-slidenav-large")?n+"-large":n}}},ki={extends:xi,computed:{icon:function(t,e){var n=t.icon;return Ne(e,"uk-search-icon")&&kt(e,".uk-search-large").length?"search-large":kt(e,".uk-search-navbar").length?"search-navbar":n}}},Ti={extends:xi,computed:{icon:function(){return"close-"+(Ne(this.$el,"uk-close-large")?"large":"icon")}}},Ai={extends:xi,connected:function(){var t=this;this.svg.then(function(e){return 1!==t.ratio&&Re(Se("circle",e),"strokeWidth",1/t.ratio)},tt)}},Si={args:"dataSrc",props:{dataSrc:String,dataSrcset:Boolean,sizes:String,width:Number,height:Number,offsetTop:String,offsetLeft:String,target:String},data:{dataSrc:"",dataSrcset:!1,sizes:!1,width:!1,height:!1,offsetTop:"50vh",offsetLeft:0,target:!1},computed:{cacheKey:function(t){var e=t.dataSrc;return this.$name+"."+e},width:function(t){var e=t.width,n=t.dataWidth;return e||n},height:function(t){var e=t.height,n=t.dataHeight;return e||n},sizes:function(t){var e=t.sizes,n=t.dataSizes;return e||n},isImg:function(t,e){return Ni(e)},target:{get:function(t){var e=t.target;return[this.$el].concat(ut(e,this.$el))},watch:function(){this.observe()}},offsetTop:function(t){return wn(t.offsetTop,"height")},offsetLeft:function(t){return wn(t.offsetLeft,"width")}},connected:function(){var t,e,n,i;Pi[this.cacheKey]?Li(this.$el,Pi[this.cacheKey]||this.dataSrc,this.dataSrcset,this.sizes):this.isImg&&this.width&&this.height&&Li(this.$el,(t=this.width,e=this.height,(n=this.sizes)&&(i=it.ratio({width:t,height:e},"width",wn(_i(n))),t=i.width,e=i.height),'data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="'+t+'" height="'+e+'"></svg>')),this.observer=new Fn(this.load,{rootMargin:this.offsetTop+"px "+this.offsetLeft+"px"}),requestAnimationFrame(this.observe)},disconnected:function(){this.observer.disconnect()},update:{read:function(t){var e=this,n=t.image;if(n||"complete"!==document.readyState||this.load(this.observer.takeRecords()),this.isImg)return!1;n&&n.then(function(t){return t&&""!==t.currentSrc&&Li(e.$el,$i(t))})},write:function(t){if(this.dataSrcset&&1!==window.devicePixelRatio){var e=Re(this.$el,"backgroundSize");(e.match(/^(auto\s?)+$/)||z(e)===t.bgSize)&&(t.bgSize=function(t,e){var n=wn(_i(e)),i=(t.match(Ii)||[]).map(z).sort(function(t,e){return t-e});return i.filter(function(t){return n<=t})[0]||i.pop()||""}(this.dataSrcset,this.sizes),Re(this.$el,"backgroundSize",t.bgSize+"px"))}},events:["resize"]},methods:{load:function(t){var e=this;t.some(function(t){return t.isIntersecting})&&(this._data.image=Gt(this.dataSrc,this.dataSrcset,this.sizes).then(function(t){return Li(e.$el,$i(t),t.srcset,t.sizes),Pi[e.cacheKey]=$i(t),t},tt),this.observer.disconnect())},observe:function(){var t=this;!this._data.image&&this._connected&&this.target.forEach(function(e){return t.observer.observe(e)})}}};function Li(t,e,n,i){Ni(t)?(i&&(t.sizes=i),n&&(t.srcset=n),e&&(t.src=e)):e&&!x(t.style.backgroundImage,e)&&(Re(t,"backgroundImage","url("+At(e)+")"),Ft(t,Dt("load",!1)))}var Ei=/\s*(.*?)\s*(\w+|calc\(.*?\))\s*(?:,|$)/g;function _i(t){var e,n;for(Ei.lastIndex=0;e=Ei.exec(t);)if(!e[1]||window.matchMedia(e[1]).matches){e=p(n=e[2],"calc")?n.substring(5,n.length-1).replace(Bi,function(t){return wn(t)}).replace(/ /g,"").match(Mi).reduce(function(t,e){return t+ +e},0):n;break}return e||"100vw"}var Bi=/\d+(?:\w+|%)/g,Mi=/[+-]?(\d+)/g,Ii=/\s+\d+w\s*(?:,|$)/g;function Ni(t){return"IMG"===t.tagName}function $i(t){return t.currentSrc||t.src}var Pi,Fi="__test__";try{(Pi=window.sessionStorage||{})[Fi]=1,delete Pi[Fi]}catch(f){Pi={}}var Di,Oi,Ri={props:{media:Boolean},data:{media:!1},computed:{matchMedia:function(){var t=function(t){if(P(t))if("@"===t[0]){var e="breakpoint-"+t.substr(1);t=z(qe(e))}else if(isNaN(t))return t;return!(!t||isNaN(t))&&"(min-width: "+t+"px)"}(this.media);return!t||window.matchMedia(t).matches}}},ji={mixins:[Un,Ri],props:{fill:String},data:{fill:"",clsWrapper:"uk-leader-fill",clsHide:"uk-leader-hide",attrFill:"data-fill"},computed:{fill:function(t){return t.fill||qe("leader-fill-content")}},connected:function(){var t;t=be(this.$el,'<span class="'+this.clsWrapper+'">'),this.wrapper=t[0]},disconnected:function(){xe(this.wrapper.childNodes)},update:{read:function(t){var e=t.changed,n=t.width,i=n;return{width:n=Math.floor(this.$el.offsetWidth/2),fill:this.fill,changed:e||i!==n,hide:!this.matchMedia}},write:function(t){$e(this.wrapper,this.clsHide,t.hide),t.changed&&(t.changed=!1,rt(this.wrapper,this.attrFill,new Array(t.width).join(t.fill)))},events:["resize"]}},Hi={props:{container:Boolean},data:{container:!0},computed:{container:function(t){var e=t.container;return!0===e&&this.$container||e&&Se(e)}}},zi={mixins:[Un,Hi,Vn],props:{selPanel:String,selClose:String,escClose:Boolean,bgClose:Boolean,stack:Boolean},data:{cls:"uk-open",escClose:!0,bgClose:!0,overlay:!0,stack:!1},computed:{panel:function(t,e){return Se(t.selPanel,e)},transitionElement:function(){return this.panel},bgClose:function(t){return t.bgClose&&this.panel}},beforeDisconnect:function(){this.isToggled()&&this.toggleNow(this.$el,!1)},events:[{name:"click",delegate:function(){return this.selClose},handler:function(t){t.preventDefault(),this.hide()}},{name:"toggle",self:!0,handler:function(t){t.defaultPrevented||(t.preventDefault(),this.toggle())}},{name:"beforeshow",self:!0,handler:function(t){var e=Di&&Di!==this&&Di;Di=this,e?this.stack?this.prev=e:((Di=e).isToggled()?e.hide().then(this.show):Pt(e.$el,"beforeshow hidden",this.show,!1,function(t){var n=t.target;return"hidden"===t.type&&n===e.$el}),t.preventDefault()):Oi||(Oi=[Nt(document,oe,function(t){var e=t.target,n=t.defaultPrevented;!Di||!Di.bgClose||n||Di.overlay&&!It(e,Di.$el)||It(e,Di.panel)||Di.hide()}),Nt(document,"keydown",function(t){27===t.keyCode&&Di&&Di.escClose&&(t.preventDefault(),Di.hide())})])}},{name:"show",self:!0,handler:function(){Ne(document.documentElement,this.clsPage)||(this.scrollbarWidth=an(window)-an(document),Re(document.body,"overflowY",this.scrollbarWidth&&this.overlay?"scroll":"")),_e(document.documentElement,this.clsPage)}},{name:"hide",self:!0,handler:function(){Di&&(Di!==this||this.prev)||(Oi&&Oi.forEach(function(t){return t()}),Oi=null)}},{name:"hidden",self:!0,handler:function(){var t,e=this.prev;if(Di=Di&&Di!==this&&Di||e)for(;e;){if(e.clsPage===this.clsPage){t=!0;break}e=e.prev}else Re(document.body,"overflowY","");t||Be(document.documentElement,this.clsPage)}}],methods:{toggle:function(){return this.isToggled()?this.hide():this.show()},show:function(){var t=this;return this.isToggled()?Wt.resolve():this.container&&this.$el.parentNode!==this.container?(pe(this.container,this.$el),new Wt(function(e){return requestAnimationFrame(function(){return t.show().then(e)})})):this.toggleElement(this.$el,!0,qi(this))},hide:function(){return this.isToggled()?this.toggleElement(this.$el,!1,qi(this)):Wt.resolve()},getActive:function(){return Di}}};function qi(t){var e=t.transitionElement,n=t._toggle;return function(t,i){return new Wt(function(r,o){return Pt(t,"show hide",function(){t._reject&&t._reject(),t._reject=o,n(t,i),V(Re(e,"transitionDuration"))?Pt(e,"transitionend",r,!1,function(t){return t.target===e}):r()})})}}var Wi={install:function(t){t.modal.dialog=function(e,n){var i=t.modal(' <div class="uk-modal"> <div class="uk-modal-dialog">'+e+"</div> </div> ",n);return i.show(),Nt(i.$el,"hidden",function(t){var e=t.target,n=t.currentTarget;e===n&&Wt.resolve(function(){return i.$destroy(!0)})}),i},t.modal.alert=function(e,n){return n=X({bgClose:!1,escClose:!1,labels:t.modal.labels},n),new Wt(function(i){return Nt(t.modal.dialog(' <div class="uk-modal-body">'+(P(e)?e:de(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-primary uk-modal-close" autofocus>'+n.labels.ok+"</button> </div> ",n).$el,"hide",i)})},t.modal.confirm=function(e,n){return n=X({bgClose:!1,escClose:!0,labels:t.modal.labels},n),new Wt(function(i,r){var o=t.modal.dialog(' <form> <div class="uk-modal-body">'+(P(e)?e:de(e))+'</div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+n.labels.cancel+'</button> <button class="uk-button uk-button-primary" autofocus>'+n.labels.ok+"</button> </div> </form> ",n),s=!1;Nt(o.$el,"submit","form",function(t){t.preventDefault(),i(),s=!0,o.hide()}),Nt(o.$el,"hide",function(){s||r()})})},t.modal.prompt=function(e,n,i){return i=X({bgClose:!1,escClose:!0,labels:t.modal.labels},i),new Wt(function(r){var o=t.modal.dialog(' <form class="uk-form-stacked"> <div class="uk-modal-body"> <label>'+(P(e)?e:de(e))+'</label> <input class="uk-input" autofocus> </div> <div class="uk-modal-footer uk-text-right"> <button class="uk-button uk-button-default uk-modal-close" type="button">'+i.labels.cancel+'</button> <button class="uk-button uk-button-primary">'+i.labels.ok+"</button> </div> </form> ",i),s=Se("input",o.$el);s.value=n;var a=!1;Nt(o.$el,"submit","form",function(t){t.preventDefault(),r(s.value),a=!0,o.hide()}),Nt(o.$el,"hide",function(){a||r(null)})})},t.modal.labels={ok:"Ok",cancel:"Cancel"}},mixins:[zi],data:{clsPage:"uk-modal-page",selPanel:".uk-modal-dialog",selClose:".uk-modal-close, .uk-modal-close-default, .uk-modal-close-outside, .uk-modal-close-full"},events:[{name:"show",self:!0,handler:function(){Ne(this.panel,"uk-margin-auto-vertical")?_e(this.$el,"uk-flex"):Re(this.$el,"display","block"),sn(this.$el)}},{name:"hidden",self:!0,handler:function(){Re(this.$el,"display",""),Be(this.$el,"uk-flex")}}]},Ui={extends:Yn,data:{targets:"> .uk-parent",toggle:"> a",content:"> ul"}},Vi={mixins:[Un,si],props:{dropdown:String,mode:"list",align:String,offset:Number,boundary:Boolean,boundaryAlign:Boolean,clsDrop:String,delayShow:Number,delayHide:Number,dropbar:Boolean,dropbarMode:String,dropbarAnchor:Boolean,duration:Number},data:{dropdown:".uk-navbar-nav > li",align:Qt?"right":"left",clsDrop:"uk-navbar-dropdown",mode:void 0,offset:void 0,delayShow:void 0,delayHide:void 0,boundaryAlign:void 0,flip:"x",boundary:!0,dropbar:!1,dropbarMode:"slide",dropbarAnchor:!1,duration:200,forceHeight:!0,selMinHeight:".uk-navbar-nav > li > a, .uk-navbar-item, .uk-navbar-toggle"},computed:{boundary:function(t,e){var n=t.boundary,i=t.boundaryAlign;return!0===n||i?e:n},dropbarAnchor:function(t,e){return ct(t.dropbarAnchor,e)},pos:function(t){return"bottom-"+t.align},dropdowns:function(t,e){return Le(t.dropdown+" ."+t.clsDrop,e)}},beforeConnect:function(){var t=this.$props.dropbar;this.dropbar=t&&(ct(t,this.$el)||Se("+ .uk-navbar-dropbar",this.$el)||Se("<div></div>")),this.dropbar&&(_e(this.dropbar,"uk-navbar-dropbar"),"slide"===this.dropbarMode&&_e(this.dropbar,"uk-navbar-dropbar-slide"))},disconnected:function(){this.dropbar&&we(this.dropbar)},update:function(){var t=this;this.$create("drop",this.dropdowns.filter(function(e){return!t.getDropdown(e)}),X({},this.$props,{boundary:this.boundary,pos:this.pos,offset:this.dropbar||this.offset}))},events:[{name:"mouseover",delegate:function(){return this.dropdown},handler:function(t){var e=t.current,n=this.getActive();n&&n.toggle&&!It(n.toggle.$el,e)&&!n.tracker.movesTo(n.$el)&&n.hide(!1)}},{name:"mouseleave",el:function(){return this.dropbar},handler:function(){var t=this.getActive();t&&!bt(this.dropbar,":hover")&&t.hide()}},{name:"beforeshow",capture:!0,filter:function(){return this.dropbar},handler:function(){this.dropbar.parentNode||ve(this.dropbarAnchor||this.$el,this.dropbar)}},{name:"show",capture:!0,filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=e.dir;this.clsDrop&&_e(n,this.clsDrop+"-dropbar"),"bottom"===i&&this.transitionTo(n.offsetHeight+z(Re(n,"marginTop"))+z(Re(n,"marginBottom")),n)}},{name:"beforehide",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=this.getActive();bt(this.dropbar,":hover")&&i&&i.$el===n&&t.preventDefault()}},{name:"hide",filter:function(){return this.dropbar},handler:function(t,e){var n=e.$el,i=this.getActive();(!i||i&&i.$el===n)&&this.transitionTo(0)}}],methods:{getActive:function(){var t=this.dropdowns.map(this.getDropdown).filter(function(t){return t&&t.isActive()})[0];return t&&x(t.mode,"hover")&&It(t.toggle.$el,this.$el)&&t},transitionTo:function(t,e){var n=this,i=this.dropbar,r=Et(i)?sn(i):0;return Re(e=r<t&&e,"clip","rect(0,"+e.offsetWidth+"px,"+r+"px,0)"),sn(i,r),Ze.cancel([e,i]),Wt.all([Ze.start(i,{height:t},this.duration),Ze.start(e,{clip:"rect(0,"+e.offsetWidth+"px,"+t+"px,0)"},this.duration)]).catch(tt).then(function(){Re(e,{clip:""}),n.$update(i)})},getDropdown:function(t){return this.$getComponent(t,"drop")||this.$getComponent(t,"dropdown")}}},Yi={mixins:[zi],args:"mode",props:{mode:String,flip:Boolean,overlay:Boolean},data:{mode:"slide",flip:!1,overlay:!1,clsPage:"uk-offcanvas-page",clsContainer:"uk-offcanvas-container",selPanel:".uk-offcanvas-bar",clsFlip:"uk-offcanvas-flip",clsContainerAnimation:"uk-offcanvas-container-animation",clsSidebarAnimation:"uk-offcanvas-bar-animation",clsMode:"uk-offcanvas",clsOverlay:"uk-offcanvas-overlay",selClose:".uk-offcanvas-close"},computed:{clsFlip:function(t){var e=t.flip,n=t.clsFlip;return e?n:""},clsOverlay:function(t){var e=t.overlay,n=t.clsOverlay;return e?n:""},clsMode:function(t){var e=t.mode;return t.clsMode+"-"+e},clsSidebarAnimation:function(t){var e=t.mode,n=t.clsSidebarAnimation;return"none"===e||"reveal"===e?"":n},clsContainerAnimation:function(t){var e=t.mode,n=t.clsContainerAnimation;return"push"!==e&&"reveal"!==e?"":n},transitionElement:function(t){return"reveal"===t.mode?this.panel.parentNode:this.panel}},events:[{name:"click",delegate:function(){return'a[href^="#"]'},handler:function(t){var e=t.current;e.hash&&Se(e.hash,document.body)&&this.hide()}},{name:"touchstart",passive:!0,el:function(){return this.panel},handler:function(t){var e=t.targetTouches;1===e.length&&(this.clientY=e[0].clientY)}},{name:"touchmove",self:!0,passive:!1,filter:function(){return this.overlay},handler:function(t){t.preventDefault()}},{name:"touchmove",passive:!1,el:function(){return this.panel},handler:function(t){if(1===t.targetTouches.length){var e=event.targetTouches[0].clientY-this.clientY,n=this.panel,i=n.scrollTop,r=n.scrollHeight,o=n.clientHeight;(r<=o||0===i&&0<e||r-i<=o&&e<0)&&t.preventDefault()}}},{name:"show",self:!0,handler:function(){"reveal"!==this.mode||Ne(this.panel.parentNode,this.clsMode)||(ye(this.panel,"<div>"),_e(this.panel.parentNode,this.clsMode)),Re(document.documentElement,"overflowY",this.overlay?"hidden":""),_e(document.body,this.clsContainer,this.clsFlip),Re(this.$el,"display","block"),_e(this.$el,this.clsOverlay),_e(this.panel,this.clsSidebarAnimation,"reveal"!==this.mode?this.clsMode:""),sn(document.body),_e(document.body,this.clsContainerAnimation),this.clsContainerAnimation&&(Zi().content+=",user-scalable=0")}},{name:"hide",self:!0,handler:function(){Be(document.body,this.clsContainerAnimation);var t=this.getActive();("none"===this.mode||t&&t!==this&&t!==this.prev)&&Ft(this.panel,"transitionend")}},{name:"hidden",self:!0,handler:function(){var t;this.clsContainerAnimation&&((t=Zi()).content=t.content.replace(/,user-scalable=0$/,"")),"reveal"===this.mode&&xe(this.panel),Be(this.panel,this.clsSidebarAnimation,this.clsMode),Be(this.$el,this.clsOverlay),Re(this.$el,"display",""),Be(document.body,this.clsContainer,this.clsFlip),Re(document.documentElement,"overflowY","")}},{name:"swipeLeft swipeRight",handler:function(t){this.isToggled()&&v(t.type,"Left")^this.flip&&this.hide()}}]};function Zi(){return Se('meta[name="viewport"]',document.head)||pe(document.head,'<meta name="viewport">')}var Xi={mixins:[Un],props:{selContainer:String,selContent:String},data:{selContainer:".uk-modal",selContent:".uk-modal-dialog"},computed:{container:function(t,e){return Ct(e,t.selContainer)},content:function(t,e){return Ct(e,t.selContent)}},connected:function(){Re(this.$el,"minHeight",150)},update:{read:function(){return!(!this.content||!this.container)&&{current:z(Re(this.$el,"maxHeight")),max:Math.max(150,sn(this.container)-(nn(this.content).height-sn(this.$el)))}},write:function(t){var e=t.current,n=t.max;Re(this.$el,"maxHeight",n),Math.round(e)!==Math.round(n)&&Ft(this.$el,"resize")},events:["resize"]}},Ji={props:["width","height"],connected:function(){_e(this.$el,"uk-responsive-width")},update:{read:function(){return!!(Et(this.$el)&&this.width&&this.height)&&{width:an(this.$el.parentNode),height:this.height}},write:function(t){sn(this.$el,it.contain({height:this.height,width:this.width},t).height)},events:["resize"]}},Gi={props:{duration:Number,offset:Number},data:{duration:1e3,offset:0},methods:{scrollTo:function(t){var e=this;t=t&&Se(t)||document.body;var n=sn(document),i=sn(window),r=nn(t).top-this.offset;if(n<r+i&&(r=n-i),Ft(this.$el,"beforescroll",[this,t])){var o=Date.now(),s=window.pageYOffset,a=function(){var n=s+(r-s)*function(t){return.5*(1-Math.cos(Math.PI*t))}(Q((Date.now()-o)/e.duration));vn(window,n),n!==r?requestAnimationFrame(a):Ft(e.$el,"scrolled",[e,t])};a()}}},events:{click:function(t){t.defaultPrevented||(t.preventDefault(),this.scrollTo(At(decodeURIComponent(this.$el.hash)).substr(1)))}}},Ki={args:"cls",props:{cls:String,target:String,hidden:Boolean,offsetTop:Number,offsetLeft:Number,repeat:Boolean,delay:Number},data:function(){return{cls:!1,target:!1,hidden:!0,offsetTop:0,offsetLeft:0,repeat:!1,delay:0,inViewClass:"uk-scrollspy-inview"}},computed:{elements:function(t,e){var n=t.target;return n?Le(n,e):[e]}},update:[{write:function(){this.hidden&&Re(Mt(this.elements,":not(."+this.inViewClass+")"),"visibility","hidden")}},{read:function(t){var e=this;t.update&&this.elements.forEach(function(t){var n=t._ukScrollspyState;n||(n={cls:at(t,"uk-scrollspy-class")||e.cls}),n.show=pn(t,e.offsetTop,e.offsetLeft),t._ukScrollspyState=n})},write:function(t){var e=this;if(!t.update)return this.$emit(),t.update=!0;this.elements.forEach(function(n){var i=n._ukScrollspyState,r=i.cls;if(!i.show||i.inview||i.queued){if(!i.show&&(i.inview||i.queued)&&e.repeat){if(i.abort&&i.abort(),!i.inview)return;Re(n,"visibility",e.hidden?"hidden":""),Be(n,e.inViewClass),$e(n,r),Ft(n,"outview"),e.$update(n),i.inview=!1}}else{var o=function(){Re(n,"visibility",""),_e(n,e.inViewClass),$e(n,r),Ft(n,"inview"),e.$update(n),i.inview=!0,i.abort&&i.abort()};e.delay?(i.queued=!0,t.promise=(t.promise||Wt.resolve()).then(function(){return!i.inview&&new Wt(function(n){var r=setTimeout(function(){o(),n()},t.promise||1===e.elements.length?e.delay:0);i.abort=function(){clearTimeout(r),n(),i.queued=!1}})})):o()}})},events:["scroll","resize"]}]},Qi={props:{cls:String,closest:String,scroll:Boolean,overflow:Boolean,offset:Number},data:{cls:"uk-active",closest:!1,scroll:!1,overflow:!0,offset:0},computed:{links:function(t,e){return Le('a[href^="#"]',e).filter(function(t){return t.hash})},elements:function(t){var e=t.closest;return Ct(this.links,e||"*")},targets:function(){return Le(this.links.map(function(t){return At(t.hash).substr(1)}).join(","))}},update:[{read:function(){this.scroll&&this.$create("scroll",this.links,{offset:this.offset||0})}},{read:function(t){var e=this,n=window.pageYOffset+this.offset+1,i=sn(document)-sn(window)+this.offset;t.active=!1,this.targets.every(function(r,o){var s=nn(r).top,a=o+1===e.targets.length;if(!e.overflow&&(0===o&&n<s||a&&s+r.offsetTop<n))return!1;if(!a&&nn(e.targets[o+1]).top<=n)return!0;if(i<=n)for(var c=e.targets.length-1;o<c;c--)if(pn(e.targets[c])){r=e.targets[c];break}return!(t.active=Se(Mt(e.links,'[href="#'+r.id+'"]')))})},write:function(t){var e=t.active;this.links.forEach(function(t){return t.blur()}),Be(this.elements,this.cls),e&&Ft(this.$el,"active",[e,_e(this.closest?Ct(e,this.closest):e,this.cls)])},events:["scroll","resize"]}]},tr={mixins:[Un,Ri],props:{top:null,bottom:Boolean,offset:Number,animation:String,clsActive:String,clsInactive:String,clsFixed:String,clsBelow:String,selTarget:String,widthElement:Boolean,showOnUp:Boolean,targetOffset:Number},data:{top:0,bottom:!1,offset:0,animation:"",clsActive:"uk-active",clsInactive:"",clsFixed:"uk-sticky-fixed",clsBelow:"uk-sticky-below",selTarget:"",widthElement:!1,showOnUp:!1,targetOffset:!1},computed:{selTarget:function(t,e){var n=t.selTarget;return n&&Se(n,e)||e},widthElement:function(t,e){return ct(t.widthElement,e)||this.placeholder},isActive:{get:function(){return Ne(this.selTarget,this.clsActive)},set:function(t){t&&!this.isActive?(Ie(this.selTarget,this.clsInactive,this.clsActive),Ft(this.$el,"active")):t||Ne(this.selTarget,this.clsInactive)||(Ie(this.selTarget,this.clsActive,this.clsInactive),Ft(this.$el,"inactive"))}}},connected:function(){this.placeholder=Se("+ .uk-sticky-placeholder",this.$el)||Se('<div class="uk-sticky-placeholder"></div>'),this.isFixed=!1,this.isActive=!1},disconnected:function(){this.isFixed&&(this.hide(),Be(this.selTarget,this.clsInactive)),we(this.placeholder),this.placeholder=null,this.widthElement=null},events:[{name:"load hashchange popstate",el:window,handler:function(){var t=this;if(!1!==this.targetOffset&&location.hash&&0<window.pageYOffset){var e=Se(location.hash);e&&Cn.read(function(){var n=nn(e).top,i=nn(t.$el).top,r=t.$el.offsetHeight;t.isFixed&&n<=i+r&&i<=n+e.offsetHeight&&vn(window,n-r-(D(t.targetOffset)?t.targetOffset:0)-t.offset)})}}}],update:[{read:function(t,e){var n=t.height;this.isActive&&"update"!==e&&(this.hide(),n=this.$el.offsetHeight,this.show()),n=this.isActive?n:this.$el.offsetHeight,this.topOffset=nn(this.isFixed?this.placeholder:this.$el).top,this.bottomOffset=this.topOffset+n;var i=er("bottom",this);return this.top=Math.max(z(er("top",this)),this.topOffset)-this.offset,this.bottom=i&&i-n,this.inactive=!this.matchMedia,{lastScroll:!1,height:n,margins:Re(this.$el,["marginTop","marginBottom","marginLeft","marginRight"])}},write:function(t){var e=t.height,n=t.margins,i=this.placeholder;Re(i,X({height:e},n)),It(i,document)||(ve(this.$el,i),rt(i,"hidden","")),this.isActive=this.isActive},events:["resize"]},{read:function(t){var e=t.scroll;return void 0===e&&(e=0),this.width=(Et(this.widthElement)?this.widthElement:this.$el).offsetWidth,this.scroll=window.pageYOffset,{dir:e<=this.scroll?"down":"up",scroll:this.scroll,visible:Et(this.$el),top:mn(this.placeholder)[0]}},write:function(t,e){var n=this,i=t.initTimestamp;void 0===i&&(i=0);var r=t.dir,o=t.lastDir,s=t.lastScroll,a=t.scroll,c=t.top,u=t.visible,l=performance.now();if(!((t.lastScroll=a)<0||a===s||!u||this.disabled||this.showOnUp&&"scroll"!==e||((300<l-i||r!==o)&&(t.initScroll=a,t.initTimestamp=l),t.lastDir=r,this.showOnUp&&Math.abs(t.initScroll-a)<=30&&Math.abs(s-a)<=10)))if(this.inactive||a<this.top||this.showOnUp&&(a<=this.top||"down"===r||"up"===r&&!this.isFixed&&a<=this.bottomOffset)){if(!this.isFixed)return void(Qe.inProgress(this.$el)&&a<c&&(Qe.cancel(this.$el),this.hide()));this.isFixed=!1,this.animation&&a>this.topOffset?(Qe.cancel(this.$el),Qe.out(this.$el,this.animation).then(function(){return n.hide()},tt)):this.hide()}else this.isFixed?this.update():this.animation?(Qe.cancel(this.$el),this.show(),Qe.in(this.$el,this.animation).catch(tt)):this.show()},events:["resize","scroll"]}],methods:{show:function(){this.isFixed=!0,this.update(),rt(this.placeholder,"hidden",null)},hide:function(){this.isActive=!1,Be(this.$el,this.clsFixed,this.clsBelow),Re(this.$el,{position:"",top:"",width:""}),rt(this.placeholder,"hidden","")},update:function(){var t=0!==this.top||this.scroll>this.top,e=Math.max(0,this.offset);this.bottom&&this.scroll>this.bottom-this.offset&&(e=this.bottom-this.scroll),Re(this.$el,{position:"fixed",top:e+"px",width:this.width}),this.isActive=t,$e(this.$el,this.clsBelow,this.scroll>this.bottomOffset),_e(this.$el,this.clsFixed)}}};function er(t,e){var n=e.$props,i=e.$el,r=e[t+"Offset"],o=n[t];if(o){if(D(o))return r+z(o);if(P(o)&&o.match(/^-?\d+vh$/))return sn(window)*z(o)/100;var s=!0===o?i.parentNode:ct(o,i);return s?nn(s).top+s.offsetHeight:void 0}}var nr,ir={mixins:[Vn],args:"connect",props:{connect:String,toggle:String,active:Number,swiping:Boolean},data:{connect:"~.uk-switcher",toggle:"> * > :first-child",active:0,swiping:!0,cls:"uk-active",clsContainer:"uk-switcher",attrItem:"uk-switcher-item",queued:!0},computed:{connects:function(t,e){return ut(t.connect,e)},toggles:function(t,e){return Le(t.toggle,e)}},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault(),this.show(W(this.$el.children).filter(function(e){return It(t.current,e)})[0])}},{name:"click",el:function(){return this.connects},delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.show(at(t.current,this.attrItem))}},{name:"swipeRight swipeLeft",filter:function(){return this.swiping},el:function(){return this.connects},handler:function(t){var e=t.type;this.show(v(e,"Left")?"next":"previous")}}],update:function(){var t=this;this.connects.forEach(function(e){return t.updateAria(e.children)});var e=this.$el.children;this.show(Mt(e,"."+this.cls)[0]||e[this.active]||e[0])},methods:{index:function(){return!O(this.connects)&&le(Mt(this.connects[0].children,"."+this.cls)[0])},show:function(t){for(var e,n,i=this,r=this.$el.children,o=r.length,s=this.index(),a=0<=s,c="previous"===t?-1:1,u=he(t,r,s),l=0;l<o;l++,u=(u+c+o)%o)if(!bt(this.toggles[u],".uk-disabled *, .uk-disabled, [disabled]")){e=this.toggles[u],n=r[u];break}!n||0<=s&&Ne(n,this.cls)||s===u||(Be(r,this.cls),_e(n,this.cls),rt(this.toggles,"aria-expanded",!1),rt(e,"aria-expanded",!0),this.connects.forEach(function(t){a?i.toggleElement([t.children[s],t.children[u]]):i.toggleNow(t.children[u])}))}}},rr={mixins:[Un],extends:ir,props:{media:Boolean},data:{media:960,attrItem:"uk-tab-item"},connected:function(){var t=Ne(this.$el,"uk-tab-left")?"uk-tab-left":!!Ne(this.$el,"uk-tab-right")&&"uk-tab-right";t&&this.$create("toggle",this.$el,{cls:t,mode:"media",media:this.media})}},or={mixins:[Ri,Vn],args:"target",props:{href:String,target:null,mode:"list"},data:{href:!1,target:!1,mode:"click",queued:!0},computed:{target:function(t,e){var n=t.href,i=t.target;return(i=ut(i||n,e)).length&&i||[e]}},connected:function(){Ft(this.target,"updatearia",[this])},events:[{name:se+" "+ae,filter:function(){return x(this.mode,"hover")},handler:function(t){zt(t)||this.toggle("toggle"+(t.type===se?"show":"hide"))}},{name:"click",filter:function(){return x(this.mode,"click")||ne&&x(this.mode,"hover")},handler:function(t){var e;(Ct(t.target,'a[href="#"], a[href=""]')||(e=Ct(t.target,"a[href]"))&&(this.cls||!Et(this.target)||e.hash&&bt(this.target,e.hash)))&&t.preventDefault(),this.toggle()}}],update:{read:function(){return!(!x(this.mode,"media")||!this.media)&&{match:this.matchMedia}},write:function(t){var e=t.match,n=this.isToggled(this.target);(e?!n:n)&&this.toggle()},events:["resize"]},methods:{toggle:function(t){Ft(this.target,t||"toggle",[this])&&this.toggleElement(this.target)}}};zn.version="3.1.4",(nr=zn).component("accordion",Yn),nr.component("alert",Zn),nr.component("cover",Jn),nr.component("drop",Kn),nr.component("dropdown",Qn),nr.component("formCustom",ti),nr.component("gif",ei),nr.component("grid",oi),nr.component("heightMatch",ai),nr.component("heightViewport",li),nr.component("icon",bi),nr.component("img",Si),nr.component("leader",ji),nr.component("margin",ni),nr.component("modal",Wi),nr.component("nav",Ui),nr.component("navbar",Vi),nr.component("offcanvas",Yi),nr.component("overflowAuto",Xi),nr.component("responsive",Ji),nr.component("scroll",Gi),nr.component("scrollspy",Ki),nr.component("scrollspyNav",Qi),nr.component("sticky",tr),nr.component("svg",fi),nr.component("switcher",ir),nr.component("tab",rr),nr.component("toggle",or),nr.component("video",Xn),nr.component("close",Ti),nr.component("marker",xi),nr.component("navbarToggleIcon",xi),nr.component("overlayIcon",xi),nr.component("paginationNext",xi),nr.component("paginationPrevious",xi),nr.component("searchIcon",ki),nr.component("slidenavNext",Ci),nr.component("slidenavPrevious",Ci),nr.component("spinner",Ai),nr.component("totop",xi),nr.use(function(t){var e;ue(function(){var e;t.update(),Nt(window,"load resize",function(){return t.update(null,"resize")}),Nt(document,"loadedmetadata load",function(e){var n=e.target;return t.update(n,"resize")},!0),Nt(window,"scroll",function(n){if(!e){e=!0,Cn.write(function(){return e=!1});var i=n.target;t.update(1!==i.nodeType?document.body:i,n.type)}},{passive:!0,capture:!0});var n=0;Nt(document,"animationstart",function(t){var e=t.target;(Re(e,"animationName")||"").match(/^uk-.*(left|right)/)&&(n++,Re(document.body,"overflowX","hidden"),setTimeout(function(){--n||Re(document.body,"overflowX","")},V(Re(e,"animationDuration"))+100))},!0)}),Nt(document,ie,function(t){if(e&&e(),zt(t)){var n=qt(t),i="tagName"in t.target?t.target:t.target.parentNode;e=Pt(document,oe,function(t){var e=qt(t),r=e.x,o=e.y;(i&&r&&100<Math.abs(n.x-r)||o&&100<Math.abs(n.y-o))&&setTimeout(function(){Ft(i,"swipe"),Ft(i,"swipe"+function(t,e,n,i){return Math.abs(t-n)>=Math.abs(e-i)?0<t-n?"Left":"Right":0<e-i?"Up":"Down"}(n.x,n.y,r,o))})})}},{passive:!0})});var sr,ar={mixins:[Un],props:{date:String,clsWrapper:String},data:{date:"",clsWrapper:".uk-countdown-%unit%"},computed:{date:function(t){var e=t.date;return Date.parse(e)},days:function(t,e){return Se(t.clsWrapper.replace("%unit%","days"),e)},hours:function(t,e){return Se(t.clsWrapper.replace("%unit%","hours"),e)},minutes:function(t,e){return Se(t.clsWrapper.replace("%unit%","minutes"),e)},seconds:function(t,e){return Se(t.clsWrapper.replace("%unit%","seconds"),e)},units:function(){var t=this;return["days","hours","minutes","seconds"].filter(function(e){return t[e]})}},connected:function(){this.start()},disconnected:function(){var t=this;this.stop(),this.units.forEach(function(e){return fe(t[e])})},events:[{name:"visibilitychange",el:document,handler:function(){document.hidden?this.stop():this.start()}}],update:{write:function(){var t,e,n=this,i=(t=this.date,{total:e=t-Date.now(),seconds:e/1e3%60,minutes:e/1e3/60%60,hours:e/1e3/60/60%24,days:e/1e3/60/60/24});i.total<=0&&(this.stop(),i.days=i.hours=i.minutes=i.seconds=0),this.units.forEach(function(t){var e=String(Math.floor(i[t]));e=e.length<2?"0"+e:e;var r=n[t];r.textContent!==e&&((e=e.split("")).length!==r.children.length&&de(r,e.map(function(){return"<span></span>"}).join("")),e.forEach(function(t,e){return r.children[e].textContent=t}))})}},methods:{start:function(){var t=this;this.stop(),this.date&&this.units.length&&(this.$emit(),this.timer=setInterval(function(){return t.$emit()},1e3))},stop:function(){this.timer&&(clearInterval(this.timer),this.timer=null)}}},cr="uk-animation-target",ur={props:{animation:Number},data:{animation:150},computed:{target:function(){return this.$el}},methods:{animate:function(t){var e=this;sr||(sr=pe(document.head,"<style>").sheet).insertRule("."+cr+" > * {\n            margin-top: 0 !important;\n            transform: none !important;\n        }",0);var n=W(this.target.children),i=n.map(function(t){return lr(t,!0)}),r=sn(this.target),o=window.pageYOffset;t(),Ze.cancel(this.target),n.forEach(Ze.cancel),hr(this.target),this.$update(this.target),Cn.flush();var s=sn(this.target),a=(n=n.concat(W(this.target.children).filter(function(t){return!x(n,t)}))).map(function(t,e){return!!(t.parentNode&&e in i)&&(i[e]?Et(t)?fr(t):{opacity:0}:{opacity:Et(t)?1:0})});return i=a.map(function(t,r){var o=n[r].parentNode===e.target&&(i[r]||lr(n[r]));return o&&(t?"opacity"in t||(o.opacity%1?t.opacity=1:delete o.opacity):delete o.opacity),o}),_e(this.target,cr),n.forEach(function(t,e){return i[e]&&Re(t,i[e])}),Re(this.target,"height",r),vn(window,o),Wt.all(n.map(function(t,n){return i[n]&&a[n]?Ze.start(t,a[n],e.animation,"ease"):Wt.resolve()}).concat(Ze.start(this.target,{height:s},this.animation,"ease"))).then(function(){n.forEach(function(t,e){return Re(t,{display:0===a[e].opacity?"none":"",zIndex:""})}),hr(e.target),e.$update(e.target),Cn.flush()},tt)}}};function lr(t,e){var n=Re(t,"zIndex");return!!Et(t)&&X({display:"",opacity:e?Re(t,"opacity"):"0",pointerEvents:"none",position:"absolute",zIndex:"auto"===n?le(t):n},fr(t))}function hr(t){Re(t.children,{height:"",left:"",opacity:"",pointerEvents:"",position:"",top:"",width:""}),Be(t,cr),Re(t,"height","")}function fr(t){var e=t.getBoundingClientRect(),n=e.height,i=e.width,r=on(t),o=r.top,s=r.left;return{top:o+=z(Re(t,"marginTop")),left:s,height:n,width:i}}var dr={mixins:[ur],args:"target",props:{target:Boolean,selActive:Boolean},data:{target:null,selActive:!1,attrItem:"uk-filter-control",cls:"uk-active",animation:250},computed:{toggles:{get:function(t,e){return t.attrItem,Le("["+this.attrItem+"],[data-"+this.attrItem+"]",e)},watch:function(){this.updateState()}},target:function(t,e){return Se(t.target,e)},children:{get:function(){return W(this.target.children)},watch:function(t,e){(function(t,e){return t.length===e.length&&t.every(function(t){return~e.indexOf(t)})})(t,e)||this.updateState()}}},events:[{name:"click",delegate:function(){return"["+this.attrItem+"],[data-"+this.attrItem+"]"},handler:function(t){t.preventDefault(),this.apply(t.current)}}],connected:function(){var t=this;if(this.updateState(),!1!==this.selActive){var e=Le(this.selActive,this.$el);this.toggles.forEach(function(n){return $e(n,t.cls,x(e,n))})}},methods:{apply:function(t){this.setState(gr(t,this.attrItem,this.getState()))},getState:function(){var t=this;return this.toggles.filter(function(e){return Ne(e,t.cls)}).reduce(function(e,n){return gr(n,t.attrItem,e)},{filter:{"":""},sort:[]})},setState:function(t,e){var n=this;void 0===e&&(e=!0),t=X({filter:{"":""},sort:[]},t),Ft(this.$el,"beforeFilter",[this,t]);var i=this.children;this.toggles.forEach(function(e){return $e(e,n.cls,!!function(t,e,n){var i=n.filter;void 0===i&&(i={"":""});var r=n.sort,o=r[0],s=r[1],a=pr(t,e),c=a.filter;void 0===c&&(c="");var u=a.group;void 0===u&&(u="");var l=a.sort,h=a.order;return void 0===h&&(h="asc"),R(l)?u in i&&c===i[u]||!c&&u&&!(u in i)&&!i[""]:o===l&&s===h}(e,n.attrItem,t))});var r=function(){var e=function(t){var e=t.filter,n="";return J(e,function(t){return n+=t||""}),n}(t);i.forEach(function(t){return Re(t,"display",e&&!bt(t,e)?"none":"")});var r=t.sort,o=r[0],s=r[1];if(o){var a=function(t,e,n){return X([],t).sort(function(t,i){return at(t,e).localeCompare(at(i,e),void 0,{numeric:!0})*("asc"===n||-1)})}(i,o,s);Y(a,i)||a.forEach(function(t){return pe(n.target,t)})}};e?this.animate(r).then(function(){return Ft(n.$el,"afterFilter",[n])}):(r(),Ft(this.$el,"afterFilter",[this]))},updateState:function(){var t=this;Cn.write(function(){return t.setState(t.getState(),!1)})}}};function pr(t,e){return In(at(t,e),["filter"])}function gr(t,e,n){var i=pr(t,e),r=i.filter,o=i.group,s=i.sort,a=i.order;return void 0===a&&(a="asc"),(r||R(s))&&(o?r?(delete n.filter[""],n.filter[o]=r):(delete n.filter[o],(O(n.filter)||""in n.filter)&&(n.filter={"":r||""})):n.filter={"":r||""}),R(s)||(n.sort=[s,a]),n}var vr={slide:{show:function(t){return[{transform:wr(-100*t)},{transform:wr()}]},percent:function(t){return mr(t)},translate:function(t,e){return[{transform:wr(-100*e*t)},{transform:wr(100*e*(1-t))}]}}};function mr(t){return Math.abs(Re(t,"transform").split(",")[4]/t.offsetWidth)||0}function wr(t,e){return void 0===t&&(t=0),void 0===e&&(e="%"),"translateX("+t+(t?e:"")+")"}function yr(t){return"scale3d("+t+", "+t+", 1)"}var br=X({},vr,{fade:{show:function(){return[{opacity:0},{opacity:1}]},percent:function(t){return 1-Re(t,"opacity")},translate:function(t){return[{opacity:1-t},{opacity:t}]}},scale:{show:function(){return[{opacity:0,transform:yr(.8)},{opacity:1,transform:yr(1)}]},percent:function(t){return 1-Re(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:yr(1-.2*t)},{opacity:t,transform:yr(.8+.2*t)}]}}});function xr(t,e,n){Ft(t,Dt(e,!1,!1,n))}var Cr={mixins:[{props:{autoplay:Boolean,autoplayInterval:Number,pauseOnHover:Boolean},data:{autoplay:!1,autoplayInterval:7e3,pauseOnHover:!0},connected:function(){this.autoplay&&this.startAutoplay()},disconnected:function(){this.stopAutoplay()},update:function(){rt(this.slides,"tabindex","-1")},events:[{name:"visibilitychange",el:document,filter:function(){return this.autoplay},handler:function(){document.hidden?this.stopAutoplay():this.startAutoplay()}},{name:"mouseenter",filter:function(){return this.autoplay&&this.pauseOnHover},handler:function(){this.isHovering=!0}},{name:"mouseleave",filter:function(){return this.autoplay&&this.pauseOnHover},handler:function(){this.isHovering=!1}}],methods:{startAutoplay:function(){var t=this;this.stopAutoplay(),this.interval=setInterval(function(){return!It(document.activeElement,t.$el)&&!t.isHovering&&!t.stack.length&&t.show("next")},this.autoplayInterval)},stopAutoplay:function(){this.interval&&clearInterval(this.interval)}}},{props:{draggable:Boolean},data:{draggable:!0,threshold:10},created:function(){var t=this;["start","move","end"].forEach(function(e){var n=t[e];t[e]=function(e){var i=qt(e).x*(Qt?-1:1);t.prevPos=i!==t.pos?t.pos:t.prevPos,t.pos=i,n(e)}})},events:[{name:ie,delegate:function(){return this.selSlides},handler:function(t){!this.draggable||!zt(t)&&function(t){return!t.children.length&&t.childNodes.length}(t.target)||0<t.button||this.length<2||this.start(t)}},{name:"touchmove",passive:!1,handler:"move",delegate:function(){return this.selSlides}},{name:"dragstart",handler:function(t){t.preventDefault()}}],methods:{start:function(){var t=this;this.drag=this.pos,this._transitioner?(this.percent=this._transitioner.percent(),this.drag+=this._transitioner.getDistance()*this.percent*this.dir,this._transitioner.cancel(),this._transitioner.translate(this.percent),this.dragging=!0,this.stack=[]):this.prevIndex=this.index;var e="touchmove"!=re?Nt(document,re,this.move,{passive:!1}):tt;this.unbindMove=function(){e(),t.unbindMove=null},Nt(window,"scroll",this.unbindMove),Nt(document,oe,this.end,!0),Re(this.list,"userSelect","none")},move:function(t){var e=this;if(this.unbindMove){var n=this.pos-this.drag;if(!(0==n||this.prevPos===this.pos||!this.dragging&&Math.abs(n)<this.threshold)){Re(this.list,"pointerEvents","none"),t.cancelable&&t.preventDefault(),this.dragging=!0,this.dir=n<0?1:-1;for(var i=this.slides,r=this.prevIndex,o=Math.abs(n),s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||i[r].offsetWidth;s!==r&&a<o;)this.drag-=a*this.dir,r=s,o-=a,s=this.getIndex(r+this.dir,r),a=this._getDistance(r,s)||i[r].offsetWidth;this.percent=o/a;var c,u=i[r],l=i[s],h=this.index!==s,f=r===s;[this.index,this.prevIndex].filter(function(t){return!x([s,r],t)}).forEach(function(t){Ft(i[t],"itemhidden",[e]),f&&(c=!0,e.prevIndex=r)}),(this.index===r&&this.prevIndex!==r||c)&&Ft(i[this.index],"itemshown",[this]),h&&(this.prevIndex=r,this.index=s,!f&&Ft(u,"beforeitemhide",[this]),Ft(l,"beforeitemshow",[this])),this._transitioner=this._translate(Math.abs(this.percent),u,!f&&l),h&&(!f&&Ft(u,"itemhide",[this]),Ft(l,"itemshow",[this]))}}},end:function(){if($t(window,"scroll",this.unbindMove),this.unbindMove&&this.unbindMove(),$t(document,oe,this.end,!0),this.dragging)if(this.dragging=null,this.index===this.prevIndex)this.percent=1-this.percent,this.dir*=-1,this._show(!1,this.index,!0),this._transitioner=null;else{var t=(Qt?this.dir*(Qt?1:-1):this.dir)<0==this.prevPos>this.pos;this.index=t?this.index:this.prevIndex,t&&(this.percent=1-this.percent),this.show(0<this.dir&&!t||this.dir<0&&t?"next":"previous",!0)}Re(this.list,{userSelect:"",pointerEvents:""}),this.drag=this.percent=null}}},{data:{selNav:!1},computed:{nav:function(t,e){return Se(t.selNav,e)},selNavItem:function(t){var e=t.attrItem;return"["+e+"],[data-"+e+"]"},navItems:function(t,e){return Le(this.selNavItem,e)}},update:{write:function(){var t=this;this.nav&&this.length!==this.nav.children.length&&de(this.nav,this.slides.map(function(e,n){return"<li "+t.attrItem+'="'+n+'"><a href="#"></a></li>'}).join("")),$e(Le(this.selNavItem,this.$el).concat(this.nav),"uk-hidden",!this.maxIndex),this.updateNav()},events:["resize"]},events:[{name:"click",delegate:function(){return this.selNavItem},handler:function(t){t.preventDefault(),this.show(at(t.current,this.attrItem))}},{name:"itemshow",handler:"updateNav"}],methods:{updateNav:function(){var t=this,e=this.getValidIndex();this.navItems.forEach(function(n){var i=at(n,t.attrItem);$e(n,t.clsActive,H(i)===e),$e(n,"uk-invisible",t.finite&&("previous"===i&&0===e||"next"===i&&e>=t.maxIndex))})}}}],props:{clsActivated:Boolean,easing:String,index:Number,finite:Boolean,velocity:Number},data:function(){return{easing:"ease",finite:!1,velocity:1,index:0,stack:[],percent:0,clsActive:"uk-active",clsActivated:!1,Transitioner:!1,transitionOptions:{}}},computed:{duration:function(t,e){var n=t.velocity;return kr(e.offsetWidth/n)},length:function(){return this.slides.length},list:function(t,e){return Se(t.selList,e)},maxIndex:function(){return this.length-1},selSlides:function(t){return t.selList+" > *"},slides:function(){return W(this.list.children)}},events:{itemshown:function(){this.$update(this.list)}},methods:{show:function(t,e){var n=this;if(void 0===e&&(e=!1),!this.dragging&&this.length){var i=this.stack,r=e?0:i.length,o=function(){i.splice(r,1),i.length&&n.show(i.shift(),!0)};if(i[e?"unshift":"push"](t),!e&&1<i.length)2===i.length&&this._transitioner.forward(Math.min(this.duration,200));else{var s=this.index,a=Ne(this.slides,this.clsActive)&&this.slides[s],c=this.getIndex(t,this.index),u=this.slides[c];if(a!==u){if(this.dir=function(t,e){return"next"===t?1:"previous"===t?-1:t<e?-1:1}(t,s),this.prevIndex=s,this.index=c,a&&Ft(a,"beforeitemhide",[this]),!Ft(u,"beforeitemshow",[this,a]))return this.index=this.prevIndex,void o();var l=this._show(a,u,e).then(function(){return a&&Ft(a,"itemhidden",[n]),Ft(u,"itemshown",[n]),new Wt(function(t){Cn.write(function(){i.shift(),i.length?n.show(i.shift(),!0):n._transitioner=null,t()})})});return a&&Ft(a,"itemhide",[this]),Ft(u,"itemshow",[this]),l}o()}}},getIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.index),Q(he(t,this.slides,e,this.finite),0,this.maxIndex)},getValidIndex:function(t,e){return void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),this.getIndex(t,e)},_show:function(t,e,n){if(this._transitioner=this._getTransitioner(t,e,this.dir,X({easing:n?e.offsetWidth<600?"cubic-bezier(0.25, 0.46, 0.45, 0.94)":"cubic-bezier(0.165, 0.84, 0.44, 1)":this.easing},this.transitionOptions)),!n&&!t)return this._transitioner.translate(1),Wt.resolve();var i=this.stack.length;return this._transitioner[1<i?"forward":"show"](1<i?Math.min(this.duration,75+75/(i-1)):this.duration,this.percent)},_getDistance:function(t,e){return new this._getTransitioner(t,t!==e&&e).getDistance()},_translate:function(t,e,n){void 0===e&&(e=this.prevIndex),void 0===n&&(n=this.index);var i=this._getTransitioner(e!==n&&e,n);return i.translate(t),i},_getTransitioner:function(t,e,n,i){return void 0===t&&(t=this.prevIndex),void 0===e&&(e=this.index),void 0===n&&(n=this.dir||1),void 0===i&&(i=this.transitionOptions),new this.Transitioner(F(t)?this.slides[t]:t,F(e)?this.slides[e]:e,n*(Qt?-1:1),i)}}};function kr(t){return.5*t+300}var Tr={mixins:[Cr],props:{animation:String},data:{animation:"slide",clsActivated:"uk-transition-active",Animations:vr,Transitioner:function(t,e,n,i){var r=i.animation,o=i.easing,s=r.percent,a=r.translate,c=r.show;void 0===c&&(c=tt);var u=c(n),l=new Ut;return{dir:n,show:function(i,r,s){var a=this;void 0===r&&(r=0);var c=s?"linear":o;return i-=Math.round(i*Q(r,-1,1)),this.translate(r),xr(e,"itemin",{percent:r,duration:i,timing:c,dir:n}),xr(t,"itemout",{percent:1-r,duration:i,timing:c,dir:n}),Wt.all([Ze.start(e,u[1],i,c),Ze.start(t,u[0],i,c)]).then(function(){a.reset(),l.resolve()},tt),l.promise},stop:function(){return Ze.stop([e,t])},cancel:function(){Ze.cancel([e,t])},reset:function(){for(var n in u[0])Re([e,t],n,"")},forward:function(n,i){return void 0===i&&(i=this.percent()),Ze.cancel([e,t]),this.show(n,i,!0)},translate:function(i){this.reset();var r=a(i,n);Re(e,r[1]),Re(t,r[0]),xr(e,"itemtranslatein",{percent:i,dir:n}),xr(t,"itemtranslateout",{percent:1-i,dir:n})},percent:function(){return s(t||e,e,n)},getDistance:function(){return t&&t.offsetWidth}}}},computed:{animation:function(t){var e=t.animation,n=t.Animations;return X(e in n?n[e]:n.slide,{name:e})},transitionOptions:function(){return{animation:this.animation}}},events:{"itemshow itemhide itemshown itemhidden":function(t){var e=t.target;this.$update(e)},itemshow:function(){F(this.prevIndex)&&Cn.flush()},beforeitemshow:function(t){_e(t.target,this.clsActive)},itemshown:function(t){_e(t.target,this.clsActivated)},itemhidden:function(t){Be(t.target,this.clsActive,this.clsActivated)}}},Ar={mixins:[Hi,zi,Vn,Tr],functional:!0,props:{delayControls:Number,preload:Number,videoAutoplay:Boolean,template:String},data:function(){return{preload:1,videoAutoplay:!1,delayControls:3e3,items:[],cls:"uk-open",clsPage:"uk-lightbox-page",selList:".uk-lightbox-items",attrItem:"uk-lightbox-item",selClose:".uk-close-large",pauseOnHover:!1,velocity:2,Animations:br,template:'<div class="uk-lightbox uk-overflow-hidden"> <ul class="uk-lightbox-items"></ul> <div class="uk-lightbox-toolbar uk-position-top uk-text-right uk-transition-slide-top uk-transition-opaque"> <button class="uk-lightbox-toolbar-icon uk-close-large" type="button" uk-close></button> </div> <a class="uk-lightbox-button uk-position-center-left uk-position-medium uk-transition-fade" href="#" uk-slidenav-previous uk-lightbox-item="previous"></a> <a class="uk-lightbox-button uk-position-center-right uk-position-medium uk-transition-fade" href="#" uk-slidenav-next uk-lightbox-item="next"></a> <div class="uk-lightbox-toolbar uk-lightbox-caption uk-position-bottom uk-text-center uk-transition-slide-bottom uk-transition-opaque"></div> </div>'}},created:function(){var t=this;this.$mount(pe(this.container,this.template)),this.caption=Se(".uk-lightbox-caption",this.$el),this.items.forEach(function(){return pe(t.list,"<li></li>")})},events:[{name:re+" "+ie+" keydown",handler:"showControls"},{name:"click",self:!0,delegate:function(){return this.selSlides},handler:function(t){t.defaultPrevented||this.hide()}},{name:"shown",self:!0,handler:function(){this.showControls()}},{name:"hide",self:!0,handler:function(){this.hideControls(),Be(this.slides,this.clsActive),Ze.stop(this.slides)}},{name:"hidden",self:!0,handler:function(){this.$destroy(!0)}},{name:"keyup",el:document,handler:function(t){if(this.isToggled(this.$el))switch(t.keyCode){case 37:this.show("previous");break;case 39:this.show("next")}}},{name:"beforeitemshow",handler:function(t){this.isToggled()||(this.draggable=!1,t.preventDefault(),this.toggleNow(this.$el,!0),this.animation=br.scale,Be(t.target,this.clsActive),this.stack.splice(1,0,this.index))}},{name:"itemshow",handler:function(t){var e=le(t.target),n=this.getItem(e).caption;Re(this.caption,"display",n?"":"none"),de(this.caption,n);for(var i=0;i<=this.preload;i++)this.loadItem(this.getIndex(e+i)),this.loadItem(this.getIndex(e-i))}},{name:"itemshown",handler:function(){this.draggable=this.$props.draggable}},{name:"itemload",handler:function(t,e){var n,i=this,r=e.source,o=e.type,s=e.alt;if(this.setItem(e,"<span uk-spinner></span>"),r)if("image"===o||r.match(/\.(jp(e)?g|png|gif|svg|webp)($|\?)/i))Gt(r).then(function(t){return i.setItem(e,'<img width="'+t.width+'" height="'+t.height+'" src="'+r+'" alt="'+(s||"")+'">')},function(){return i.setError(e)});else if("video"===o||r.match(/\.(mp4|webm|ogv)($|\?)/i)){var a=Se("<video controls playsinline"+(e.poster?' poster="'+e.poster+'"':"")+' uk-video="'+this.videoAutoplay+'"></video>');rt(a,"src",r),Pt(a,"error loadedmetadata",function(t){"error"===t?i.setError(e):(rt(a,{width:a.videoWidth,height:a.videoHeight}),i.setItem(e,a))})}else if("iframe"===o||r.match(/\.(html|php)($|\?)/i))this.setItem(e,'<iframe class="uk-lightbox-iframe" src="'+r+'" frameborder="0" allowfullscreen></iframe>');else if(n=r.match(/\/\/.*?youtube(-nocookie)?\.[a-z]+\/watch\?v=([^&\s]+)/)||r.match(/()youtu\.be\/(.*)/)){var c=n[2],u=function(t,r){return void 0===t&&(t=640),void 0===r&&(r=450),i.setItem(e,Sr("https://www.youtube"+(n[1]||"")+".com/embed/"+c,t,r,i.videoAutoplay))};Gt("https://img.youtube.com/vi/"+c+"/maxresdefault.jpg").then(function(t){var e=t.width,n=t.height;120===e&&90===n?Gt("https://img.youtube.com/vi/"+c+"/0.jpg").then(function(t){var e=t.width,n=t.height;return u(e,n)},u):u(e,n)},u)}else(n=r.match(/(\/\/.*?)vimeo\.[a-z]+\/([0-9]+).*?/))&&Jt("https://vimeo.com/api/oembed.json?maxwidth=1920&url="+encodeURI(r),{responseType:"json",withCredentials:!1}).then(function(t){var r=t.response,o=r.height,s=r.width;return i.setItem(e,Sr("https://player.vimeo.com/video/"+n[2],s,o,i.videoAutoplay))},function(){return i.setError(e)})}}],methods:{loadItem:function(t){void 0===t&&(t=this.index);var e=this.getItem(t);e.content||Ft(this.$el,"itemload",[e])},getItem:function(t){return void 0===t&&(t=this.index),this.items[t]||{}},setItem:function(t,e){X(t,{content:e});var n=de(this.slides[this.items.indexOf(t)],e);Ft(this.$el,"itemloaded",[this,n]),this.$update(n)},setError:function(t){this.setItem(t,'<span uk-icon="icon: bolt; ratio: 2"></span>')},showControls:function(){clearTimeout(this.controlsTimer),this.controlsTimer=setTimeout(this.hideControls,this.delayControls),_e(this.$el,"uk-active","uk-transition-active")},hideControls:function(){Be(this.$el,"uk-active","uk-transition-active")}}};function Sr(t,e,n,i){return'<iframe src="'+t+'" width="'+e+'" height="'+n+'" style="max-width: 100%; box-sizing: border-box;" frameborder="0" allowfullscreen uk-video="autoplay: '+i+'" uk-responsive></iframe>'}var Lr,Er={install:function(t,e){t.lightboxPanel||t.component("lightboxPanel",Ar),X(e.props,t.component("lightboxPanel").options.props)},props:{toggle:String},data:{toggle:"a"},computed:{toggles:{get:function(t,e){return Le(t.toggle,e)},watch:function(){this.hide()}},items:function(){return K(this.toggles.map(_r),"source")}},disconnected:function(){this.hide()},events:[{name:"click",delegate:function(){return this.toggle+":not(.uk-disabled)"},handler:function(t){t.preventDefault();var e=at(t.current,"href");this.show(k(this.items,function(t){return t.source===e}))}}],methods:{show:function(t){var e=this;return this.panel=this.panel||this.$create("lightboxPanel",X({},this.$props,{items:this.items})),Nt(this.panel.$el,"hidden",function(){return e.panel=!1}),this.panel.show(t)},hide:function(){return this.panel&&this.panel.hide()}}};function _r(t){return["href","caption","type","poster","alt"].reduce(function(e,n){return e["href"===n?"source":n]=at(t,n),e},{})}var Br={},Mr={functional:!0,args:["message","status"],data:{message:"",status:"",timeout:5e3,group:null,pos:"top-center",clsClose:"uk-notification-close",clsMsg:"uk-notification-message"},install:function(t){t.notification.closeAll=function(e,n){Ae(document.body,function(i){var r=t.getComponent(i,"notification");!r||e&&e!==r.group||r.close(n)})}},computed:{marginProp:function(t){return"margin"+(p(t.pos,"top")?"Top":"Bottom")},startProps:function(){var t;return(t={opacity:0})[this.marginProp]=-this.$el.offsetHeight,t}},created:function(){Br[this.pos]||(Br[this.pos]=pe(this.$container,'<div class="uk-notification uk-notification-'+this.pos+'"></div>'));var t=Re(Br[this.pos],"display","block");this.$mount(pe(t,'<div class="'+this.clsMsg+(this.status?" "+this.clsMsg+"-"+this.status:"")+'"> <a href="#" class="'+this.clsClose+'" data-uk-close></a> <div>'+this.message+"</div> </div>"))},connected:function(){var t,e=this,n=z(Re(this.$el,this.marginProp));Ze.start(Re(this.$el,this.startProps),((t={opacity:1})[this.marginProp]=n,t)).then(function(){e.timeout&&(e.timer=setTimeout(e.close,e.timeout))})},events:(Lr={click:function(t){Ct(t.target,'a[href="#"],a[href=""]')&&t.preventDefault(),this.close()}},Lr[se]=function(){this.timer&&clearTimeout(this.timer)},Lr[ae]=function(){this.timeout&&(this.timer=setTimeout(this.close,this.timeout))},Lr),methods:{close:function(t){var e=this,n=function(){Ft(e.$el,"close",[e]),we(e.$el),Br[e.pos].children.length||Re(Br[e.pos],"display","none")};this.timer&&clearTimeout(this.timer),t?n():Ze.start(this.$el,this.startProps).then(n)}}},Ir=["x","y","bgx","bgy","rotate","scale","color","backgroundColor","borderColor","opacity","blur","hue","grayscale","invert","saturate","sepia","fopacity","stroke"],Nr={mixins:[Ri],props:Ir.reduce(function(t,e){return t[e]="list",t},{}),data:Ir.reduce(function(t,e){return t[e]=void 0,t},{}),computed:{props:function(t,e){var n=this;return Ir.reduce(function(i,r){if(R(t[r]))return i;var o,s,a,c=r.match(/color/i),u=c||"opacity"===r,l=t[r].slice(0);u&&Re(e,r,""),l.length<2&&l.unshift(("scale"===r?1:u?Re(e,r):0)||0);var h=function(t){return t.reduce(function(t,e){return P(e)&&e.replace(/-|\d/g,"").trim()||t},"")}(l);if(c){var f=e.style.color;l=l.map(function(t){return function(t,e){return Re(Re(t,"color",e),"color").split(/[(),]/g).slice(1,-1).concat(1).slice(0,4).map(z)}(e,t)}),e.style.color=f}else if(p(r,"bg")){var d="bgy"===r?"height":"width";if(l=l.map(function(t){return wn(t,d,n.$el)}),Re(e,"background-position-"+r[2],""),s=Re(e,"backgroundPosition").split(" ")["x"===r[2]?0:1],n.covers){var g=Math.min.apply(Math,l),v=Math.max.apply(Math,l),m=l.indexOf(g)<l.indexOf(v);a=v-g,l=l.map(function(t){return t-(m?g:v)}),o=(m?-a:0)+"px"}else o=s}else l=l.map(z);if("stroke"===r){if(!l.some(function(t){return t}))return i;var w=vi(n.$el);Re(e,"strokeDasharray",w),"%"===h&&(l=l.map(function(t){return t*w/100})),l=l.reverse(),r="strokeDashoffset"}return i[r]={steps:l,unit:h,pos:o,bgPos:s,diff:a},i},{})},bgProps:function(){var t=this;return["bgx","bgy"].filter(function(e){return e in t.props})},covers:function(t,e){return function(t){var e=t.style.backgroundSize,n="cover"===Re(Re(t,"backgroundSize",""),"backgroundSize");return t.style.backgroundSize=e,n}(e)}},disconnected:function(){delete this._image},update:{read:function(t){var e=this;if(t.active=this.matchMedia,t.active){if(!t.image&&this.covers&&this.bgProps.length){var n=Re(this.$el,"backgroundImage").replace(/^none|url\(["']?(.+?)["']?\)$/,"$1");if(n){var i=new Image;i.src=n,(t.image=i).naturalWidth||(i.onload=function(){return e.$emit()})}}var r=t.image;if(r&&r.naturalWidth){var o={width:this.$el.offsetWidth,height:this.$el.offsetHeight},s={width:r.naturalWidth,height:r.naturalHeight},a=it.cover(s,o);this.bgProps.forEach(function(t){var n=e.props[t],i=n.diff,r=n.bgPos,c=n.steps,u="bgy"===t?"height":"width",l=a[u]-o[u];if(l<i)o[u]=a[u]+i-l;else if(i<l){var h=o[u]/wn(r,u,e.$el);h&&(e.props[t].steps=c.map(function(t){return t-(l-i)/h}))}a=it.cover(s,o)}),t.dim=a}}},write:function(t){var e=t.dim;t.active?e&&Re(this.$el,{backgroundSize:e.width+"px "+e.height+"px",backgroundRepeat:"no-repeat"}):Re(this.$el,{backgroundSize:"",backgroundRepeat:""})},events:["resize"]},methods:{reset:function(){var t=this;J(this.getCss(0),function(e,n){return Re(t.$el,n,"")})},getCss:function(t){var e=this.props;return Object.keys(e).reduce(function(n,i){var r=e[i],o=r.steps,s=r.unit,a=r.pos,c=function(t,e,n){void 0===n&&(n=2);var i=$r(t,e),r=i[0],o=i[1],s=i[2];return(F(r)?r+Math.abs(r-o)*s*(r<o?1:-1):+o).toFixed(n)}(o,t);switch(i){case"x":case"y":s=s||"px",n.transform+=" translate"+h(i)+"("+z(c).toFixed("px"===s?0:2)+s+")";break;case"rotate":s=s||"deg",n.transform+=" rotate("+(c+s)+")";break;case"scale":n.transform+=" scale("+c+")";break;case"bgy":case"bgx":n["background-position-"+i[2]]="calc("+a+" + "+c+"px)";break;case"color":case"backgroundColor":case"borderColor":var u=$r(o,t),l=u[0],f=u[1],d=u[2];n[i]="rgba("+l.map(function(t,e){return t+=d*(f[e]-t),3===e?z(t):parseInt(t,10)}).join(",")+")";break;case"blur":s=s||"px",n.filter+=" blur("+(c+s)+")";break;case"hue":s=s||"deg",n.filter+=" hue-rotate("+(c+s)+")";break;case"fopacity":s=s||"%",n.filter+=" opacity("+(c+s)+")";break;case"grayscale":case"invert":case"saturate":case"sepia":s=s||"%",n.filter+=" "+i+"("+(c+s)+")";break;default:n[i]=c}return n},{transform:"",filter:""})}}};function $r(t,e){var n=t.length-1,i=Math.min(Math.floor(n*e),n-1),r=t.slice(i,i+2);return r.push(1===e?1:e%(1/n)*n),r}var Pr={mixins:[Nr],props:{target:String,viewport:Number,easing:Number},data:{target:!1,viewport:1,easing:1},computed:{target:function(t,e){var n=t.target;return function t(e){return e?"offsetTop"in e?e:t(e.parentNode):document.body}(n&&ct(n,e)||e)}},update:{read:function(t,e){var n=t.percent;if("scroll"!==e&&(n=!1),t.active){var i=n;return{percent:n=function(t,e){return Q(t*(1-(e-e*t)))}(gn(this.target)/(this.viewport||1),this.easing),style:i!==n&&this.getCss(n)}}},write:function(t){var e=t.style;t.active?e&&Re(this.$el,e):this.reset()},events:["scroll","resize"]}},Fr={update:{write:function(){if(!this.stack.length&&!this.dragging){var t=this.getValidIndex();delete this.index,Be(this.slides,this.clsActive,this.clsActivated),this.show(t)}},events:["resize"]}};function Dr(t,e,n){var i=jr(t,e);return n?i-function(t,e){return Hr(e).width/2-Hr(t).width/2}(t,e):Math.min(i,Or(e))}function Or(t){return Math.max(0,Rr(t)-Hr(t).width)}function Rr(t){return qr(t).reduce(function(t,e){return Hr(e).width+t},0)}function jr(t,e){return(on(t).left+(Qt?Hr(t).width-Hr(e).width:0))*(Qt?-1:1)}function Hr(t){return t.getBoundingClientRect()}function zr(t,e,n){Ft(t,Dt(e,!1,!1,n))}function qr(t){return W(t.children)}var Wr={mixins:[Un,Cr,Fr],props:{center:Boolean,sets:Boolean},data:{center:!1,sets:!1,attrItem:"uk-slider-item",selList:".uk-slider-items",selNav:".uk-slider-nav",clsContainer:"uk-slider-container",Transitioner:function(t,e,n,i){var r=i.center,o=i.easing,s=i.list,a=new Ut,c=t?Dr(t,s,r):Dr(e,s,r)+Hr(e).width*n,u=e?Dr(e,s,r):c+Hr(t).width*n*(Qt?-1:1);return{dir:n,show:function(e,i,r){void 0===i&&(i=0);var c=r?"linear":o;return e-=Math.round(e*Q(i,-1,1)),this.translate(i),t&&this.updateTranslates(),i=t?i:Q(i,0,1),zr(this.getItemIn(),"itemin",{percent:i,duration:e,timing:c,dir:n}),t&&zr(this.getItemIn(!0),"itemout",{percent:1-i,duration:e,timing:c,dir:n}),Ze.start(s,{transform:wr(-u*(Qt?-1:1),"px")},e,c).then(a.resolve,tt),a.promise},stop:function(){return Ze.stop(s)},cancel:function(){Ze.cancel(s)},reset:function(){Re(s,"transform","")},forward:function(t,e){return void 0===e&&(e=this.percent()),Ze.cancel(s),this.show(t,e,!0)},translate:function(e){var i=this.getDistance()*n*(Qt?-1:1);Re(s,"transform",wr(Q(i-i*e-u,-Rr(s),Hr(s).width)*(Qt?-1:1),"px")),this.updateTranslates(),t&&(e=Q(e,-1,1),zr(this.getItemIn(),"itemtranslatein",{percent:e,dir:n}),zr(this.getItemIn(!0),"itemtranslateout",{percent:1-e,dir:n}))},percent:function(){return Math.abs((Re(s,"transform").split(",")[4]*(Qt?-1:1)+c)/(u-c))},getDistance:function(){return Math.abs(u-c)},getItemIn:function(e){void 0===e&&(e=!1);var i=this.getActives(),r=G(qr(s),"offsetLeft"),o=le(r,i[0<n*(e?-1:1)?i.length-1:0]);return~o&&r[o+(t&&!e?n:0)]},getActives:function(){var n=Dr(t||e,s,r);return G(qr(s).filter(function(t){var e=jr(t,s);return n<=e&&e+Hr(t).width<=Hr(s).width+n}),"offsetLeft")},updateTranslates:function(){var t=this.getActives();qr(s).forEach(function(n){var i=x(t,n);zr(n,"itemtranslate"+(i?"in":"out"),{percent:i?1:0,dir:n.offsetLeft<=e.offsetLeft?1:-1})})}}}},computed:{avgWidth:function(){return Rr(this.list)/this.length},finite:function(t){return t.finite||Rr(this.list)<Hr(this.list).width+function(t){return qr(t).reduce(function(t,e){return Math.max(t,Hr(e).width)},0)}(this.list)+this.center},maxIndex:function(){if(!this.finite||this.center&&!this.sets)return this.length-1;if(this.center)return this.sets[this.sets.length-1];Re(this.slides,"order","");for(var t=Or(this.list),e=this.length;e--;)if(jr(this.list.children[e],this.list)<t)return Math.min(e+1,this.length-1);return 0},sets:function(t){var e=this,n=t.sets,i=Hr(this.list).width/(this.center?2:1),r=0,o=i,s=0;return!O(n=n&&this.slides.reduce(function(t,n,a){var c=Hr(n).width;if(r<s+c&&(!e.center&&a>e.maxIndex&&(a=e.maxIndex),!x(t,a))){var u=e.slides[a+1];e.center&&u&&c<o-Hr(u).width/2?o-=c:(o=i,t.push(a),r=s+i+(e.center?c/2:0))}return s+=c,t},[]))&&n},transitionOptions:function(){return{center:this.center,list:this.list}}},connected:function(){$e(this.$el,this.clsContainer,!Se("."+this.clsContainer,this.$el))},update:{write:function(){var t=this;Le("["+this.attrItem+"],[data-"+this.attrItem+"]",this.$el).forEach(function(e){var n=at(e,t.attrItem);t.maxIndex&&$e(e,"uk-hidden",D(n)&&(t.sets&&!x(t.sets,z(n))||n>t.maxIndex))})},events:["resize"]},events:{beforeitemshow:function(t){!this.dragging&&this.sets&&this.stack.length<2&&!x(this.sets,this.index)&&(this.index=this.getValidIndex());var e=Math.abs(this.index-this.prevIndex+(0<this.dir&&this.index<this.prevIndex||this.dir<0&&this.index>this.prevIndex?(this.maxIndex+1)*this.dir:0));if(!this.dragging&&1<e){for(var n=0;n<e;n++)this.stack.splice(1,0,0<this.dir?"next":"previous");t.preventDefault()}else this.duration=kr(this.avgWidth/this.velocity)*(Hr(this.dir<0||!this.slides[this.prevIndex]?this.slides[this.index]:this.slides[this.prevIndex]).width/this.avgWidth),this.reorder()},itemshow:function(){!R(this.prevIndex)&&_e(this._getTransitioner().getItemIn(),this.clsActive)},itemshown:function(){var t=this,e=this._getTransitioner(this.index).getActives();this.slides.forEach(function(n){return $e(n,t.clsActive,x(e,n))}),(!this.sets||x(this.sets,z(this.index)))&&this.slides.forEach(function(n){return $e(n,t.clsActivated,x(e,n))})}},methods:{reorder:function(){var t=this;if(Re(this.slides,"order",""),!this.finite){var e=0<this.dir&&this.slides[this.prevIndex]?this.prevIndex:this.index;if(this.slides.forEach(function(n,i){return Re(n,"order",0<t.dir&&i<e?1:t.dir<0&&i>=t.index?-1:"")}),this.center)for(var n=this.slides[e],i=Hr(this.list).width/2-Hr(n).width/2,r=0;0<i;){var o=this.getIndex(--r+e,e),s=this.slides[o];Re(s,"order",e<o?-2:-1),i-=Hr(s).width}}},getValidIndex:function(t,e){if(void 0===t&&(t=this.index),void 0===e&&(e=this.prevIndex),t=this.getIndex(t,e),!this.sets)return t;var n;do{if(x(this.sets,t))return t;n=t,t=this.getIndex(t+this.dir,e)}while(t!==n);return t}}},Ur={mixins:[Nr],data:{selItem:"!li"},computed:{item:function(t,e){return ct(t.selItem,e)}},events:[{name:"itemshown",self:!0,el:function(){return this.item},handler:function(){Re(this.$el,this.getCss(.5))}},{name:"itemin itemout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.duration,o=n.timing,s=n.dir;Ze.cancel(this.$el),Re(this.$el,this.getCss(Yr(e,s,i))),Ze.start(this.$el,this.getCss(Vr(e)?.5:0<s?1:0),r,o).catch(tt)}},{name:"transitioncanceled transitionend",self:!0,el:function(){return this.item},handler:function(){Ze.cancel(this.$el)}},{name:"itemtranslatein itemtranslateout",self:!0,el:function(){return this.item},handler:function(t){var e=t.type,n=t.detail,i=n.percent,r=n.dir;Ze.cancel(this.$el),Re(this.$el,this.getCss(Yr(e,r,i)))}}]};function Vr(t){return v(t,"in")}function Yr(t,e,n){return n/=2,Vr(t)?e<0?1-n:n:e<0?n:1-n}var Zr,Xr=X({},vr,{fade:{show:function(){return[{opacity:0,zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Re(t,"opacity")},translate:function(t){return[{opacity:1-t,zIndex:0},{zIndex:-1}]}},scale:{show:function(){return[{opacity:0,transform:yr(1.5),zIndex:0},{zIndex:-1}]},percent:function(t){return 1-Re(t,"opacity")},translate:function(t){return[{opacity:1-t,transform:yr(1+.5*t),zIndex:0},{zIndex:-1}]}},pull:{show:function(t){return t<0?[{transform:wr(30),zIndex:-1},{transform:wr(),zIndex:0}]:[{transform:wr(-100),zIndex:0},{transform:wr(),zIndex:-1}]},percent:function(t,e,n){return n<0?1-mr(e):mr(t)},translate:function(t,e){return e<0?[{transform:wr(30*t),zIndex:-1},{transform:wr(-100*(1-t)),zIndex:0}]:[{transform:wr(100*-t),zIndex:0},{transform:wr(30*(1-t)),zIndex:-1}]}},push:{show:function(t){return t<0?[{transform:wr(100),zIndex:0},{transform:wr(),zIndex:-1}]:[{transform:wr(-30),zIndex:-1},{transform:wr(),zIndex:0}]},percent:function(t,e,n){return 0<n?1-mr(e):mr(t)},translate:function(t,e){return e<0?[{transform:wr(100*t),zIndex:0},{transform:wr(-30*(1-t)),zIndex:-1}]:[{transform:wr(-30*t),zIndex:-1},{transform:wr(100*(1-t)),zIndex:0}]}}}),Jr={mixins:[Un,Tr,Fr],props:{ratio:String,minHeight:Number,maxHeight:Number},data:{ratio:"16:9",minHeight:!1,maxHeight:!1,selList:".uk-slideshow-items",attrItem:"uk-slideshow-item",selNav:".uk-slideshow-nav",Animations:Xr},update:{read:function(){var t=this.ratio.split(":").map(Number),e=t[0],n=t[1];return n=n*this.list.offsetWidth/e||0,this.minHeight&&(n=Math.max(this.minHeight,n)),this.maxHeight&&(n=Math.min(this.maxHeight,n)),{height:n-un(this.list,"content-box")}},write:function(t){var e=t.height;Re(this.list,"minHeight",e)},events:["resize"]}},Gr={mixins:[Un,ur],props:{group:String,threshold:Number,clsItem:String,clsPlaceholder:String,clsDrag:String,clsDragState:String,clsBase:String,clsNoDrag:String,clsEmpty:String,clsCustom:String,handle:String},data:{group:!1,threshold:5,clsItem:"uk-sortable-item",clsPlaceholder:"uk-sortable-placeholder",clsDrag:"uk-sortable-drag",clsDragState:"uk-drag",clsBase:"uk-sortable",clsNoDrag:"uk-sortable-nodrag",clsEmpty:"uk-sortable-empty",clsCustom:"",handle:!1},created:function(){var t=this;["init","start","move","end"].forEach(function(e){var n=t[e];t[e]=function(e){t.scrollY=window.pageYOffset;var i=qt(e,"page"),r=i.x,o=i.y;t.pos={x:r,y:o},n(e)}})},events:{name:ie,passive:!1,handler:"init"},update:{write:function(){if(this.clsEmpty&&$e(this.$el,this.clsEmpty,O(this.$el.children)),Re(this.handle?Le(this.handle,this.$el):this.$el.children,{touchAction:"none",userSelect:"none"}),this.drag){nn(this.drag,{top:this.pos.y+this.origin.top,left:this.pos.x+this.origin.left});var t,e=nn(this.drag),n=e.top,i=n+e.height;0<n&&n<this.scrollY?t=this.scrollY-5:i<sn(document)&&i>sn(window)+this.scrollY&&(t=this.scrollY+5),t&&setTimeout(function(){return vn(window,t)},5)}}},methods:{init:function(t){var e=t.target,n=t.button,i=t.defaultPrevented,r=W(this.$el.children).filter(function(t){return It(e,t)})[0];!r||i||0<n||Bt(e)||It(e,"."+this.clsNoDrag)||this.handle&&!It(e,this.handle)||(t.preventDefault(),this.touched=[this],this.placeholder=r,this.origin=X({target:e,index:le(r)},this.pos),Nt(document,re,this.move),Nt(document,oe,this.end),Nt(window,"scroll",this.scroll),this.threshold||this.start(t))},start:function(t){this.drag=pe(this.$container,this.placeholder.outerHTML.replace(/^<li/i,"<div").replace(/li>$/i,"div>")),Re(this.drag,X({boxSizing:"border-box",width:this.placeholder.offsetWidth,height:this.placeholder.offsetHeight},Re(this.placeholder,["paddingLeft","paddingRight","paddingTop","paddingBottom"]))),rt(this.drag,"uk-no-boot",""),_e(this.drag,this.clsDrag,this.clsCustom),sn(this.drag.firstElementChild,sn(this.placeholder.firstElementChild));var e=nn(this.placeholder),n=e.left,i=e.top;X(this.origin,{left:n-this.pos.x,top:i-this.pos.y}),Re(this.origin.target,"pointerEvents","none"),_e(this.placeholder,this.clsPlaceholder),_e(this.$el.children,this.clsItem),_e(document.documentElement,this.clsDragState),Ft(this.$el,"start",[this,this.placeholder]),this.move(t)},move:function(t){if(this.drag){this.$emit();var e="mousemove"===t.type?t.target:document.elementFromPoint(this.pos.x-window.pageXOffset,this.pos.y-window.pageYOffset),n=this.getSortable(e),i=this.getSortable(this.placeholder),r=n!==i;if(n&&!It(e,this.placeholder)&&(!r||n.group&&n.group===i.group)){if(e=n.$el===e.parentNode&&e||W(n.$el.children).filter(function(t){return It(e,t)})[0],r)i.remove(this.placeholder);else if(!e)return;n.insert(this.placeholder,e),x(this.touched,n)||this.touched.push(n)}}else(Math.abs(this.pos.x-this.origin.x)>this.threshold||Math.abs(this.pos.y-this.origin.y)>this.threshold)&&this.start(t)},end:function(t){if($t(document,re,this.move),$t(document,oe,this.end),$t(window,"scroll",this.scroll),Re(this.origin.target,"pointerEvents",""),this.drag){var e=this.getSortable(this.placeholder);this===e?this.origin.index!==le(this.placeholder)&&Ft(this.$el,"moved",[this,this.placeholder]):(Ft(e.$el,"added",[e,this.placeholder]),Ft(this.$el,"removed",[this,this.placeholder])),Ft(this.$el,"stop",[this,this.placeholder]),we(this.drag),this.drag=null;var n=this.touched.map(function(t){return t.clsPlaceholder+" "+t.clsItem}).join(" ");this.touched.forEach(function(t){return Be(t.$el.children,n)}),Be(document.documentElement,this.clsDragState)}else"touchend"===t.type&&t.target.click()},scroll:function(){var t=window.pageYOffset;t!==this.scrollY&&(this.pos.y+=t-this.scrollY,this.scrollY=t,this.$emit())},insert:function(t,e){var n=this;_e(this.$el.children,this.clsItem);var i=function(){e?!It(t,n.$el)||function(t,e){return t.parentNode===e.parentNode&&le(t)>le(e)}(t,e)?ge(e,t):ve(e,t):pe(n.$el,t)};this.animation?this.animate(i):i()},remove:function(t){It(t,this.$el)&&(Re(this.handle?Le(this.handle,t):t,{touchAction:"",userSelect:""}),this.animation?this.animate(function(){return we(t)}):we(t))},getSortable:function(t){return t&&(this.$getComponent(t,"sortable")||this.getSortable(t.parentNode))}}},Kr=[],Qr={mixins:[Hi,Vn,Gn],args:"title",props:{delay:Number,title:String},data:{pos:"top",title:"",delay:0,animation:["uk-animation-scale-up"],duration:100,cls:"uk-active",clsPos:"uk-tooltip"},beforeConnect:function(){this._hasTitle=ot(this.$el,"title"),rt(this.$el,{title:"","aria-expanded":!1})},disconnected:function(){this.hide(),rt(this.$el,{title:this._hasTitle?this.title:null,"aria-expanded":null})},methods:{show:function(){var t=this;this.isActive()||(Kr.forEach(function(t){return t.hide()}),Kr.push(this),this._unbind=Nt(document,oe,function(e){return!It(e.target,t.$el)&&t.hide()}),clearTimeout(this.showTimer),this.showTimer=setTimeout(function(){t._show(),t.hideTimer=setInterval(function(){Et(t.$el)||t.hide()},150)},this.delay))},hide:function(){!this.isActive()||bt(this.$el,"input")&&this.$el===document.activeElement||(Kr.splice(Kr.indexOf(this),1),clearTimeout(this.showTimer),clearInterval(this.hideTimer),rt(this.$el,"aria-expanded",!1),this.toggleElement(this.tooltip,!1),this.tooltip&&we(this.tooltip),this.tooltip=!1,this._unbind())},_show:function(){this.tooltip=pe(this.container,'<div class="'+this.clsPos+'" aria-expanded="true" aria-hidden> <div class="'+this.clsPos+'-inner">'+this.title+"</div> </div>"),this.positionAt(this.tooltip,this.$el),this.origin="y"===this.getAxis()?dn(this.dir)+"-"+this.align:this.align+"-"+dn(this.dir),this.toggleElement(this.tooltip,!0)},isActive:function(){return x(Kr,this)}},events:(Zr={focus:"show",blur:"hide"},Zr[se+" "+ae]=function(t){zt(t)||(t.type===se?this.show():this.hide())},Zr[ie]=function(t){zt(t)&&(this.isActive()?this.hide():this.show())},Zr)},to={props:{allow:String,clsDragover:String,concurrent:Number,maxSize:Number,method:String,mime:String,msgInvalidMime:String,msgInvalidName:String,msgInvalidSize:String,multiple:Boolean,name:String,params:Object,type:String,url:String},data:{allow:!1,clsDragover:"uk-dragover",concurrent:1,maxSize:0,method:"POST",mime:!1,msgInvalidMime:"Invalid File Type: %s",msgInvalidName:"Invalid File Name: %s",msgInvalidSize:"Invalid File Size: %s Kilobytes Max",multiple:!1,name:"files[]",params:{},type:"",url:"",abort:tt,beforeAll:tt,beforeSend:tt,complete:tt,completeAll:tt,error:tt,fail:tt,load:tt,loadEnd:tt,loadStart:tt,progress:tt},events:{change:function(t){bt(t.target,'input[type="file"]')&&(t.preventDefault(),t.target.files&&this.upload(t.target.files),t.target.value="")},drop:function(t){no(t);var e=t.dataTransfer;e&&e.files&&(Be(this.$el,this.clsDragover),this.upload(e.files))},dragenter:function(t){no(t)},dragover:function(t){no(t),_e(this.$el,this.clsDragover)},dragleave:function(t){no(t),Be(this.$el,this.clsDragover)}},methods:{upload:function(t){var e=this;if(t.length){Ft(this.$el,"upload",[t]);for(var n=0;n<t.length;n++){if(this.maxSize&&1e3*this.maxSize<t[n].size)return void this.fail(this.msgInvalidSize.replace("%s",this.maxSize));if(this.allow&&!eo(this.allow,t[n].name))return void this.fail(this.msgInvalidName.replace("%s",this.allow));if(this.mime&&!eo(this.mime,t[n].type))return void this.fail(this.msgInvalidMime.replace("%s",this.mime))}this.multiple||(t=[t[0]]),this.beforeAll(this,t);var i=function(t,e){for(var n=[],i=0;i<t.length;i+=e){for(var r=[],o=0;o<e;o++)r.push(t[i+o]);n.push(r)}return n}(t,this.concurrent),r=function(t){var n=new FormData;for(var o in t.forEach(function(t){return n.append(e.name,t)}),e.params)n.append(o,e.params[o]);Jt(e.url,{data:n,method:e.method,responseType:e.type,beforeSend:function(t){var n=t.xhr;n.upload&&Nt(n.upload,"progress",e.progress),["loadStart","load","loadEnd","abort"].forEach(function(t){return Nt(n,t.toLowerCase(),e[t])}),e.beforeSend(t)}}).then(function(t){e.complete(t),i.length?r(i.shift()):e.completeAll(t)},function(t){return e.error(t)})};r(i.shift())}}}};function eo(t,e){return e.match(new RegExp("^"+t.replace(/\//g,"\\/").replace(/\*\*/g,"(\\/[^\\/]+)*").replace(/\*/g,"[^\\/]+").replace(/((?!\\))\?/g,"$1.")+"$","i"))}function no(t){t.preventDefault(),t.stopPropagation()}return zn.component("countdown",ar),zn.component("filter",dr),zn.component("lightbox",Er),zn.component("lightboxPanel",Ar),zn.component("notification",Mr),zn.component("parallax",Pr),zn.component("slider",Wr),zn.component("sliderParallax",Ur),zn.component("slideshow",Jr),zn.component("slideshowParallax",Ur),zn.component("sortable",Gr),zn.component("tooltip",Qr),zn.component("upload",to),function(t){var e=t.connect,n=t.disconnect;function i(){o(document.body,e),Cn.flush(),new MutationObserver(function(t){return t.forEach(r)}).observe(document,{childList:!0,subtree:!0,characterData:!0,attributes:!0}),t._initialized=!0}function r(i){var r=i.target;("attributes"!==i.type?function(t){for(var i=t.addedNodes,r=t.removedNodes,s=0;s<i.length;s++)o(i[s],e);for(var a=0;a<r.length;a++)o(r[a],n);return!0}(i):function(e){var n=e.target,i=e.attributeName;if("href"===i)return!0;var r=Dn(i);if(r&&r in t){if(ot(n,i))return t[r](n),!0;var o=t.getComponent(n,r);return o?(o.$destroy(),!0):void 0}}(i))&&t.update(r)}function o(t,e){if(1===t.nodeType&&!ot(t,"uk-no-boot"))for(e(t),t=t.firstElementChild;t;){var n=t.nextElementSibling;o(t,e),t=n}}"MutationObserver"in window&&(document.body?i():new MutationObserver(function(){document.body&&(this.disconnect(),i())}).observe(document,{childList:!0,subtree:!0}))}(zn),zn}()}).call(this,n(43).setImmediate)},function(t,e,n){
/*! UIkit 3.1.4 | http://www.getuikit.com | (c) 2014 - 2018 YOOtheme | MIT License */
t.exports=function(){"use strict";function t(e){t.installed||e.icon.add({"500px":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.624,11.866c-0.141,0.132,0.479,0.658,0.662,0.418c0.051-0.046,0.607-0.61,0.662-0.664c0,0,0.738,0.719,0.814,0.719 c0.1,0,0.207-0.055,0.322-0.17c0.27-0.269,0.135-0.416,0.066-0.495l-0.631-0.616l0.658-0.668c0.146-0.156,0.021-0.314-0.1-0.449 c-0.182-0.18-0.359-0.226-0.471-0.125l-0.656,0.654l-0.654-0.654c-0.033-0.034-0.08-0.045-0.124-0.045 c-0.079,0-0.191,0.068-0.307,0.181c-0.202,0.202-0.247,0.351-0.133,0.462l0.665,0.665L9.624,11.866z"/><path d="M11.066,2.884c-1.061,0-2.185,0.248-3.011,0.604c-0.087,0.034-0.141,0.106-0.15,0.205C7.893,3.784,7.919,3.909,7.982,4.066 c0.05,0.136,0.187,0.474,0.452,0.372c0.844-0.326,1.779-0.507,2.633-0.507c0.963,0,1.9,0.191,2.781,0.564 c0.695,0.292,1.357,0.719,2.078,1.34c0.051,0.044,0.105,0.068,0.164,0.068c0.143,0,0.273-0.137,0.389-0.271 c0.191-0.214,0.324-0.395,0.135-0.575c-0.686-0.654-1.436-1.138-2.363-1.533C13.24,3.097,12.168,2.884,11.066,2.884z"/><path d="M16.43,15.747c-0.092-0.028-0.242,0.05-0.309,0.119l0,0c-0.652,0.652-1.42,1.169-2.268,1.521 c-0.877,0.371-1.814,0.551-2.779,0.551c-0.961,0-1.896-0.189-2.775-0.564c-0.848-0.36-1.612-0.879-2.268-1.53 c-0.682-0.688-1.196-1.455-1.529-2.268c-0.325-0.799-0.471-1.643-0.471-1.643c-0.045-0.24-0.258-0.249-0.567-0.203 c-0.128,0.021-0.519,0.079-0.483,0.36v0.01c0.105,0.644,0.289,1.284,0.545,1.895c0.417,0.969,1.002,1.849,1.756,2.604 c0.757,0.754,1.636,1.34,2.604,1.757C8.901,18.785,9.97,19,11.088,19c1.104,0,2.186-0.215,3.188-0.645 c1.838-0.896,2.604-1.757,2.604-1.757c0.182-0.204,0.227-0.317-0.1-0.643C16.779,15.956,16.525,15.774,16.43,15.747z"/><path d="M5.633,13.287c0.293,0.71,0.723,1.341,1.262,1.882c0.54,0.54,1.172,0.971,1.882,1.264c0.731,0.303,1.509,0.461,2.298,0.461 c0.801,0,1.578-0.158,2.297-0.461c0.711-0.293,1.344-0.724,1.883-1.264c0.543-0.541,0.971-1.172,1.264-1.882 c0.314-0.721,0.463-1.5,0.463-2.298c0-0.79-0.148-1.569-0.463-2.289c-0.293-0.699-0.721-1.329-1.264-1.881 c-0.539-0.541-1.172-0.959-1.867-1.263c-0.721-0.303-1.5-0.461-2.299-0.461c-0.802,0-1.613,0.159-2.322,0.461 c-0.577,0.25-1.544,0.867-2.119,1.454v0.012V2.108h8.16C15.1,2.104,15.1,1.69,15.1,1.552C15.1,1.417,15.1,1,14.809,1H5.915 C5.676,1,5.527,1.192,5.527,1.384v6.84c0,0.214,0.273,0.372,0.529,0.428c0.5,0.105,0.614-0.056,0.737-0.224l0,0 c0.18-0.273,0.776-0.884,0.787-0.894c0.901-0.905,2.117-1.408,3.416-1.408c1.285,0,2.5,0.501,3.412,1.408 c0.914,0.914,1.408,2.122,1.408,3.405c0,1.288-0.508,2.496-1.408,3.405c-0.9,0.896-2.152,1.406-3.438,1.406 c-0.877,0-1.711-0.229-2.433-0.671v-4.158c0-0.553,0.237-1.151,0.643-1.614c0.462-0.519,1.094-0.799,1.782-0.799 c0.664,0,1.293,0.253,1.758,0.715c0.459,0.459,0.709,1.071,0.709,1.723c0,1.385-1.094,2.468-2.488,2.468 c-0.273,0-0.769-0.121-0.781-0.125c-0.281-0.087-0.405,0.306-0.438,0.436c-0.159,0.496,0.079,0.585,0.123,0.607 c0.452,0.137,0.743,0.157,1.129,0.157c1.973,0,3.572-1.6,3.572-3.57c0-1.964-1.6-3.552-3.572-3.552c-0.97,0-1.872,0.36-2.546,1.038 c-0.656,0.631-1.027,1.487-1.027,2.322v3.438v-0.011c-0.372-0.42-0.732-1.041-0.981-1.682c-0.102-0.248-0.315-0.202-0.607-0.113 c-0.135,0.035-0.519,0.157-0.44,0.439C5.372,12.799,5.577,13.164,5.633,13.287z"/></svg>',album:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="5" y="2" width="10" height="1"/><rect x="3" y="4" width="14" height="1"/><rect fill="none" stroke="#000" x="1.5" y="6.5" width="17" height="11"/></svg>',"arrow-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="10.5,16.08 5.63,10.66 6.37,10 10.5,14.58 14.63,10 15.37,10.66"/><line fill="none" stroke="#000" x1="10.5" y1="4" x2="10.5" y2="15"/></svg>',"arrow-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="10 14 5 9.5 10 5"/><line fill="none" stroke="#000" x1="16" y1="9.5" x2="5" y2="9.52"/></svg>',"arrow-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="10 5 15 9.5 10 14"/><line fill="none" stroke="#000" x1="4" y1="9.5" x2="15" y2="9.5"/></svg>',"arrow-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="10.5,4 15.37,9.4 14.63,10.08 10.5,5.49 6.37,10.08 5.63,9.4"/><line fill="none" stroke="#000" x1="10.5" y1="16" x2="10.5" y2="5"/></svg>',ban:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><line fill="none" stroke="#000" stroke-width="1.1" x1="4" y1="3.5" x2="16" y2="16.5"/></svg>',behance:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.5,10.6c-0.4-0.5-0.9-0.9-1.6-1.1c1.7-1,2.2-3.2,0.7-4.7C7.8,4,6.3,4,5.2,4C3.5,4,1.7,4,0,4v12c1.7,0,3.4,0,5.2,0 c1,0,2.1,0,3.1-0.5C10.2,14.6,10.5,12.3,9.5,10.6L9.5,10.6z M5.6,6.1c1.8,0,1.8,2.7-0.1,2.7c-1,0-2,0-2.9,0V6.1H5.6z M2.6,13.8v-3.1 c1.1,0,2.1,0,3.2,0c2.1,0,2.1,3.2,0.1,3.2L2.6,13.8z"/><path d="M19.9,10.9C19.7,9.2,18.7,7.6,17,7c-4.2-1.3-7.3,3.4-5.3,7.1c0.9,1.7,2.8,2.3,4.7,2.1c1.7-0.2,2.9-1.3,3.4-2.9h-2.2 c-0.4,1.3-2.4,1.5-3.5,0.6c-0.4-0.4-0.6-1.1-0.6-1.7H20C20,11.7,19.9,10.9,19.9,10.9z M13.5,10.6c0-1.6,2.3-2.7,3.5-1.4 c0.4,0.4,0.5,0.9,0.6,1.4H13.5L13.5,10.6z"/><rect x="13" y="4" width="5" height="1.4"/></svg>',bell:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M17,15.5 L3,15.5 C2.99,14.61 3.79,13.34 4.1,12.51 C4.58,11.3 4.72,10.35 5.19,7.01 C5.54,4.53 5.89,3.2 7.28,2.16 C8.13,1.56 9.37,1.5 9.81,1.5 L9.96,1.5 C9.96,1.5 11.62,1.41 12.67,2.17 C14.08,3.2 14.42,4.54 14.77,7.02 C15.26,10.35 15.4,11.31 15.87,12.52 C16.2,13.34 17.01,14.61 17,15.5 L17,15.5 Z"/><path fill="none" stroke="#000" d="M12.39,16 C12.39,17.37 11.35,18.43 9.91,18.43 C8.48,18.43 7.42,17.37 7.42,16"/></svg>',bold:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5,15.3 C5.66,15.3 5.9,15 5.9,14.53 L5.9,5.5 C5.9,4.92 5.56,4.7 5,4.7 L5,4 L8.95,4 C12.6,4 13.7,5.37 13.7,6.9 C13.7,7.87 13.14,9.17 10.86,9.59 L10.86,9.7 C13.25,9.86 14.29,11.28 14.3,12.54 C14.3,14.47 12.94,16 9,16 L5,16 L5,15.3 Z M9,9.3 C11.19,9.3 11.8,8.5 11.85,7 C11.85,5.65 11.3,4.8 9,4.8 L7.67,4.8 L7.67,9.3 L9,9.3 Z M9.185,15.22 C11.97,15 12.39,14 12.4,12.58 C12.4,11.15 11.39,10 9,10 L7.67,10 L7.67,15 L9.18,15 Z"/></svg>',bolt:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4.74,20 L7.73,12 L3,12 L15.43,1 L12.32,9 L17.02,9 L4.74,20 L4.74,20 L4.74,20 Z M9.18,11 L7.1,16.39 L14.47,10 L10.86,10 L12.99,4.67 L5.61,11 L9.18,11 L9.18,11 L9.18,11 Z"/></svg>',bookmark:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="5.5 1.5 15.5 1.5 15.5 17.5 10.5 12.5 5.5 17.5"/></svg>',calendar:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M 2,3 2,17 18,17 18,3 2,3 Z M 17,16 3,16 3,8 17,8 17,16 Z M 17,7 3,7 3,4 17,4 17,7 Z"/><rect width="1" height="3" x="6" y="2"/><rect width="1" height="3" x="13" y="2"/></svg>',camera:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10.8" r="3.8"/><path fill="none" stroke="#000" d="M1,4.5 C0.7,4.5 0.5,4.7 0.5,5 L0.5,17 C0.5,17.3 0.7,17.5 1,17.5 L19,17.5 C19.3,17.5 19.5,17.3 19.5,17 L19.5,5 C19.5,4.7 19.3,4.5 19,4.5 L13.5,4.5 L13.5,2.9 C13.5,2.6 13.3,2.5 13,2.5 L7,2.5 C6.7,2.5 6.5,2.6 6.5,2.9 L6.5,4.5 L1,4.5 L1,4.5 Z"/></svg>',cart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="7.3" cy="17.3" r="1.4"/><circle cx="13.3" cy="17.3" r="1.4"/><polyline fill="none" stroke="#000" points="0 2 3.2 4 5.3 12.5 16 12.5 18 6.5 8 6.5"/></svg>',check:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.1" points="4,10 8,15 17,4"/></svg>',"chevron-double-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="10 14 6 10 10 6"/><polyline fill="none" stroke="#000" stroke-width="1.03" points="14 14 10 10 14 6"/></svg>',"chevron-double-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="10 6 14 10 10 14"/><polyline fill="none" stroke="#000" stroke-width="1.03" points="6 6 10 10 6 14"/></svg>',"chevron-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="16 7 10 13 4 7"/></svg>',"chevron-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="13 16 7 10 13 4"/></svg>',"chevron-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="7 4 13 10 7 16"/></svg>',"chevron-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.03" points="4 13 10 7 16 13"/></svg>',clock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><rect x="9" y="4" width="1" height="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625"/></svg>',close:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.06" d="M16,16 L4,4"/><path fill="none" stroke="#000" stroke-width="1.06" d="M16,4 L4,16"/></svg>',"cloud-download":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.3,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6"/><polyline fill="none" stroke="#000" points="11.75 16 9.5 18.25 7.25 16"/><path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5"/></svg>',"cloud-upload":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M6.5,14.61 L3.75,14.61 C1.96,14.61 0.5,13.17 0.5,11.39 C0.5,9.76 1.72,8.41 3.31,8.2 C3.38,5.31 5.75,3 8.68,3 C11.19,3 13.31,4.71 13.89,7.02 C14.39,6.8 14.93,6.68 15.5,6.68 C17.71,6.68 19.5,8.45 19.5,10.64 C19.5,12.83 17.71,14.6 15.5,14.6 L12.5,14.6"/><polyline fill="none" stroke="#000" points="7.25 11.75 9.5 9.5 11.75 11.75"/><path fill="none" stroke="#000" d="M9.5,18 L9.5,9.5"/></svg>',code:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" stroke-width="1.01" points="13,4 19,10 13,16"/><polyline fill="none" stroke="#000" stroke-width="1.01" points="7,4 1,10 7,16"/></svg>',cog:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" cx="9.997" cy="10" r="3.31"/><path fill="none" stroke="#000" d="M18.488,12.285 L16.205,16.237 C15.322,15.496 14.185,15.281 13.303,15.791 C12.428,16.289 12.047,17.373 12.246,18.5 L7.735,18.5 C7.938,17.374 7.553,16.299 6.684,15.791 C5.801,15.27 4.655,15.492 3.773,16.237 L1.5,12.285 C2.573,11.871 3.317,10.999 3.317,9.991 C3.305,8.98 2.573,8.121 1.5,7.716 L3.765,3.784 C4.645,4.516 5.794,4.738 6.687,4.232 C7.555,3.722 7.939,2.637 7.735,1.5 L12.263,1.5 C12.072,2.637 12.441,3.71 13.314,4.22 C14.206,4.73 15.343,4.516 16.225,3.794 L18.487,7.714 C17.404,8.117 16.661,8.988 16.67,10.009 C16.672,11.018 17.415,11.88 18.488,12.285 L18.488,12.285 Z"/></svg>',comment:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6,18.71 L6,14 L1,14 L1,1 L19,1 L19,14 L10.71,14 L6,18.71 L6,18.71 Z M2,13 L7,13 L7,16.29 L10.29,13 L18,13 L18,2 L2,2 L2,13 L2,13 Z"/></svg>',commenting:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="1.5,1.5 18.5,1.5 18.5,13.5 10.5,13.5 6.5,17.5 6.5,13.5 1.5,13.5"/><circle cx="10" cy="8" r="1"/><circle cx="6" cy="8" r="1"/><circle cx="14" cy="8" r="1"/></svg>',comments:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="2 0.5 19.5 0.5 19.5 13"/><path d="M5,19.71 L5,15 L0,15 L0,2 L18,2 L18,15 L9.71,15 L5,19.71 L5,19.71 L5,19.71 Z M1,14 L6,14 L6,17.29 L9.29,14 L17,14 L17,3 L1,3 L1,14 L1,14 L1,14 Z"/></svg>',copy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="2.5" width="12" height="16"/><polyline fill="none" stroke="#000" points="5 0.5 17.5 0.5 17.5 17"/></svg>',"credit-card":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="1.5" y="4.5" width="17" height="12"/><rect x="1" y="7" width="18" height="3"/></svg>',database:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><ellipse fill="none" stroke="#000" cx="10" cy="4.64" rx="7.5" ry="3.14"/><path fill="none" stroke="#000" d="M17.5,8.11 C17.5,9.85 14.14,11.25 10,11.25 C5.86,11.25 2.5,9.84 2.5,8.11"/><path fill="none" stroke="#000" d="M17.5,11.25 C17.5,12.99 14.14,14.39 10,14.39 C5.86,14.39 2.5,12.98 2.5,11.25"/><path fill="none" stroke="#000" d="M17.49,4.64 L17.5,14.36 C17.5,16.1 14.14,17.5 10,17.5 C5.86,17.5 2.5,16.09 2.5,14.36 L2.5,4.64"/></svg>',desktop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="8" y="15" width="1" height="2"/><rect x="11" y="15" width="1" height="2"/><rect x="5" y="16" width="10" height="1"/><rect fill="none" stroke="#000" x="1.5" y="3.5" width="17" height="11"/></svg>',download:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="14,10 9.5,14.5 5,10"/><rect x="3" y="17" width="13" height="1"/><line fill="none" stroke="#000" x1="9.5" y1="13.91" x2="9.5" y2="3"/></svg>',dribbble:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.4" d="M1.3,8.9c0,0,5,0.1,8.6-1c1.4-0.4,2.6-0.9,4-1.9 c1.4-1.1,2.5-2.5,2.5-2.5"/><path fill="none" stroke="#000" stroke-width="1.4" d="M3.9,16.6c0,0,1.7-2.8,3.5-4.2 c1.8-1.3,4-2,5.7-2.2C16,10,19,10.6,19,10.6"/><path fill="none" stroke="#000" stroke-width="1.4" d="M6.9,1.6c0,0,3.3,4.6,4.2,6.8 c0.4,0.9,1.3,3.1,1.9,5.2c0.6,2,0.9,4.4,0.9,4.4"/><circle fill="none" stroke="#000" stroke-width="1.4" cx="10" cy="10" r="9"/></svg>',expand:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="13 2 18 2 18 7 17 7 17 3 13 3"/><polygon points="2 13 3 13 3 17 7 17 7 18 2 18"/><path fill="none" stroke="#000" stroke-width="1.1" d="M11,9 L17,3"/><path fill="none" stroke="#000" stroke-width="1.1" d="M3,17 L9,11"/></svg>',facebook:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11,10h2.6l0.4-3H11V5.3c0-0.9,0.2-1.5,1.5-1.5H14V1.1c-0.3,0-1-0.1-2.1-0.1C9.6,1,8,2.4,8,5v2H5.5v3H8v8h3V10z"/></svg>',"file-edit":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M18.65,1.68 C18.41,1.45 18.109,1.33 17.81,1.33 C17.499,1.33 17.209,1.45 16.98,1.68 L8.92,9.76 L8,12.33 L10.55,11.41 L18.651,3.34 C19.12,2.87 19.12,2.15 18.65,1.68 L18.65,1.68 L18.65,1.68 Z"/><polyline fill="none" stroke="#000" points="16.5 8.482 16.5 18.5 3.5 18.5 3.5 1.5 14.211 1.5"/></svg>',"file-pdf":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" width="13" height="17" x="3.5" y="1.5"/><path d="M14.65 11.67c-.48.3-1.37-.19-1.79-.37a4.65 4.65 0 0 1 1.49.06c.35.1.36.28.3.31zm-6.3.06l.43-.79a14.7 14.7 0 0 0 .75-1.64 5.48 5.48 0 0 0 1.25 1.55l.2.15a16.36 16.36 0 0 0-2.63.73zM9.5 5.32c.2 0 .32.5.32.97a1.99 1.99 0 0 1-.23 1.04 5.05 5.05 0 0 1-.17-1.3s0-.71.08-.71zm-3.9 9a4.35 4.35 0 0 1 1.21-1.46l.24-.22a4.35 4.35 0 0 1-1.46 1.68zm9.23-3.3a2.05 2.05 0 0 0-1.32-.3 11.07 11.07 0 0 0-1.58.11 4.09 4.09 0 0 1-.74-.5 5.39 5.39 0 0 1-1.32-2.06 10.37 10.37 0 0 0 .28-2.62 1.83 1.83 0 0 0-.07-.25.57.57 0 0 0-.52-.4H9.4a.59.59 0 0 0-.6.38 6.95 6.95 0 0 0 .37 3.14c-.26.63-1 2.12-1 2.12-.3.58-.57 1.08-.82 1.5l-.8.44A3.11 3.11 0 0 0 5 14.16a.39.39 0 0 0 .15.42l.24.13c1.15.56 2.28-1.74 2.66-2.42a23.1 23.1 0 0 1 3.59-.85 4.56 4.56 0 0 0 2.91.8.5.5 0 0 0 .3-.21 1.1 1.1 0 0 0 .12-.75.84.84 0 0 0-.14-.25z"/></svg>',"file-text":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" width="13" height="17" x="3.5" y="1.5"/><line fill="none" stroke="#000" x1="6" x2="12" y1="12.5" y2="12.5"/><line fill="none" stroke="#000" x1="6" x2="14" y1="8.5" y2="8.5"/><line fill="none" stroke="#000" x1="6" x2="14" y1="6.5" y2="6.5"/><line fill="none" stroke="#000" x1="6" x2="14" y1="10.5" y2="10.5"/></svg>',file:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="1.5" width="13" height="17"/></svg>',flickr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="5.5" cy="9.5" r="3.5"/><circle cx="14.5" cy="9.5" r="3.5"/></svg>',folder:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="9.5 5.5 8.5 3.5 1.5 3.5 1.5 16.5 18.5 16.5 18.5 5.5"/></svg>',forward:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.47,13.11 C4.02,10.02 6.27,7.85 9.04,6.61 C9.48,6.41 10.27,6.13 11,5.91 L11,2 L18.89,9 L11,16 L11,12.13 C9.25,12.47 7.58,13.19 6.02,14.25 C3.03,16.28 1.63,18.54 1.63,18.54 C1.63,18.54 1.38,15.28 2.47,13.11 L2.47,13.11 Z M5.3,13.53 C6.92,12.4 9.04,11.4 12,10.92 L12,13.63 L17.36,9 L12,4.25 L12,6.8 C11.71,6.86 10.86,7.02 9.67,7.49 C6.79,8.65 4.58,10.96 3.49,13.08 C3.18,13.7 2.68,14.87 2.49,16 C3.28,15.05 4.4,14.15 5.3,13.53 L5.3,13.53 Z"/></svg>',foursquare:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.23,2 C15.96,2 16.4,2.41 16.5,2.86 C16.57,3.15 16.56,3.44 16.51,3.73 C16.46,4.04 14.86,11.72 14.75,12.03 C14.56,12.56 14.16,12.82 13.61,12.83 C13.03,12.84 11.09,12.51 10.69,13 C10.38,13.38 7.79,16.39 6.81,17.53 C6.61,17.76 6.4,17.96 6.08,17.99 C5.68,18.04 5.29,17.87 5.17,17.45 C5.12,17.28 5.1,17.09 5.1,16.91 C5.1,12.4 4.86,7.81 5.11,3.31 C5.17,2.5 5.81,2.12 6.53,2 L15.23,2 L15.23,2 Z M9.76,11.42 C9.94,11.19 10.17,11.1 10.45,11.1 L12.86,11.1 C13.12,11.1 13.31,10.94 13.36,10.69 C13.37,10.64 13.62,9.41 13.74,8.83 C13.81,8.52 13.53,8.28 13.27,8.28 C12.35,8.29 11.42,8.28 10.5,8.28 C9.84,8.28 9.83,7.69 9.82,7.21 C9.8,6.85 10.13,6.55 10.5,6.55 C11.59,6.56 12.67,6.55 13.76,6.55 C14.03,6.55 14.23,6.4 14.28,6.14 C14.34,5.87 14.67,4.29 14.67,4.29 C14.67,4.29 14.82,3.74 14.19,3.74 L7.34,3.74 C7,3.75 6.84,4.02 6.84,4.33 C6.84,7.58 6.85,14.95 6.85,14.99 C6.87,15 8.89,12.51 9.76,11.42 L9.76,11.42 Z"/></svg>',future:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline points="19 2 18 2 18 6 14 6 14 7 19 7 19 2"/><path fill="none" stroke="#000" stroke-width="1.1" d="M18,6.548 C16.709,3.29 13.354,1 9.6,1 C4.6,1 0.6,5 0.6,10 C0.6,15 4.6,19 9.6,19 C14.6,19 18.6,15 18.6,10"/><rect x="9" y="4" width="1" height="7"/><path d="M13.018,14.197 L9.445,10.625" fill="none" stroke="#000" stroke-width="1.1"/></svg>',"git-branch":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="3" r="2"/><circle fill="none" stroke="#000" stroke-width="1.2" cx="14" cy="6" r="2"/><circle fill="none" stroke="#000" stroke-width="1.2" cx="7" cy="17" r="2"/><path fill="none" stroke="#000" stroke-width="2" d="M14,8 C14,10.41 12.43,10.87 10.56,11.25 C9.09,11.54 7,12.06 7,15 L7,5"/></svg>',"git-fork":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.2" cx="5.79" cy="2.79" r="1.79"/><circle fill="none" stroke="#000" stroke-width="1.2" cx="14.19" cy="2.79" r="1.79"/><ellipse fill="none" stroke="#000" stroke-width="1.2" cx="10.03" cy="16.79" rx="1.79" ry="1.79"/><path fill="none" stroke="#000" stroke-width="2" d="M5.79,4.57 L5.79,6.56 C5.79,9.19 10.03,10.22 10.03,13.31 C10.03,14.86 10.04,14.55 10.04,14.55 C10.04,14.37 10.04,14.86 10.04,13.31 C10.04,10.22 14.2,9.19 14.2,6.56 L14.2,4.57"/></svg>',"github-alt":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,0.5 C4.75,0.5 0.5,4.76 0.5,10.01 C0.5,15.26 4.75,19.51 10,19.51 C15.24,19.51 19.5,15.26 19.5,10.01 C19.5,4.76 15.25,0.5 10,0.5 L10,0.5 Z M12.81,17.69 C12.81,17.69 12.81,17.7 12.79,17.69 C12.47,17.75 12.35,17.59 12.35,17.36 L12.35,16.17 C12.35,15.45 12.09,14.92 11.58,14.56 C12.2,14.51 12.77,14.39 13.26,14.21 C13.87,13.98 14.36,13.69 14.74,13.29 C15.42,12.59 15.76,11.55 15.76,10.17 C15.76,9.25 15.45,8.46 14.83,7.8 C15.1,7.08 15.07,6.29 14.75,5.44 L14.51,5.42 C14.34,5.4 14.06,5.46 13.67,5.61 C13.25,5.78 12.79,6.03 12.31,6.35 C11.55,6.16 10.81,6.05 10.09,6.05 C9.36,6.05 8.61,6.15 7.88,6.35 C7.28,5.96 6.75,5.68 6.26,5.54 C6.07,5.47 5.9,5.44 5.78,5.44 L5.42,5.44 C5.06,6.29 5.04,7.08 5.32,7.8 C4.7,8.46 4.4,9.25 4.4,10.17 C4.4,11.94 4.96,13.16 6.08,13.84 C6.53,14.13 7.05,14.32 7.69,14.43 C8.03,14.5 8.32,14.54 8.55,14.55 C8.07,14.89 7.82,15.42 7.82,16.16 L7.82,17.51 C7.8,17.69 7.7,17.8 7.51,17.8 C4.21,16.74 1.82,13.65 1.82,10.01 C1.82,5.5 5.49,1.83 10,1.83 C14.5,1.83 18.17,5.5 18.17,10.01 C18.18,13.53 15.94,16.54 12.81,17.69 L12.81,17.69 Z"/></svg>',github:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,1 C5.03,1 1,5.03 1,10 C1,13.98 3.58,17.35 7.16,18.54 C7.61,18.62 7.77,18.34 7.77,18.11 C7.77,17.9 7.76,17.33 7.76,16.58 C5.26,17.12 4.73,15.37 4.73,15.37 C4.32,14.33 3.73,14.05 3.73,14.05 C2.91,13.5 3.79,13.5 3.79,13.5 C4.69,13.56 5.17,14.43 5.17,14.43 C5.97,15.8 7.28,15.41 7.79,15.18 C7.87,14.6 8.1,14.2 8.36,13.98 C6.36,13.75 4.26,12.98 4.26,9.53 C4.26,8.55 4.61,7.74 5.19,7.11 C5.1,6.88 4.79,5.97 5.28,4.73 C5.28,4.73 6.04,4.49 7.75,5.65 C8.47,5.45 9.24,5.35 10,5.35 C10.76,5.35 11.53,5.45 12.25,5.65 C13.97,4.48 14.72,4.73 14.72,4.73 C15.21,5.97 14.9,6.88 14.81,7.11 C15.39,7.74 15.73,8.54 15.73,9.53 C15.73,12.99 13.63,13.75 11.62,13.97 C11.94,14.25 12.23,14.8 12.23,15.64 C12.23,16.84 12.22,17.81 12.22,18.11 C12.22,18.35 12.38,18.63 12.84,18.54 C16.42,17.35 19,13.98 19,10 C19,5.03 14.97,1 10,1 L10,1 Z"/></svg>',gitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="3.5" y="1" width="1.531" height="11.471"/><rect x="7.324" y="4.059" width="1.529" height="15.294"/><rect x="11.148" y="4.059" width="1.527" height="15.294"/><rect x="14.971" y="4.059" width="1.529" height="8.412"/></svg>',"google-plus":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.9,9c0,2.7-0.6,5-3.2,6.3c-3.7,1.8-8.1,0.2-9.4-3.6C-1.1,7.6,1.9,3.3,6.1,3c1.7-0.1,3.2,0.3,4.6,1.3 c0.1,0.1,0.3,0.2,0.4,0.4c-0.5,0.5-1.2,1-1.7,1.6c-1-0.8-2.1-1.1-3.5-0.9C5,5.6,4.2,6,3.6,6.7c-1.3,1.3-1.5,3.4-0.5,5 c1,1.7,2.6,2.3,4.6,1.9c1.4-0.3,2.4-1.2,2.6-2.6H6.9V9H12.9z"/><polygon points="20,9 20,11 18,11 18,13 16,13 16,11 14,11 14,9 16,9 16,7 18,7 18,9"/></svg>',google:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.86,9.09 C18.46,12.12 17.14,16.05 13.81,17.56 C9.45,19.53 4.13,17.68 2.47,12.87 C0.68,7.68 4.22,2.42 9.5,2.03 C11.57,1.88 13.42,2.37 15.05,3.65 C15.22,3.78 15.37,3.93 15.61,4.14 C14.9,4.81 14.23,5.45 13.5,6.14 C12.27,5.08 10.84,4.72 9.28,4.98 C8.12,5.17 7.16,5.76 6.37,6.63 C4.88,8.27 4.62,10.86 5.76,12.82 C6.95,14.87 9.17,15.8 11.57,15.25 C13.27,14.87 14.76,13.33 14.89,11.75 L10.51,11.75 L10.51,9.09 L17.86,9.09 L17.86,9.09 Z"/></svg>',grid:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="2" y="2" width="3" height="3"/><rect x="8" y="2" width="3" height="3"/><rect x="14" y="2" width="3" height="3"/><rect x="2" y="8" width="3" height="3"/><rect x="8" y="8" width="3" height="3"/><rect x="14" y="8" width="3" height="3"/><rect x="2" y="14" width="3" height="3"/><rect x="8" y="14" width="3" height="3"/><rect x="14" y="14" width="3" height="3"/></svg>',happy:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="13" cy="7" r="1"/><circle cx="7" cy="7" r="1"/><circle fill="none" stroke="#000" cx="10" cy="10" r="8.5"/><path fill="none" stroke="#000" d="M14.6,11.4 C13.9,13.3 12.1,14.5 10,14.5 C7.9,14.5 6.1,13.3 5.4,11.4"/></svg>',hashtag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.431,8 L15.661,7 L12.911,7 L13.831,3 L12.901,3 L11.98,7 L9.29,7 L10.21,3 L9.281,3 L8.361,7 L5.23,7 L5,8 L8.13,8 L7.21,12 L4.23,12 L4,13 L6.98,13 L6.061,17 L6.991,17 L7.911,13 L10.601,13 L9.681,17 L10.611,17 L11.531,13 L14.431,13 L14.661,12 L11.76,12 L12.681,8 L15.431,8 Z M10.831,12 L8.141,12 L9.061,8 L11.75,8 L10.831,12 Z"/></svg>',heart:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.03" d="M10,4 C10,4 8.1,2 5.74,2 C3.38,2 1,3.55 1,6.73 C1,8.84 2.67,10.44 2.67,10.44 L10,18 L17.33,10.44 C17.33,10.44 19,8.84 19,6.73 C19,3.55 16.62,2 14.26,2 C11.9,2 10,4 10,4 L10,4 Z"/></svg>',history:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="#000" points="1 2 2 2 2 6 6 6 6 7 1 7 1 2"/><path fill="none" stroke="#000" stroke-width="1.1" d="M2.1,6.548 C3.391,3.29 6.746,1 10.5,1 C15.5,1 19.5,5 19.5,10 C19.5,15 15.5,19 10.5,19 C5.5,19 1.5,15 1.5,10"/><rect x="9" y="4" width="1" height="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M13.018,14.197 L9.445,10.625"/></svg>',home:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="18.65 11.35 10 2.71 1.35 11.35 0.65 10.65 10 1.29 19.35 10.65"/><polygon points="15 4 18 4 18 7 17 7 17 5 15 5"/><polygon points="3 11 4 11 4 18 7 18 7 12 12 12 12 18 16 18 16 11 17 11 17 19 11 19 11 13 8 13 8 19 3 19"/></svg>',image:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="16.1" cy="6.1" r="1.1"/><rect fill="none" stroke="#000" x=".5" y="2.5" width="19" height="15"/><polyline fill="none" stroke="#000" stroke-width="1.01" points="4,13 8,9 13,14"/><polyline fill="none" stroke="#000" stroke-width="1.01" points="11,12 12.5,10.5 16,14"/></svg>',info:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.13,11.59 C11.97,12.84 10.35,14.12 9.1,14.16 C6.17,14.2 9.89,9.46 8.74,8.37 C9.3,8.16 10.62,7.83 10.62,8.81 C10.62,9.63 10.12,10.55 9.88,11.32 C8.66,15.16 12.13,11.15 12.14,11.18 C12.16,11.21 12.16,11.35 12.13,11.59 C12.08,11.95 12.16,11.35 12.13,11.59 L12.13,11.59 Z M11.56,5.67 C11.56,6.67 9.36,7.15 9.36,6.03 C9.36,5 11.56,4.54 11.56,5.67 L11.56,5.67 Z"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/></svg>',instagram:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M13.55,1H6.46C3.45,1,1,3.44,1,6.44v7.12c0,3,2.45,5.44,5.46,5.44h7.08c3.02,0,5.46-2.44,5.46-5.44V6.44 C19.01,3.44,16.56,1,13.55,1z M17.5,14c0,1.93-1.57,3.5-3.5,3.5H6c-1.93,0-3.5-1.57-3.5-3.5V6c0-1.93,1.57-3.5,3.5-3.5h8 c1.93,0,3.5,1.57,3.5,3.5V14z"/><circle cx="14.87" cy="5.26" r="1.09"/><path d="M10.03,5.45c-2.55,0-4.63,2.06-4.63,4.6c0,2.55,2.07,4.61,4.63,4.61c2.56,0,4.63-2.061,4.63-4.61 C14.65,7.51,12.58,5.45,10.03,5.45L10.03,5.45L10.03,5.45z M10.08,13c-1.66,0-3-1.34-3-2.99c0-1.65,1.34-2.99,3-2.99s3,1.34,3,2.99 C13.08,11.66,11.74,13,10.08,13L10.08,13L10.08,13z"/></svg>',italic:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.63,5.48 L10.15,14.52 C10,15.08 10.37,15.25 11.92,15.3 L11.72,16 L6,16 L6.2,15.31 C7.78,15.26 8.19,15.09 8.34,14.53 L10.82,5.49 C10.97,4.92 10.63,4.76 9.09,4.71 L9.28,4 L15,4 L14.81,4.69 C13.23,4.75 12.78,4.91 12.63,5.48 L12.63,5.48 Z"/></svg>',joomla:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.8,13.4l1.7-1.7L5.9,8c-0.6-0.5-0.6-1.5,0-2c0.6-0.6,1.4-0.6,2,0l1.7-1.7c-1-1-2.3-1.3-3.6-1C5.8,2.2,4.8,1.4,3.7,1.4 c-1.3,0-2.3,1-2.3,2.3c0,1.1,0.8,2,1.8,2.3c-0.4,1.3-0.1,2.8,1,3.8L7.8,13.4L7.8,13.4z"/><path d="M10.2,4.3c1-1,2.5-1.4,3.8-1c0.2-1.1,1.1-2,2.3-2c1.3,0,2.3,1,2.3,2.3c0,1.2-0.9,2.2-2,2.3c0.4,1.3,0,2.8-1,3.8L13.9,8 c0.6-0.5,0.6-1.5,0-2c-0.5-0.6-1.5-0.6-2,0L8.2,9.7L6.5,8"/><path d="M14.1,16.8c-1.3,0.4-2.8,0.1-3.8-1l1.7-1.7c0.6,0.6,1.5,0.6,2,0c0.5-0.6,0.6-1.5,0-2l-3.7-3.7L12,6.7l3.7,3.7 c1,1,1.3,2.4,1,3.6c1.1,0.2,2,1.1,2,2.3c0,1.3-1,2.3-2.3,2.3C15.2,18.6,14.3,17.8,14.1,16.8"/><path d="M13.2,12.2l-3.7,3.7c-1,1-2.4,1.3-3.6,1c-0.2,1-1.2,1.8-2.2,1.8c-1.3,0-2.3-1-2.3-2.3c0-1.1,0.8-2,1.8-2.3 c-0.3-1.3,0-2.7,1-3.7l1.7,1.7c-0.6,0.6-0.6,1.5,0,2c0.6,0.6,1.4,0.6,2,0l3.7-3.7"/></svg>',laptop:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect y="16" width="20" height="1"/><rect fill="none" stroke="#000" x="2.5" y="4.5" width="15" height="10"/></svg>',lifesaver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,0.5 C4.76,0.5 0.5,4.76 0.5,10 C0.5,15.24 4.76,19.5 10,19.5 C15.24,19.5 19.5,15.24 19.5,10 C19.5,4.76 15.24,0.5 10,0.5 L10,0.5 Z M10,1.5 C11.49,1.5 12.89,1.88 14.11,2.56 L11.85,4.82 C11.27,4.61 10.65,4.5 10,4.5 C9.21,4.5 8.47,4.67 7.79,4.96 L5.58,2.75 C6.87,1.95 8.38,1.5 10,1.5 L10,1.5 Z M4.96,7.8 C4.67,8.48 4.5,9.21 4.5,10 C4.5,10.65 4.61,11.27 4.83,11.85 L2.56,14.11 C1.88,12.89 1.5,11.49 1.5,10 C1.5,8.38 1.95,6.87 2.75,5.58 L4.96,7.79 L4.96,7.8 L4.96,7.8 Z M10,18.5 C8.25,18.5 6.62,17.97 5.27,17.06 L7.46,14.87 C8.22,15.27 9.08,15.5 10,15.5 C10.79,15.5 11.53,15.33 12.21,15.04 L14.42,17.25 C13.13,18.05 11.62,18.5 10,18.5 L10,18.5 Z M10,14.5 C7.52,14.5 5.5,12.48 5.5,10 C5.5,7.52 7.52,5.5 10,5.5 C12.48,5.5 14.5,7.52 14.5,10 C14.5,12.48 12.48,14.5 10,14.5 L10,14.5 Z M15.04,12.21 C15.33,11.53 15.5,10.79 15.5,10 C15.5,9.08 15.27,8.22 14.87,7.46 L17.06,5.27 C17.97,6.62 18.5,8.25 18.5,10 C18.5,11.62 18.05,13.13 17.25,14.42 L15.04,12.21 L15.04,12.21 Z"/></svg>',link:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M10.625,12.375 L7.525,15.475 C6.825,16.175 5.925,16.175 5.225,15.475 L4.525,14.775 C3.825,14.074 3.825,13.175 4.525,12.475 L7.625,9.375"/><path fill="none" stroke="#000" stroke-width="1.1" d="M9.325,7.375 L12.425,4.275 C13.125,3.575 14.025,3.575 14.724,4.275 L15.425,4.975 C16.125,5.675 16.125,6.575 15.425,7.275 L12.325,10.375"/><path fill="none" stroke="#000" stroke-width="1.1" d="M7.925,11.875 L11.925,7.975"/></svg>',linkedin:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.77,17.89 L5.77,7.17 L2.21,7.17 L2.21,17.89 L5.77,17.89 L5.77,17.89 Z M3.99,5.71 C5.23,5.71 6.01,4.89 6.01,3.86 C5.99,2.8 5.24,2 4.02,2 C2.8,2 2,2.8 2,3.85 C2,4.88 2.77,5.7 3.97,5.7 L3.99,5.7 L3.99,5.71 L3.99,5.71 Z"/><path d="M7.75,17.89 L11.31,17.89 L11.31,11.9 C11.31,11.58 11.33,11.26 11.43,11.03 C11.69,10.39 12.27,9.73 13.26,9.73 C14.55,9.73 15.06,10.71 15.06,12.15 L15.06,17.89 L18.62,17.89 L18.62,11.74 C18.62,8.45 16.86,6.92 14.52,6.92 C12.6,6.92 11.75,7.99 11.28,8.73 L11.3,8.73 L11.3,7.17 L7.75,7.17 C7.79,8.17 7.75,17.89 7.75,17.89 L7.75,17.89 L7.75,17.89 Z"/></svg>',list:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="6" y="4" width="12" height="1"/><rect x="6" y="9" width="12" height="1"/><rect x="6" y="14" width="12" height="1"/><rect x="2" y="4" width="2" height="1"/><rect x="2" y="9" width="2" height="1"/><rect x="2" y="14" width="2" height="1"/></svg>',location:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.01" d="M10,0.5 C6.41,0.5 3.5,3.39 3.5,6.98 C3.5,11.83 10,19 10,19 C10,19 16.5,11.83 16.5,6.98 C16.5,3.39 13.59,0.5 10,0.5 L10,0.5 Z"/><circle fill="none" stroke="#000" cx="10" cy="6.8" r="2.3"/></svg>',lock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" height="10" width="13" y="8.5" x="3.5"/><path fill="none" stroke="#000" d="M6.5,8 L6.5,4.88 C6.5,3.01 8.07,1.5 10,1.5 C11.93,1.5 13.5,3.01 13.5,4.88 L13.5,8"/></svg>',mail:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="1.4,6.5 10,11 18.6,6.5"/><path d="M 1,4 1,16 19,16 19,4 1,4 Z M 18,15 2,15 2,5 18,5 18,15 Z"/></svg>',menu:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="2" y="4" width="16" height="1"/><rect x="2" y="9" width="16" height="1"/><rect x="2" y="14" width="16" height="1"/></svg>',microphone:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" x1="10" x2="10" y1="16.44" y2="18.5"/><line fill="none" stroke="#000" x1="7" x2="13" y1="18.5" y2="18.5"/><path fill="none" stroke="#000" stroke-width="1.1" d="M13.5 4.89v5.87a3.5 3.5 0 0 1-7 0V4.89a3.5 3.5 0 0 1 7 0z"/><path fill="none" stroke="#000" stroke-width="1.1" d="M15.5 10.36V11a5.5 5.5 0 0 1-11 0v-.6"/></svg>',"minus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9"/><line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5"/></svg>',minus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect height="1" width="18" y="9" x="1"/></svg>',"more-vertical":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="3" r="2"/><circle cx="10" cy="10" r="2"/><circle cx="10" cy="17" r="2"/></svg>',more:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="3" cy="10" r="2"/><circle cx="10" cy="10" r="2"/><circle cx="17" cy="10" r="2"/></svg>',move:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="4,5 1,5 1,9 2,9 2,6 4,6"/><polygon points="1,16 2,16 2,18 4,18 4,19 1,19"/><polygon points="14,16 14,19 11,19 11,18 13,18 13,16"/><rect fill="none" stroke="#000" x="5.5" y="1.5" width="13" height="13"/><rect x="1" y="11" width="1" height="3"/><rect x="6" y="18" width="3" height="1"/></svg>',nut:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="2.5,5.7 10,1.3 17.5,5.7 17.5,14.3 10,18.7 2.5,14.3"/><circle fill="none" stroke="#000" cx="10" cy="10" r="3.5"/></svg>',pagekit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="3,1 17,1 17,16 10,16 10,13 14,13 14,4 6,4 6,16 10,16 10,19 3,19"/></svg>',"paint-bucket":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.21,1 L0,11.21 L8.1,19.31 L18.31,9.1 L10.21,1 L10.21,1 Z M16.89,9.1 L15,11 L1.7,11 L10.21,2.42 L16.89,9.1 Z"/><path fill="none" stroke="#000" stroke-width="1.1" d="M6.42,2.33 L11.7,7.61"/><path d="M18.49,12 C18.49,12 20,14.06 20,15.36 C20,16.28 19.24,17 18.49,17 L18.49,17 C17.74,17 17,16.28 17,15.36 C17,14.06 18.49,12 18.49,12 L18.49,12 Z"/></svg>',pencil:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M17.25,6.01 L7.12,16.1 L3.82,17.2 L5.02,13.9 L15.12,3.88 C15.71,3.29 16.66,3.29 17.25,3.88 C17.83,4.47 17.83,5.42 17.25,6.01 L17.25,6.01 Z"/><path fill="none" stroke="#000" d="M15.98,7.268 L13.851,5.148"/></svg>',"phone-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M17,5.5 C17.8,5.5 18.5,6.2 18.5,7 L18.5,14 C18.5,14.8 17.8,15.5 17,15.5 L3,15.5 C2.2,15.5 1.5,14.8 1.5,14 L1.5,7 C1.5,6.2 2.2,5.5 3,5.5 L17,5.5 L17,5.5 L17,5.5 Z"/><circle cx="3.8" cy="10.5" r=".8"/></svg>',phone:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M15.5,17 C15.5,17.8 14.8,18.5 14,18.5 L7,18.5 C6.2,18.5 5.5,17.8 5.5,17 L5.5,3 C5.5,2.2 6.2,1.5 7,1.5 L14,1.5 C14.8,1.5 15.5,2.2 15.5,3 L15.5,17 L15.5,17 L15.5,17 Z"/><circle cx="10.5" cy="16.5" r=".8"/></svg>',pinterest:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.21,1 C5.5,1 3,4.16 3,7.61 C3,9.21 3.85,11.2 5.22,11.84 C5.43,11.94 5.54,11.89 5.58,11.69 C5.62,11.54 5.8,10.8 5.88,10.45 C5.91,10.34 5.89,10.24 5.8,10.14 C5.36,9.59 5,8.58 5,7.65 C5,5.24 6.82,2.91 9.93,2.91 C12.61,2.91 14.49,4.74 14.49,7.35 C14.49,10.3 13,12.35 11.06,12.35 C9.99,12.35 9.19,11.47 9.44,10.38 C9.75,9.08 10.35,7.68 10.35,6.75 C10.35,5.91 9.9,5.21 8.97,5.21 C7.87,5.21 6.99,6.34 6.99,7.86 C6.99,8.83 7.32,9.48 7.32,9.48 C7.32,9.48 6.24,14.06 6.04,14.91 C5.7,16.35 6.08,18.7 6.12,18.9 C6.14,19.01 6.26,19.05 6.33,18.95 C6.44,18.81 7.74,16.85 8.11,15.44 C8.24,14.93 8.79,12.84 8.79,12.84 C9.15,13.52 10.19,14.09 11.29,14.09 C14.58,14.09 16.96,11.06 16.96,7.3 C16.94,3.7 14,1 10.21,1"/></svg>',"play-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" stroke-width="1.1" points="8.5 7 13.5 10 8.5 13"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/></svg>',play:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="6.5,5 14.5,10 6.5,15"/></svg>',"plus-circle":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9.5" cy="9.5" r="9"/><line fill="none" stroke="#000" x1="9.5" y1="5" x2="9.5" y2="14"/><line fill="none" stroke="#000" x1="5" y1="9.5" x2="14" y2="9.5"/></svg>',plus:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="9" y="1" width="1" height="17"/><rect x="1" y="9" width="17" height="1"/></svg>',print:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="4.5 13.5 1.5 13.5 1.5 6.5 18.5 6.5 18.5 13.5 15.5 13.5"/><polyline fill="none" stroke="#000" points="15.5 6.5 15.5 2.5 4.5 2.5 4.5 6.5"/><rect fill="none" stroke="#000" width="11" height="6" x="4.5" y="11.5"/><rect width="8" height="1" x="6" y="13"/><rect width="8" height="1" x="6" y="15"/></svg>',pull:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="6.85,8 9.5,10.6 12.15,8 12.85,8.7 9.5,12 6.15,8.7"/><line fill="none" stroke="#000" x1="9.5" y1="11" x2="9.5" y2="2"/><polyline fill="none" stroke="#000" points="6,5.5 3.5,5.5 3.5,18.5 15.5,18.5 15.5,5.5 13,5.5"/></svg>',push:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="12.15,4 9.5,1.4 6.85,4 6.15,3.3 9.5,0 12.85,3.3"/><line fill="none" stroke="#000" x1="9.5" y1="10" x2="9.5" y2="1"/><polyline fill="none" stroke="#000" points="6 5.5 3.5 5.5 3.5 18.5 15.5 18.5 15.5 5.5 13 5.5"/></svg>',question:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><circle cx="10.44" cy="14.42" r="1.05"/><path fill="none" stroke="#000" stroke-width="1.2" d="M8.17,7.79 C8.17,4.75 12.72,4.73 12.72,7.72 C12.72,8.67 11.81,9.15 11.23,9.75 C10.75,10.24 10.51,10.73 10.45,11.4 C10.44,11.53 10.43,11.64 10.43,11.75"/></svg>',"quote-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.27,7.79 C17.27,9.45 16.97,10.43 15.99,12.02 C14.98,13.64 13,15.23 11.56,15.97 L11.1,15.08 C12.34,14.2 13.14,13.51 14.02,11.82 C14.27,11.34 14.41,10.92 14.49,10.54 C14.3,10.58 14.09,10.6 13.88,10.6 C12.06,10.6 10.59,9.12 10.59,7.3 C10.59,5.48 12.06,4 13.88,4 C15.39,4 16.67,5.02 17.05,6.42 C17.19,6.82 17.27,7.27 17.27,7.79 L17.27,7.79 Z"/><path d="M8.68,7.79 C8.68,9.45 8.38,10.43 7.4,12.02 C6.39,13.64 4.41,15.23 2.97,15.97 L2.51,15.08 C3.75,14.2 4.55,13.51 5.43,11.82 C5.68,11.34 5.82,10.92 5.9,10.54 C5.71,10.58 5.5,10.6 5.29,10.6 C3.47,10.6 2,9.12 2,7.3 C2,5.48 3.47,4 5.29,4 C6.8,4 8.08,5.02 8.46,6.42 C8.6,6.82 8.68,7.27 8.68,7.79 L8.68,7.79 Z"/></svg>',receiver:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.01" d="M6.189,13.611C8.134,15.525 11.097,18.239 13.867,18.257C16.47,18.275 18.2,16.241 18.2,16.241L14.509,12.551L11.539,13.639L6.189,8.29L7.313,5.355L3.76,1.8C3.76,1.8 1.732,3.537 1.7,6.092C1.667,8.809 4.347,11.738 6.189,13.611"/></svg>',reddit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M19 9.05a2.56 2.56 0 0 0-2.56-2.56 2.59 2.59 0 0 0-1.88.82 10.63 10.63 0 0 0-4.14-1v-.08c.58-1.62 1.58-3.89 2.7-4.1.38-.08.77.12 1.19.57a1.15 1.15 0 0 0-.06.37 1.48 1.48 0 1 0 1.51-1.45 1.43 1.43 0 0 0-.76.19A2.29 2.29 0 0 0 12.91 1c-2.11.43-3.39 4.38-3.63 5.19 0 0 0 .11-.06.11a10.65 10.65 0 0 0-3.75 1A2.56 2.56 0 0 0 1 9.05a2.42 2.42 0 0 0 .72 1.76A5.18 5.18 0 0 0 1.24 13c0 3.66 3.92 6.64 8.73 6.64s8.74-3 8.74-6.64a5.23 5.23 0 0 0-.46-2.13A2.58 2.58 0 0 0 19 9.05zm-16.88 0a1.44 1.44 0 0 1 2.27-1.19 7.68 7.68 0 0 0-2.07 1.91 1.33 1.33 0 0 1-.2-.72zM10 18.4c-4.17 0-7.55-2.4-7.55-5.4S5.83 7.53 10 7.53 17.5 10 17.5 13s-3.38 5.4-7.5 5.4zm7.69-8.61a7.62 7.62 0 0 0-2.09-1.91 1.41 1.41 0 0 1 .84-.28 1.47 1.47 0 0 1 1.44 1.45 1.34 1.34 0 0 1-.21.72z"/><path d="M6.69 12.58a1.39 1.39 0 1 1 1.39-1.39 1.38 1.38 0 0 1-1.38 1.39z"/><path d="M14.26 11.2a1.39 1.39 0 1 1-1.39-1.39 1.39 1.39 0 0 1 1.39 1.39z"/><path d="M13.09 14.88a.54.54 0 0 1-.09.77 5.3 5.3 0 0 1-3.26 1.19 5.61 5.61 0 0 1-3.4-1.22.55.55 0 1 1 .73-.83 4.09 4.09 0 0 0 5.25 0 .56.56 0 0 1 .77.09z"/></svg>',refresh:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M17.08,11.15 C17.09,11.31 17.1,11.47 17.1,11.64 C17.1,15.53 13.94,18.69 10.05,18.69 C6.16,18.68 3,15.53 3,11.63 C3,7.74 6.16,4.58 10.05,4.58 C10.9,4.58 11.71,4.73 12.46,5"/><polyline fill="none" stroke="#000" points="9.9 2 12.79 4.89 9.79 7.9"/></svg>',reply:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.7,13.11 C16.12,10.02 13.84,7.85 11.02,6.61 C10.57,6.41 9.75,6.13 9,5.91 L9,2 L1,9 L9,16 L9,12.13 C10.78,12.47 12.5,13.19 14.09,14.25 C17.13,16.28 18.56,18.54 18.56,18.54 C18.56,18.54 18.81,15.28 17.7,13.11 L17.7,13.11 Z M14.82,13.53 C13.17,12.4 11.01,11.4 8,10.92 L8,13.63 L2.55,9 L8,4.25 L8,6.8 C8.3,6.86 9.16,7.02 10.37,7.49 C13.3,8.65 15.54,10.96 16.65,13.08 C16.97,13.7 17.48,14.86 17.68,16 C16.87,15.05 15.73,14.15 14.82,13.53 L14.82,13.53 Z"/></svg>',rss:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="3.12" cy="16.8" r="1.85"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,8.2 C1.78,8.18 2.06,8.16 2.35,8.16 C7.57,8.16 11.81,12.37 11.81,17.57 C11.81,17.89 11.79,18.19 11.76,18.5"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,2.52 C1.78,2.51 2.06,2.5 2.35,2.5 C10.72,2.5 17.5,9.24 17.5,17.57 C17.5,17.89 17.49,18.19 17.47,18.5"/></svg>',search:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9" cy="9" r="7"/><path fill="none" stroke="#000" stroke-width="1.1" d="M14,14 L18,18 L14,14 Z"/></svg>',server:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="3" y="3" width="1" height="2"/><rect x="5" y="3" width="1" height="2"/><rect x="7" y="3" width="1" height="2"/><rect x="16" y="3" width="1" height="1"/><rect x="16" y="10" width="1" height="1"/><circle fill="none" stroke="#000" cx="9.9" cy="17.4" r="1.4"/><rect x="3" y="10" width="1" height="2"/><rect x="5" y="10" width="1" height="2"/><rect x="9.5" y="14" width="1" height="2"/><rect x="3" y="17" width="6" height="1"/><rect x="11" y="17" width="6" height="1"/><rect fill="none" stroke="#000" x="1.5" y="1.5" width="17" height="5"/><rect fill="none" stroke="#000" x="1.5" y="8.5" width="17" height="5"/></svg>',settings:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><ellipse fill="none" stroke="#000" cx="6.11" cy="3.55" rx="2.11" ry="2.15"/><ellipse fill="none" stroke="#000" cx="6.11" cy="15.55" rx="2.11" ry="2.15"/><circle fill="none" stroke="#000" cx="13.15" cy="9.55" r="2.15"/><rect x="1" y="3" width="3" height="1"/><rect x="10" y="3" width="8" height="1"/><rect x="1" y="9" width="8" height="1"/><rect x="15" y="9" width="3" height="1"/><rect x="1" y="15" width="3" height="1"/><rect x="10" y="15" width="8" height="1"/></svg>',shrink:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="11 4 12 4 12 8 16 8 16 9 11 9"/><polygon points="4 11 9 11 9 16 8 16 8 12 4 12"/><path fill="none" stroke="#000" stroke-width="1.1" d="M12,8 L18,2"/><path fill="none" stroke="#000" stroke-width="1.1" d="M2,18 L8,12"/></svg>',"sign-in":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="7 2 17 2 17 17 7 17 7 16 16 16 16 3 7 3"/><polygon points="9.1 13.4 8.5 12.8 11.28 10 4 10 4 9 11.28 9 8.5 6.2 9.1 5.62 13 9.5"/></svg>',"sign-out":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="13.1 13.4 12.5 12.8 15.28 10 8 10 8 9 15.28 9 12.5 6.2 13.1 5.62 17 9.5"/><polygon points="13 2 3 2 3 17 13 17 13 16 4 16 4 3 13 3"/></svg>',social:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><line fill="none" stroke="#000" stroke-width="1.1" x1="13.4" y1="14" x2="6.3" y2="10.7"/><line fill="none" stroke="#000" stroke-width="1.1" x1="13.5" y1="5.5" x2="6.5" y2="8.8"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="4.6" r="2.3"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="15.5" cy="14.8" r="2.3"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="4.5" cy="9.8" r="2.3"/></svg>',soundcloud:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.2,9.4c-0.4,0-0.8,0.1-1.101,0.2c-0.199-2.5-2.399-4.5-5-4.5c-0.6,0-1.2,0.1-1.7,0.3C9.2,5.5,9.1,5.6,9.1,5.6V15h8 c1.601,0,2.801-1.2,2.801-2.8C20,10.7,18.7,9.4,17.2,9.4L17.2,9.4z"/><rect x="6" y="6.5" width="1.5" height="8.5"/><rect x="3" y="8" width="1.5" height="7"/><rect y="10" width="1.5" height="5"/></svg>',star:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" stroke-width="1.01" points="10 2 12.63 7.27 18.5 8.12 14.25 12.22 15.25 18 10 15.27 4.75 18 5.75 12.22 1.5 8.12 7.37 7.27"/></svg>',strikethrough:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6,13.02 L6.65,13.02 C7.64,15.16 8.86,16.12 10.41,16.12 C12.22,16.12 12.92,14.93 12.92,13.89 C12.92,12.55 11.99,12.03 9.74,11.23 C8.05,10.64 6.23,10.11 6.23,7.83 C6.23,5.5 8.09,4.09 10.4,4.09 C11.44,4.09 12.13,4.31 12.72,4.54 L13.33,4 L13.81,4 L13.81,7.59 L13.16,7.59 C12.55,5.88 11.52,4.89 10.07,4.89 C8.84,4.89 7.89,5.69 7.89,7.03 C7.89,8.29 8.89,8.78 10.88,9.45 C12.57,10.03 14.38,10.6 14.38,12.91 C14.38,14.75 13.27,16.93 10.18,16.93 C9.18,16.93 8.17,16.69 7.46,16.39 L6.52,17 L6,17 L6,13.02 L6,13.02 Z"/><rect x="3" y="10" width="15" height="1"/></svg>',table:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="1" y="3" width="18" height="1"/><rect x="1" y="7" width="18" height="1"/><rect x="1" y="11" width="18" height="1"/><rect x="1" y="15" width="18" height="1"/></svg>',"tablet-landscape":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M1.5,5 C1.5,4.2 2.2,3.5 3,3.5 L17,3.5 C17.8,3.5 18.5,4.2 18.5,5 L18.5,16 C18.5,16.8 17.8,17.5 17,17.5 L3,17.5 C2.2,17.5 1.5,16.8 1.5,16 L1.5,5 L1.5,5 L1.5,5 Z"/><circle cx="3.7" cy="10.5" r=".8"/></svg>',tablet:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M5,18.5 C4.2,18.5 3.5,17.8 3.5,17 L3.5,3 C3.5,2.2 4.2,1.5 5,1.5 L16,1.5 C16.8,1.5 17.5,2.2 17.5,3 L17.5,17 C17.5,17.8 16.8,18.5 16,18.5 L5,18.5 L5,18.5 L5,18.5 Z"/><circle cx="10.5" cy="16.3" r=".8"/></svg>',tag:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" stroke-width="1.1" d="M17.5,3.71 L17.5,7.72 C17.5,7.96 17.4,8.2 17.21,8.39 L8.39,17.2 C7.99,17.6 7.33,17.6 6.93,17.2 L2.8,13.07 C2.4,12.67 2.4,12.01 2.8,11.61 L11.61,2.8 C11.81,2.6 12.08,2.5 12.34,2.5 L16.19,2.5 C16.52,2.5 16.86,2.63 17.11,2.88 C17.35,3.11 17.48,3.4 17.5,3.71 L17.5,3.71 Z"/><circle cx="14" cy="6" r="1"/></svg>',thumbnails:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="3.5" width="5" height="5"/><rect fill="none" stroke="#000" x="11.5" y="3.5" width="5" height="5"/><rect fill="none" stroke="#000" x="11.5" y="11.5" width="5" height="5"/><rect fill="none" stroke="#000" x="3.5" y="11.5" width="5" height="5"/></svg>',trash:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="6.5 3 6.5 1.5 13.5 1.5 13.5 3"/><polyline fill="none" stroke="#000" points="4.5 4 4.5 18.5 15.5 18.5 15.5 4"/><rect x="8" y="7" width="1" height="9"/><rect x="11" y="7" width="1" height="9"/><rect x="2" y="3" width="16" height="1"/></svg>',"triangle-down":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="5 7 15 7 10 12"/></svg>',"triangle-left":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="12 5 7 10 12 15"/></svg>',"triangle-right":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="8 5 13 10 8 15"/></svg>',"triangle-up":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="5 13 10 8 15 13"/></svg>',tripadvisor:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M19.021,7.866C19.256,6.862,20,5.854,20,5.854h-3.346C14.781,4.641,12.504,4,9.98,4C7.363,4,4.999,4.651,3.135,5.876H0\tc0,0,0.738,0.987,0.976,1.988c-0.611,0.837-0.973,1.852-0.973,2.964c0,2.763,2.249,5.009,5.011,5.009\tc1.576,0,2.976-0.737,3.901-1.879l1.063,1.599l1.075-1.615c0.475,0.611,1.1,1.111,1.838,1.451c1.213,0.547,2.574,0.612,3.825,0.15\tc2.589-0.963,3.913-3.852,2.964-6.439c-0.175-0.463-0.4-0.876-0.675-1.238H19.021z M16.38,14.594\tc-1.002,0.371-2.088,0.328-3.06-0.119c-0.688-0.317-1.252-0.817-1.657-1.438c-0.164-0.25-0.313-0.52-0.417-0.811\tc-0.124-0.328-0.186-0.668-0.217-1.014c-0.063-0.689,0.037-1.396,0.339-2.043c0.448-0.971,1.251-1.71,2.25-2.079\tc2.075-0.765,4.375,0.3,5.14,2.366c0.762,2.066-0.301,4.37-2.363,5.134L16.38,14.594L16.38,14.594z M8.322,13.066\tc-0.72,1.059-1.935,1.76-3.309,1.76c-2.207,0-4.001-1.797-4.001-3.996c0-2.203,1.795-4.002,4.001-4.002\tc2.204,0,3.999,1.8,3.999,4.002c0,0.137-0.024,0.261-0.04,0.396c-0.067,0.678-0.284,1.313-0.648,1.853v-0.013H8.322z M2.472,10.775\tc0,1.367,1.112,2.479,2.476,2.479c1.363,0,2.472-1.11,2.472-2.479c0-1.359-1.11-2.468-2.472-2.468\tC3.584,8.306,2.473,9.416,2.472,10.775L2.472,10.775z M12.514,10.775c0,1.367,1.104,2.479,2.471,2.479\tc1.363,0,2.474-1.108,2.474-2.479c0-1.359-1.11-2.468-2.474-2.468c-1.364,0-2.477,1.109-2.477,2.468H12.514z M3.324,10.775\tc0-0.893,0.726-1.618,1.614-1.618c0.889,0,1.625,0.727,1.625,1.618c0,0.898-0.725,1.627-1.625,1.627\tc-0.901,0-1.625-0.729-1.625-1.627H3.324z M13.354,10.775c0-0.893,0.726-1.618,1.627-1.618c0.886,0,1.61,0.727,1.61,1.618\tc0,0.898-0.726,1.627-1.626,1.627s-1.625-0.729-1.625-1.627H13.354z M9.977,4.875c1.798,0,3.425,0.324,4.849,0.968\tc-0.535,0.015-1.061,0.108-1.586,0.3c-1.264,0.463-2.264,1.388-2.815,2.604c-0.262,0.551-0.398,1.133-0.448,1.72\tC9.79,7.905,7.677,5.873,5.076,5.82C6.501,5.208,8.153,4.875,9.94,4.875H9.977z"/></svg>',tumblr:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.885,8.598c0,0,0,3.393,0,4.996c0,0.282,0,0.66,0.094,0.942c0.377,1.509,1.131,2.545,2.545,3.11 c1.319,0.472,2.356,0.472,3.676,0c0.565-0.188,1.132-0.659,1.132-0.659l-0.849-2.263c0,0-1.036,0.378-1.603,0.283 c-0.565-0.094-1.226-0.66-1.226-1.508c0-1.603,0-4.902,0-4.902h2.828V5.771h-2.828V2H8.205c0,0-0.094,0.66-0.188,0.942 C7.828,3.791,7.262,4.733,6.603,5.394C5.848,6.147,5,6.43,5,6.43v2.168H6.885z"/></svg>',tv:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect x="7" y="16" width="6" height="1"/><rect fill="none" stroke="#000" x=".5" y="3.5" width="19" height="11"/></svg>',twitter:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M19,4.74 C18.339,5.029 17.626,5.229 16.881,5.32 C17.644,4.86 18.227,4.139 18.503,3.28 C17.79,3.7 17.001,4.009 16.159,4.17 C15.485,3.45 14.526,3 13.464,3 C11.423,3 9.771,4.66 9.771,6.7 C9.771,6.99 9.804,7.269 9.868,7.539 C6.795,7.38 4.076,5.919 2.254,3.679 C1.936,4.219 1.754,4.86 1.754,5.539 C1.754,6.82 2.405,7.95 3.397,8.61 C2.79,8.589 2.22,8.429 1.723,8.149 L1.723,8.189 C1.723,9.978 2.997,11.478 4.686,11.82 C4.376,11.899 4.049,11.939 3.713,11.939 C3.475,11.939 3.245,11.919 3.018,11.88 C3.49,13.349 4.852,14.419 6.469,14.449 C5.205,15.429 3.612,16.019 1.882,16.019 C1.583,16.019 1.29,16.009 1,15.969 C2.635,17.019 4.576,17.629 6.662,17.629 C13.454,17.629 17.17,12 17.17,7.129 C17.17,6.969 17.166,6.809 17.157,6.649 C17.879,6.129 18.504,5.478 19,4.74"/></svg>',uikit:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon points="14.4,3.1 11.3,5.1 15,7.3 15,12.9 10,15.7 5,12.9 5,8.5 2,6.8 2,14.8 9.9,19.5 18,14.8 18,5.3"/><polygon points="9.8,4.2 6.7,2.4 9.8,0.4 12.9,2.3"/></svg>',unlock:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><rect fill="none" stroke="#000" x="3.5" y="8.5" width="13" height="10"/><path fill="none" stroke="#000" d="M6.5,8.5 L6.5,4.9 C6.5,3 8.1,1.5 10,1.5 C11.9,1.5 13.5,3 13.5,4.9"/></svg>',upload:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polyline fill="none" stroke="#000" points="5 8 9.5 3.5 14 8"/><rect x="3" y="17" width="13" height="1"/><line fill="none" stroke="#000" x1="9.5" y1="15" x2="9.5" y2="4"/></svg>',user:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="9.9" cy="6.4" r="4.4"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1.5,19 C2.3,14.5 5.8,11.2 10,11.2 C14.2,11.2 17.7,14.6 18.5,19.2"/></svg>',users:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle fill="none" stroke="#000" stroke-width="1.1" cx="7.7" cy="8.6" r="3.5"/><path fill="none" stroke="#000" stroke-width="1.1" d="M1,18.1 C1.7,14.6 4.4,12.1 7.6,12.1 C10.9,12.1 13.7,14.8 14.3,18.3"/><path fill="none" stroke="#000" stroke-width="1.1" d="M11.4,4 C12.8,2.4 15.4,2.8 16.3,4.7 C17.2,6.6 15.7,8.9 13.6,8.9 C16.5,8.9 18.8,11.3 19.2,14.1"/></svg>',"video-camera":'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><polygon fill="none" stroke="#000" points="17.5 6.9 17.5 13.1 13.5 10.4 13.5 14.5 2.5 14.5 2.5 5.5 13.5 5.5 13.5 9.6 17.5 6.9"/></svg>',vimeo:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.065,7.59C1.84,7.367,1.654,7.082,1.468,6.838c-0.332-0.42-0.137-0.411,0.274-0.772c1.026-0.91,2.004-1.896,3.127-2.688 c1.017-0.713,2.365-1.173,3.286-0.039c0.849,1.045,0.869,2.629,1.084,3.891c0.215,1.309,0.421,2.648,0.88,3.901 c0.127,0.352,0.37,1.018,0.81,1.074c0.567,0.078,1.145-0.917,1.408-1.289c0.684-0.987,1.611-2.317,1.494-3.587 c-0.115-1.349-1.572-1.095-2.482-0.773c0.146-1.514,1.555-3.216,2.912-3.792c1.439-0.597,3.579-0.587,4.302,1.036 c0.772,1.759,0.078,3.802-0.763,5.396c-0.918,1.731-2.1,3.333-3.363,4.829c-1.114,1.329-2.432,2.787-4.093,3.422 c-1.897,0.723-3.021-0.686-3.667-2.318c-0.705-1.777-1.056-3.771-1.565-5.621C4.898,8.726,4.644,7.836,4.136,7.191 C3.473,6.358,2.72,7.141,2.065,7.59C1.977,7.502,2.115,7.551,2.065,7.59L2.065,7.59z"/></svg>',warning:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="14" r="1"/><circle fill="none" stroke="#000" stroke-width="1.1" cx="10" cy="10" r="9"/><path d="M10.97,7.72 C10.85,9.54 10.56,11.29 10.56,11.29 C10.51,11.87 10.27,12 9.99,12 C9.69,12 9.49,11.87 9.43,11.29 C9.43,11.29 9.16,9.54 9.03,7.72 C8.96,6.54 9.03,6 9.03,6 C9.03,5.45 9.46,5.02 9.99,5 C10.53,5.01 10.97,5.44 10.97,6 C10.97,6 11.04,6.54 10.97,7.72 L10.97,7.72 Z"/></svg>',whatsapp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M16.7,3.3c-1.8-1.8-4.1-2.8-6.7-2.8c-5.2,0-9.4,4.2-9.4,9.4c0,1.7,0.4,3.3,1.3,4.7l-1.3,4.9l5-1.3c1.4,0.8,2.9,1.2,4.5,1.2 l0,0l0,0c5.2,0,9.4-4.2,9.4-9.4C19.5,7.4,18.5,5,16.7,3.3 M10.1,17.7L10.1,17.7c-1.4,0-2.8-0.4-4-1.1l-0.3-0.2l-3,0.8l0.8-2.9 l-0.2-0.3c-0.8-1.2-1.2-2.7-1.2-4.2c0-4.3,3.5-7.8,7.8-7.8c2.1,0,4.1,0.8,5.5,2.3c1.5,1.5,2.3,3.4,2.3,5.5 C17.9,14.2,14.4,17.7,10.1,17.7 M14.4,11.9c-0.2-0.1-1.4-0.7-1.6-0.8c-0.2-0.1-0.4-0.1-0.5,0.1c-0.2,0.2-0.6,0.8-0.8,0.9 c-0.1,0.2-0.3,0.2-0.5,0.1c-0.2-0.1-1-0.4-1.9-1.2c-0.7-0.6-1.2-1.4-1.3-1.6c-0.1-0.2,0-0.4,0.1-0.5C8,8.8,8.1,8.7,8.2,8.5 c0.1-0.1,0.2-0.2,0.2-0.4c0.1-0.2,0-0.3,0-0.4C8.4,7.6,7.9,6.5,7.7,6C7.5,5.5,7.3,5.6,7.2,5.6c-0.1,0-0.3,0-0.4,0 c-0.2,0-0.4,0.1-0.6,0.3c-0.2,0.2-0.8,0.8-0.8,2c0,1.2,0.8,2.3,1,2.4c0.1,0.2,1.7,2.5,4,3.5c0.6,0.2,1,0.4,1.3,0.5 c0.6,0.2,1.1,0.2,1.5,0.1c0.5-0.1,1.4-0.6,1.6-1.1c0.2-0.5,0.2-1,0.1-1.1C14.8,12.1,14.6,12,14.4,11.9"/></svg>',wordpress:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10,0.5c-5.2,0-9.5,4.3-9.5,9.5s4.3,9.5,9.5,9.5c5.2,0,9.5-4.3,9.5-9.5S15.2,0.5,10,0.5L10,0.5L10,0.5z M15.6,3.9h-0.1 c-0.8,0-1.4,0.7-1.4,1.5c0,0.7,0.4,1.3,0.8,1.9c0.3,0.6,0.7,1.3,0.7,2.3c0,0.7-0.3,1.5-0.6,2.7L14.1,15l-3-8.9 c0.5,0,0.9-0.1,0.9-0.1C12.5,6,12.5,5.3,12,5.4c0,0-1.3,0.1-2.2,0.1C9,5.5,7.7,5.4,7.7,5.4C7.2,5.3,7.2,6,7.6,6c0,0,0.4,0.1,0.9,0.1 l1.3,3.5L8,15L5,6.1C5.5,6.1,5.9,6,5.9,6C6.4,6,6.3,5.3,5.9,5.4c0,0-1.3,0.1-2.2,0.1c-0.2,0-0.3,0-0.5,0c1.5-2.2,4-3.7,6.9-3.7 C12.2,1.7,14.1,2.6,15.6,3.9L15.6,3.9L15.6,3.9z M2.5,6.6l3.9,10.8c-2.7-1.3-4.6-4.2-4.6-7.4C1.8,8.8,2,7.6,2.5,6.6L2.5,6.6L2.5,6.6 z M10.2,10.7l2.5,6.9c0,0,0,0.1,0.1,0.1C11.9,18,11,18.2,10,18.2c-0.8,0-1.6-0.1-2.3-0.3L10.2,10.7L10.2,10.7L10.2,10.7z M14.2,17.1 l2.5-7.3c0.5-1.2,0.6-2.1,0.6-2.9c0-0.3,0-0.6-0.1-0.8c0.6,1.2,1,2.5,1,4C18.3,13,16.6,15.7,14.2,17.1L14.2,17.1L14.2,17.1z"/></svg>',world:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill="none" stroke="#000" d="M1,10.5 L19,10.5"/><path fill="none" stroke="#000" d="M2.35,15.5 L17.65,15.5"/><path fill="none" stroke="#000" d="M2.35,5.5 L17.523,5.5"/><path fill="none" stroke="#000" d="M10,19.46 L9.98,19.46 C7.31,17.33 5.61,14.141 5.61,10.58 C5.61,7.02 7.33,3.83 10,1.7 C10.01,1.7 9.99,1.7 10,1.7 L10,1.7 C12.67,3.83 14.4,7.02 14.4,10.58 C14.4,14.141 12.67,17.33 10,19.46 L10,19.46 L10,19.46 L10,19.46 Z"/><circle fill="none" stroke="#000" cx="10" cy="10.5" r="9"/></svg>',xing:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4.4,4.56 C4.24,4.56 4.11,4.61 4.05,4.72 C3.98,4.83 3.99,4.97 4.07,5.12 L5.82,8.16 L5.82,8.17 L3.06,13.04 C2.99,13.18 2.99,13.33 3.06,13.44 C3.12,13.55 3.24,13.62 3.4,13.62 L6,13.62 C6.39,13.62 6.57,13.36 6.71,13.12 C6.71,13.12 9.41,8.35 9.51,8.16 C9.49,8.14 7.72,5.04 7.72,5.04 C7.58,4.81 7.39,4.56 6.99,4.56 L4.4,4.56 L4.4,4.56 Z"/><path d="M15.3,1 C14.91,1 14.74,1.25 14.6,1.5 C14.6,1.5 9.01,11.42 8.82,11.74 C8.83,11.76 12.51,18.51 12.51,18.51 C12.64,18.74 12.84,19 13.23,19 L15.82,19 C15.98,19 16.1,18.94 16.16,18.83 C16.23,18.72 16.23,18.57 16.16,18.43 L12.5,11.74 L12.5,11.72 L18.25,1.56 C18.32,1.42 18.32,1.27 18.25,1.16 C18.21,1.06 18.08,1 17.93,1 L15.3,1 L15.3,1 Z"/></svg>',yelp:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.175,14.971c-0.112,0.77-1.686,2.767-2.406,3.054c-0.246,0.1-0.487,0.076-0.675-0.069\tc-0.122-0.096-2.446-3.859-2.446-3.859c-0.194-0.293-0.157-0.682,0.083-0.978c0.234-0.284,0.581-0.393,0.881-0.276\tc0.016,0.01,4.21,1.394,4.332,1.482c0.178,0.148,0.263,0.379,0.225,0.646L17.175,14.971L17.175,14.971z M11.464,10.789\tc-0.203-0.307-0.199-0.666,0.009-0.916c0,0,2.625-3.574,2.745-3.657c0.203-0.135,0.452-0.141,0.69-0.025\tc0.691,0.335,2.085,2.405,2.167,3.199v0.027c0.024,0.271-0.082,0.491-0.273,0.623c-0.132,0.083-4.43,1.155-4.43,1.155\tc-0.322,0.096-0.68-0.06-0.882-0.381L11.464,10.789z M9.475,9.563C9.32,9.609,8.848,9.757,8.269,8.817c0,0-3.916-6.16-4.007-6.351\tc-0.057-0.212,0.011-0.455,0.202-0.65C5.047,1.211,8.21,0.327,9.037,0.529c0.27,0.069,0.457,0.238,0.522,0.479\tc0.047,0.266,0.433,5.982,0.488,7.264C10.098,9.368,9.629,9.517,9.475,9.563z M9.927,19.066c-0.083,0.225-0.273,0.373-0.54,0.421\tc-0.762,0.13-3.15-0.751-3.647-1.342c-0.096-0.131-0.155-0.262-0.167-0.394c-0.011-0.095,0-0.189,0.036-0.272\tc0.061-0.155,2.917-3.538,2.917-3.538c0.214-0.272,0.595-0.355,0.952-0.213c0.345,0.13,0.56,0.428,0.536,0.749\tC10.014,14.479,9.977,18.923,9.927,19.066z M3.495,13.912c-0.235-0.009-0.444-0.148-0.568-0.382c-0.089-0.17-0.151-0.453-0.19-0.794\tC2.63,11.701,2.761,10.144,3.07,9.648c0.145-0.226,0.357-0.345,0.592-0.336c0.154,0,4.255,1.667,4.255,1.667\tc0.321,0.118,0.521,0.453,0.5,0.833c-0.023,0.37-0.236,0.655-0.551,0.738L3.495,13.912z"/></svg>',youtube:'<svg width="20" height="20" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15,4.1c1,0.1,2.3,0,3,0.8c0.8,0.8,0.9,2.1,0.9,3.1C19,9.2,19,10.9,19,12c-0.1,1.1,0,2.4-0.5,3.4c-0.5,1.1-1.4,1.5-2.5,1.6 c-1.2,0.1-8.6,0.1-11,0c-1.1-0.1-2.4-0.1-3.2-1c-0.7-0.8-0.7-2-0.8-3C1,11.8,1,10.1,1,8.9c0-1.1,0-2.4,0.5-3.4C2,4.5,3,4.3,4.1,4.2 C5.3,4.1,12.6,4,15,4.1z M8,7.5v6l5.5-3L8,7.5z"/></svg>'})}return"undefined"!=typeof window&&window.UIkit&&window.UIkit.use(t),t}()},function(t,e,n){var i=n(12);t.exports=function(){var t=new i.Template({code:function(t,e,n){var i=this;return i.b(n=n||""),i.b('<div id="waiting" class="uk-margin-medium-top uk-text-center '),i.b(i.v(i.f("colourClass",t,e,0))),i.b('">'),i.b("\n"+n),i.b('\t<h3 class="uk-heading-line uk-text-uppercase"><span>Pict.io Dashboard</span></h3>'),i.b("\n"+n),i.b('\t<h3 id="status" class="uk-h3 uk-margin-large-bottom">'),i.b(i.v(i.f("status",t,e,0))),i.b("</h3>"),i.b("\n"+n),i.b('\t<div class="sk-folding-cube">'),i.b("\n"+n),i.b('\t\t<div class="sk-cube1 sk-cube background-yellow"></div>'),i.b("\n"+n),i.b('\t\t<div class="sk-cube2 sk-cube background-yellow"></div>'),i.b("\n"+n),i.b('\t\t<div class="sk-cube4 sk-cube"></div>'),i.b("\n"+n),i.b('\t\t<div class="sk-cube3 sk-cube"></div>'),i.b("\n"+n),i.b("\t</div>"),i.b("\n"+n),i.b("</div>"),i.fl()},partials:{},subs:{}},'<div id="waiting" class="uk-margin-medium-top uk-text-center {{colourClass}}">\n\t<h3 class="uk-heading-line uk-text-uppercase"><span>Pict.io Dashboard</span></h3>\n\t<h3 id="status" class="uk-h3 uk-margin-large-bottom">{{status}}</h3>\n\t<div class="sk-folding-cube">\n\t\t<div class="sk-cube1 sk-cube background-yellow"></div>\n\t\t<div class="sk-cube2 sk-cube background-yellow"></div>\n\t\t<div class="sk-cube4 sk-cube"></div>\n\t\t<div class="sk-cube3 sk-cube"></div>\n\t</div>\n</div>',i);return t.render.apply(t,arguments)}},function(t,e,n){var i=n(12);t.exports=function(){var t=new i.Template({code:function(t,e,n){var i=this;return i.b(n=n||""),i.b('<div id="waiting" class="uk-margin-medium-top uk-text-center">'),i.b("\n"+n),i.b('    <h3 class="uk-heading-line uk-text-uppercase uk-text-center '),i.b(i.v(i.f("colourClass",t,e,0))),i.b('"><span>Pict.io Dashboard</span></h3>'),i.b("\n"+n),i.b('    <button id="'),i.b(i.v(i.f("slug",t,e,0))),i.b('" class="uk-button uk-button-large uk-border-pill '),i.b(i.v(i.f("colour",t,e,0))),i.b(' uk-margin-small-right uk-margin-small-bottom uk-padding-small uk-width-1-1">'),i.b("\n"+n),i.b('        <span uk-icon="icon: user; ratio: 1.5"></span>'),i.b("\n"+n),i.b("        "),i.s(i.f("extraIcon",t,e,1),t,e,0,419,465,"{{ }}")&&(i.rs(t,e,function(t,e,n){n.b('<span uk-icon="icon: user; ratio: 1.5"></span>')}),t.pop()),i.b("\n"+n),i.b("        <br/>"),i.b(i.v(i.f("players",t,e,0))),i.b("\n"+n),i.b("    </button>"),i.b("\n"+n),i.b('    <h2 id="title" class="uk-h2">'),i.b(i.v(i.f("name",t,e,0))),i.b("</h2>"),i.b("\n"+n),i.b('    <div class="uk-margin-remove-top" uk-grid>'),i.b("\n"+n),i.b('        <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b('        <div id="description" class="uk-width-2-3">'),i.b("\n"+n),i.b('            <div class="uk-margin-medium-bottom">'),i.b("\n"+n),i.b("                <p>"),i.b(i.v(i.f("description",t,e,0))),i.b("</p>"),i.b("\n"+n),i.b("            </div>"),i.b("\n"+n),i.b("            <div uk-grid>"),i.b("\n"+n),i.b('                <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b('                    <div class="uk-card uk-card-default uk-width-2-3 uk-margin-small-left uk-padding-remove-left uk-box-shadow-large uk-border-rounded">'),i.b("\n"+n),i.b('                    <div class="uk-card-body uk-box-shadow-large">'),i.b("\n"+n),i.b('                        <h2 class="uk-h2">'),i.b(i.v(i.f("drawCategory",t,e,0))),i.b("</h2>"),i.b("\n"+n),i.b('                        <p class="uk-text-small"><span uk-icon="future" class="uk-margin-small-right"></span>'),i.b(i.v(i.f("time",t,e,0))),i.b("s</p>"),i.b("\n"+n),i.b("                    </div>"),i.b("\n"+n),i.b("                </div>"),i.b("\n"+n),i.b('                <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b("            </div>"),i.b("\n"+n),i.b("        </div>"),i.b("\n"+n),i.b('        <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b("    </div>"),i.b("\n"+n),i.b("</div>"),i.fl()},partials:{},subs:{}},'<div id="waiting" class="uk-margin-medium-top uk-text-center">\n    <h3 class="uk-heading-line uk-text-uppercase uk-text-center {{colourClass}}"><span>Pict.io Dashboard</span></h3>\n    <button id="{{slug}}" class="uk-button uk-button-large uk-border-pill {{colour}} uk-margin-small-right uk-margin-small-bottom uk-padding-small uk-width-1-1">\n        <span uk-icon="icon: user; ratio: 1.5"></span>\n        {{#extraIcon}}<span uk-icon="icon: user; ratio: 1.5"></span>{{/extraIcon}}\n        <br/>{{players}}\n    </button>\n    <h2 id="title" class="uk-h2">{{name}}</h2>\n    <div class="uk-margin-remove-top" uk-grid>\n        <div class="uk-width-expand"></div>\n        <div id="description" class="uk-width-2-3">\n            <div class="uk-margin-medium-bottom">\n                <p>{{description}}</p>\n            </div>\n            <div uk-grid>\n                <div class="uk-width-expand"></div>\n                    <div class="uk-card uk-card-default uk-width-2-3 uk-margin-small-left uk-padding-remove-left uk-box-shadow-large uk-border-rounded">\n                    <div class="uk-card-body uk-box-shadow-large">\n                        <h2 class="uk-h2">{{drawCategory}}</h2>\n                        <p class="uk-text-small"><span uk-icon="future" class="uk-margin-small-right"></span>{{time}}s</p>\n                    </div>\n                </div>\n                <div class="uk-width-expand"></div>\n            </div>\n        </div>\n        <div class="uk-width-expand"></div>\n    </div>\n</div>',i);return t.render.apply(t,arguments)}},function(t,e,n){var i=n(12);t.exports=function(){var t=new i.Template({code:function(t,e,n){var i=this;return i.b(n=n||""),i.b('<div id="game">'),i.b("\n"+n),i.b('    <div class="uk-margin-remove-top" uk-height-viewport>'),i.b("\n"+n),i.b('        <div class="uk-card uk-card-default uk-card-body uk-border-rounded uk-padding-remove uk-margin-remove uk-box-shadow-large bordered"'),i.b("\n"+n),i.b("            uk-height-viewport>"),i.b("\n"),i.b("\n"+n),i.b('            <canvas id="canvas" resize></canvas>'),i.b("\n"),i.b("\n"+n),i.b("        </div>"),i.b("\n"+n),i.b("    </div>"),i.b("\n"),i.b("\n"+n),i.b('    <div id="container-info">'),i.b("\n"+n),i.b('        <h3 class="uk-heading-line uk-text-uppercase uk-text-center '),i.b(i.v(i.f("colourClass",t,e,0))),i.b('"><span>Pict.io Dashboard</span></h3>'),i.b("\n"+n),i.b('        <h4 id="challenge" class="uk-h4 uk-text-center">'),i.b(i.v(i.f("challenge",t,e,0))),i.b("</h4>"),i.b("\n"+n),i.b("    </div>"),i.b("\n"+n),i.b('    <div id="container-progress">'),i.b("\n"+n),i.b('        <div id="progress"></div>'),i.b("\n"+n),i.b("    </div>"),i.b("\n"),i.b("\n"+n),i.b('    <div id="container-guess">'),i.b("\n"+n),i.b('        <h1 id="guess" class="uk-h1 uk-text-bold uk-text-muted uk-text-center"></h1>'),i.b("\n"+n),i.b("    </div>"),i.b("\n"),i.b("\n"+n),i.b("</div>"),i.fl()},partials:{},subs:{}},'<div id="game">\n    <div class="uk-margin-remove-top" uk-height-viewport>\n        <div class="uk-card uk-card-default uk-card-body uk-border-rounded uk-padding-remove uk-margin-remove uk-box-shadow-large bordered"\n            uk-height-viewport>\n\n            <canvas id="canvas" resize></canvas>\n\n        </div>\n    </div>\n\n    <div id="container-info">\n        <h3 class="uk-heading-line uk-text-uppercase uk-text-center {{colourClass}}"><span>Pict.io Dashboard</span></h3>\n        <h4 id="challenge" class="uk-h4 uk-text-center">{{challenge}}</h4>\n    </div>\n    <div id="container-progress">\n        <div id="progress"></div>\n    </div>\n\n    <div id="container-guess">\n        <h1 id="guess" class="uk-h1 uk-text-bold uk-text-muted uk-text-center"></h1>\n    </div>\n\n</div>',i);return t.render.apply(t,arguments)}},function(t,e,n){t.exports={Line:n(86),Circle:n(35),SemiCircle:n(88),Path:n(34),Shape:n(13),utils:n(5)}},function(t,e,n){var i=n(12);t.exports=function(){var t=new i.Template({code:function(t,e,n){var i=this;return i.b(n=n||""),i.b('<div id="postgame" class="uk-container uk-container-small uk-position-center uk-text-center">'),i.b("\n"+n),i.b('    <div class="'),i.b(i.v(i.f("inverseColour",t,e,0))),i.b('">'),i.b("\n"+n),i.b('        <h1 class="uk-heading-primary" data-i18n="postgmame.status.'),i.b(i.v(i.f("success",t,e,0))),i.b('">'),i.b(i.v(i.f("status",t,e,0))),i.b("</h1>"),i.b("\n"+n),i.b("    </div>"),i.b("\n"),i.b("\n"+n),i.b('    <div class="uk-margin-medium-top" uk-grid>'),i.b("\n"),i.b("\n"+n),i.b('        <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b('            <div class="uk-card uk-card-default uk-width-2-3 uk-margin-small-left uk-padding-remove-left uk-box-shadow-large uk-border-rounded">'),i.b("\n"+n),i.s(i.f("success",t,e,1),t,e,1,0,0,"")||(i.b('            <div class="uk-card-header">'),i.b("\n"+n),i.b('                <h4 class="uk-h4 uk-margin-remove-bottom" data-i18n="postgmame.supposedPhrase">'),i.b(i.v(i.f("supposedPhrase",t,e,0))),i.b("</h4>"),i.b("\n"+n),i.b("            </div>"),i.b("\n"+n)),i.b('            <div id="category" class="uk-card-body uk-background-primary uk-box-shadow-large uk-light">'),i.b("\n"+n),i.b('                <h2 class="uk-h2" data-i18n="categories.'),i.b(i.v(i.f("category",t,e,0))),i.b('">'),i.b(i.v(i.f("category",t,e,0))),i.b("</h2>"),i.b("\n"+n),i.b("            </div>"),i.b("\n"+n),i.b("        </div>"),i.b("\n"),i.b("\n"+n),i.b('        <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b("    </div>"),i.b("\n"),i.b("\n"+n),i.b('    <div class="uk-margin-large-top '),i.b(i.v(i.f("inverseColour",t,e,0))),i.b('">'),i.b("\n"+n),i.b("        <div uk-grid>"),i.b("\n"+n),i.b('            <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b('            <div class="uk-width-2-3">'),i.b("\n"+n),i.b('                <h3 class="uk-h3">'),i.b(i.v(i.f("bestGuessPhrase",t,e,0))),i.b("</h3>"),i.b("\n"+n),i.b('                <div class="tags"></div>'),i.b("\n"+n),i.b("            </div>"),i.b("\n"+n),i.b('            <div class="uk-width-expand"></div>'),i.b("\n"+n),i.b("        </div>"),i.b("\n"+n),i.b("    </div>"),i.b("\n"),i.b("\n"+n),i.b("</div>"),i.fl()},partials:{},subs:{}},'<div id="postgame" class="uk-container uk-container-small uk-position-center uk-text-center">\n    <div class="{{inverseColour}}">\n        <h1 class="uk-heading-primary" data-i18n="postgmame.status.{{success}}">{{status}}</h1>\n    </div>\n\n    <div class="uk-margin-medium-top" uk-grid>\n\n        <div class="uk-width-expand"></div>\n            <div class="uk-card uk-card-default uk-width-2-3 uk-margin-small-left uk-padding-remove-left uk-box-shadow-large uk-border-rounded">\n            {{^success}}\n            <div class="uk-card-header">\n                <h4 class="uk-h4 uk-margin-remove-bottom" data-i18n="postgmame.supposedPhrase">{{supposedPhrase}}</h4>\n            </div>\n            {{/success}}\n            <div id="category" class="uk-card-body uk-background-primary uk-box-shadow-large uk-light">\n                <h2 class="uk-h2" data-i18n="categories.{{category}}">{{category}}</h2>\n            </div>\n        </div>\n\n        <div class="uk-width-expand"></div>\n    </div>\n\n    <div class="uk-margin-large-top {{inverseColour}}">\n        <div uk-grid>\n            <div class="uk-width-expand"></div>\n            <div class="uk-width-2-3">\n                <h3 class="uk-h3">{{bestGuessPhrase}}</h3>\n                <div class="tags"></div>\n            </div>\n            <div class="uk-width-expand"></div>\n        </div>\n    </div>\n\n</div>',i);return t.render.apply(t,arguments)}},function(t,e,n){(function(t){var i=void 0!==t&&t||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function o(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new o(r.call(setTimeout,i,arguments),clearTimeout)},e.setInterval=function(){return new o(r.call(setInterval,i,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(i,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout(function(){t._onTimeout&&t._onTimeout()},e))},n(44),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(6))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var i,r,o,s,a,c=1,u={},l=!1,h=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?i=function(t){e.nextTick(function(){p(t)})}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((o=new MessageChannel).port1.onmessage=function(t){p(t.data)},i=function(t){o.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(r=h.documentElement,i=function(t){var e=h.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,r.removeChild(e),e=null},r.appendChild(e)}):i=function(t){setTimeout(p,0,t)}:(s="setImmediate$"+Math.random()+"$",a=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(s)&&p(+e.data.slice(s.length))},t.addEventListener?t.addEventListener("message",a,!1):t.attachEvent("onmessage",a),i=function(e){t.postMessage(s+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var r={callback:t,args:e};return u[c]=r,i(c),c++},f.clearImmediate=d}function d(t){delete u[t]}function p(t){if(l)setTimeout(p,0,t);else{var e=u[t];if(e){l=!0;try{!function(t){var e=t.callback,i=t.args;switch(i.length){case 0:e();break;case 1:e(i[0]);break;case 2:e(i[0],i[1]);break;case 3:e(i[0],i[1],i[2]);break;default:e.apply(n,i)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(6),n(7))},function(t,e,n){var i=n(20),r=n(8)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(r("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),r("parse %s",t),n=i(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port,n.href=n.protocol+"://"+o+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){function i(t){var n;function i(){if(i.enabled){var t=i,r=+new Date,o=r-(n||r);t.diff=o,t.prev=n,t.curr=r,n=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,i){if("%%"===n)return n;c++;var r=e.formatters[i];if("function"==typeof r){var o=s[c];n=r.call(t,o),s.splice(c,1),c--}return n}),e.formatArgs.call(t,s),(i.log||e.log||console.log.bind(console)).apply(t,s)}}return i.namespace=t,i.enabled=e.enabled(t),i.useColors=e.useColors(),i.color=function(t){var n,i=0;for(n in t)i=(i<<5)-i+t.charCodeAt(n),i|=0;return e.colors[Math.abs(i)%e.colors.length]}(t),i.destroy=r,"function"==typeof e.init&&e.init(i),e.instances.push(i),i}function r(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=i.debug=i.default=i).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var i=("string"==typeof t?t:"").split(/[\s,]+/),r=i.length;for(n=0;n<r;n++)i[n]&&("-"===(t=i[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var o=e.instances[n];o.enabled=e.enabled(o.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,i;for(n=0,i=e.skips.length;n<i;n++)if(e.skips[n].test(t))return!1;for(n=0,i=e.names.length;n<i;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(14),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e,n){(function(i){function r(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG),t}(e=t.exports=n(48)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var i="color: "+this.color;t.splice(1,0,i,"color: inherit");var r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(r++,"%c"===t&&(o=r))}),t.splice(o,0,i)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=r,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(r())}).call(this,n(7))},function(t,e,n){function i(t){var n;function i(){if(i.enabled){var t=i,r=+new Date,o=r-(n||r);t.diff=o,t.prev=n,t.curr=r,n=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,i){if("%%"===n)return n;c++;var r=e.formatters[i];if("function"==typeof r){var o=s[c];n=r.call(t,o),s.splice(c,1),c--}return n}),e.formatArgs.call(t,s),(i.log||e.log||console.log.bind(console)).apply(t,s)}}return i.namespace=t,i.enabled=e.enabled(t),i.useColors=e.useColors(),i.color=function(t){var n,i=0;for(n in t)i=(i<<5)-i+t.charCodeAt(n),i|=0;return e.colors[Math.abs(i)%e.colors.length]}(t),i.destroy=r,"function"==typeof e.init&&e.init(i),e.instances.push(i),i}function r(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=i.debug=i.default=i).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var i=("string"==typeof t?t:"").split(/[\s,]+/),r=i.length;for(n=0;n<r;n++)i[n]&&("-"===(t=i[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var o=e.instances[n];o.enabled=e.enabled(o.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,i;for(n=0,i=e.skips.length;n<i;n++)if(e.skips[n].test(t))return!1;for(n=0,i=e.names.length;n<i;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(14),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e,n){var i=n(21),r=n(22),o=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,o=t;return o.data=function t(e,n){if(!e)return e;if(r(e)){var o={_placeholder:!0,num:n.length};return n.push(e),o}if(i(e)){for(var s=new Array(e.length),a=0;a<e.length;a++)s[a]=t(e[a],n);return s}if("object"==typeof e&&!(e instanceof Date)){var s={};for(var c in e)s[c]=t(e[c],n);return s}return e}(n,e),o.attachments=e.length,{packet:o,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(i(e))for(var r=0;r<e.length;r++)e[r]=t(e[r],n);else if("object"==typeof e)for(var o in e)e[o]=t(e[o],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,o=t;!function t(c,u,l){if(!c)return c;if(s&&c instanceof Blob||a&&c instanceof File){n++;var h=new FileReader;h.onload=function(){l?l[u]=this.result:o=this.result,--n||e(o)},h.readAsArrayBuffer(c)}else if(i(c))for(var f=0;f<c.length;f++)t(c[f],f,c);else if("object"==typeof c&&!r(c))for(var d in c)t(c[d],d,c)}(o),n||e(o)}},function(t,e,n){"use strict";e.byteLength=function(t){var e=u(t),n=e[0],i=e[1];return 3*(n+i)/4-i},e.toByteArray=function(t){for(var e,n=u(t),i=n[0],s=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,i,s)),c=0,l=s>0?i-4:i,h=0;h<l;h+=4)e=r[t.charCodeAt(h)]<<18|r[t.charCodeAt(h+1)]<<12|r[t.charCodeAt(h+2)]<<6|r[t.charCodeAt(h+3)],a[c++]=e>>16&255,a[c++]=e>>8&255,a[c++]=255&e;2===s&&(e=r[t.charCodeAt(h)]<<2|r[t.charCodeAt(h+1)]>>4,a[c++]=255&e);1===s&&(e=r[t.charCodeAt(h)]<<10|r[t.charCodeAt(h+1)]<<4|r[t.charCodeAt(h+2)]>>2,a[c++]=e>>8&255,a[c++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,r=n%3,o=[],s=0,a=n-r;s<a;s+=16383)o.push(l(t,s,s+16383>a?a:s+16383));1===r?(e=t[n-1],o.push(i[e>>2]+i[e<<4&63]+"==")):2===r&&(e=(t[n-2]<<8)+t[n-1],o.push(i[e>>10]+i[e>>4&63]+i[e<<2&63]+"="));return o.join("")};for(var i=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,c=s.length;a<c;++a)i[a]=s[a],r[s.charCodeAt(a)]=a;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var r,o,s=[],a=e;a<n;a+=3)r=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(i[(o=r)>>18&63]+i[o>>12&63]+i[o>>6&63]+i[63&o]);return s.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,i,r){var o,s,a=8*r-i-1,c=(1<<a)-1,u=c>>1,l=-7,h=n?r-1:0,f=n?-1:1,d=t[e+h];for(h+=f,o=d&(1<<-l)-1,d>>=-l,l+=a;l>0;o=256*o+t[e+h],h+=f,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=i;l>0;s=256*s+t[e+h],h+=f,l-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,i),o-=u}return(d?-1:1)*s*Math.pow(2,o-i)},e.write=function(t,e,n,i,r,o){var s,a,c,u=8*o-r-1,l=(1<<u)-1,h=l>>1,f=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,d=i?0:o-1,p=i?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(c=Math.pow(2,-s))<1&&(s--,c*=2),(e+=s+h>=1?f/c:f*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(e*c-1)*Math.pow(2,r),s+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,r),s=0));r>=8;t[n+d]=255&a,d+=p,a/=256,r-=8);for(s=s<<r|a,u+=r;u>0;t[n+d]=255&s,d+=p,s/=256,u-=8);t[n+d-p]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(54),t.exports.parser=n(4)},function(t,e,n){var i=n(24),r=n(3),o=n(11)("engine.io-client:socket"),s=n(28),a=n(4),c=n(20),u=n(9);function l(t,e){if(!(this instanceof l))return new l(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=c(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=c(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=u.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=l,l.priorWebsocketSuccess=!1,r(l.prototype),l.protocol=a.protocol,l.Socket=l,l.Transport=n(18),l.transports=n(24),l.parser=n(4),l.prototype.createTransport=function(t){o('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new i[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},l.prototype.open=function(){var t;if(this.rememberUpgrade&&l.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},l.prototype.setTransport=function(t){o("setting transport %s",t.name);var e=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},l.prototype.probe=function(t){o('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,i=this;function r(){if(i.onlyBinaryUpgrades){var r=!this.supportsBinary&&i.transport.supportsBinary;n=n||r}n||(o('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",function(r){if(!n)if("pong"===r.type&&"probe"===r.data){if(o('probe transport "%s" pong',t),i.upgrading=!0,i.emit("upgrading",e),!e)return;l.priorWebsocketSuccess="websocket"===e.name,o('pausing current transport "%s"',i.transport.name),i.transport.pause(function(){n||"closed"!==i.readyState&&(o("changing transport and sending upgrade packet"),f(),i.setTransport(e),e.send([{type:"upgrade"}]),i.emit("upgrade",e),e=null,i.upgrading=!1,i.flush())})}else{o('probe transport "%s" failed',t);var s=new Error("probe error");s.transport=e.name,i.emit("upgradeError",s)}}))}function s(){n||(n=!0,f(),e.close(),e=null)}function a(n){var r=new Error("probe error: "+n);r.transport=e.name,s(),o('probe transport "%s" failed because of error: %s',t,n),i.emit("upgradeError",r)}function c(){a("transport closed")}function u(){a("socket closed")}function h(t){e&&t.name!==e.name&&(o('"%s" works - aborting "%s"',t.name,e.name),s())}function f(){e.removeListener("open",r),e.removeListener("error",a),e.removeListener("close",c),i.removeListener("close",u),i.removeListener("upgrading",h)}l.priorWebsocketSuccess=!1,e.once("open",r),e.once("error",a),e.once("close",c),this.once("close",u),this.once("upgrading",h),e.open()},l.prototype.onOpen=function(){if(o("socket open"),this.readyState="open",l.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){o("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},l.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else o('packet received with socket readyState "%s"',this.readyState)},l.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},l.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},l.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){o("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},l.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},l.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},l.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},l.prototype.write=l.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},l.prototype.sendPacket=function(t,e,n,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof n&&(i=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var r={type:t,data:e,options:n};this.emit("packetCreate",r),this.writeBuffer.push(r),i&&this.once("flush",i),this.flush()}},l.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?i():e()}):this.upgrading?i():e()}function e(){t.onClose("forced close"),o("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function i(){t.once("upgrade",n),t.once("upgradeError",n)}return this},l.prototype.onError=function(t){o("socket error %j",t),l.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},l.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},l.prototype.filterUpgrades=function(t){for(var e=[],n=0,i=t.length;n<i;n++)~s(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var i=n(17),r=n(25),o=n(3),s=n(10),a=n(11)("engine.io-client:polling-xhr");function c(){}function u(t){if(r.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function l(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=u,t.exports.Request=l,s(u,r),u.prototype.supportsBinary=!0,u.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new l(t)},u.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,i=this.request({method:"POST",data:t,isBinary:n}),r=this;i.on("success",e),i.on("error",function(t){r.onError("xhr post error",t)}),this.sendXhr=i},u.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},o(l.prototype),l.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new i(t),n=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var r in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(r)&&e.setRequestHeader(r,this.extraHeaders[r])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=!0),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");n.supportsBinary&&"application/octet-stream"===t&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout(function(){n.onError(e.status)},0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout(function(){n.onError(t)},0)}"undefined"!=typeof document&&(this.index=l.requestsCount++,l.requests[this.index]=this)},l.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},l.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},l.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},l.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete l.requests[this.index],this.xhr=null}},l.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t="application/octet-stream"===e&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},l.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},l.prototype.abort=function(){this.cleanup()},l.requestsCount=0,l.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){var h="onpagehide"in self?"pagehide":"unload";addEventListener(h,f,!1)}function f(){for(var t in l.requests)l.requests.hasOwnProperty(t)&&l.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var i in t)n.call(t,i)&&e.push(i);return e}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports=function(t,e,n){var i=t.byteLength;if(e=e||0,n=n||i,t.slice)return t.slice(e,n);if(e<0&&(e+=i),n<0&&(n+=i),n>i&&(n=i),e>=i||e>=n||0===i)return new ArrayBuffer(0);for(var r=new Uint8Array(t),o=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)o[a]=r[s];return o.buffer}},function(t,e){function n(){}t.exports=function(t,e,i){var r=!1;return i=i||n,o.count=t,0===t?e():o;function o(t,n){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(r=!0,e(t),e=i):0!==o.count||r||e(null,n)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,i,r,o=String.fromCharCode;function s(t){for(var e,n,i=[],r=0,o=t.length;r<o;)(e=t.charCodeAt(r++))>=55296&&e<=56319&&r<o?56320==(64512&(n=t.charCodeAt(r++)))?i.push(((1023&e)<<10)+(1023&n)+65536):(i.push(e),r--):i.push(e);return i}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function c(t,e){return o(t>>e&63|128)}function u(t,e){if(0==(4294967168&t))return o(t);var n="";return 0==(4294965248&t)?n=o(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),n=o(t>>12&15|224),n+=c(t,6)):0==(4292870144&t)&&(n=o(t>>18&7|240),n+=c(t,12),n+=c(t,6)),n+=o(63&t|128)}function l(){if(r>=i)throw Error("Invalid byte index");var t=255&n[r];if(r++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function h(t){var e,o;if(r>i)throw Error("Invalid byte index");if(r==i)return!1;if(e=255&n[r],r++,0==(128&e))return e;if(192==(224&e)){if((o=(31&e)<<6|l())>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&e)){if((o=(15&e)<<12|l()<<6|l())>=2048)return a(o,t)?o:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(o=(7&e)<<18|l()<<12|l()<<6|l())>=65536&&o<=1114111)return o;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,i=s(t),r=i.length,o=-1,a="";++o<r;)a+=u(i[o],n);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;n=s(t),i=n.length,r=0;for(var c,u=[];!1!==(c=h(a));)u.push(c);return function(t){for(var e,n=t.length,i=-1,r="";++i<n;)(e=t[i])>65535&&(r+=o((e-=65536)>>>10&1023|55296),e=56320|1023&e),r+=o(e);return r}(u)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),i=0;i<t.length;i++)n[t.charCodeAt(i)]=i;e.encode=function(e){var n,i=new Uint8Array(e),r=i.length,o="";for(n=0;n<r;n+=3)o+=t[i[n]>>2],o+=t[(3&i[n])<<4|i[n+1]>>4],o+=t[(15&i[n+1])<<2|i[n+2]>>6],o+=t[63&i[n+2]];return r%3==2?o=o.substring(0,o.length-1)+"=":r%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(t){var e,i,r,o,s,a=.75*t.length,c=t.length,u=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var l=new ArrayBuffer(a),h=new Uint8Array(l);for(e=0;e<c;e+=4)i=n[t.charCodeAt(e)],r=n[t.charCodeAt(e+1)],o=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],h[u++]=i<<2|r>>4,h[u++]=(15&r)<<4|o>>2,h[u++]=(3&o)<<6|63&s;return l}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,i=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),r=i&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),o=n&&n.prototype.append&&n.prototype.getBlob;function s(t){return t.map(function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t})}function a(t,e){e=e||{};var i=new n;return s(t).forEach(function(t){i.append(t)}),e.type?i.getBlob(e.type):i.getBlob()}function c(t,e){return new Blob(s(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,c.prototype=Blob.prototype),t.exports=i?r?Blob:c:o?a:void 0},function(t,e,n){function i(t){var n;function i(){if(i.enabled){var t=i,r=+new Date,o=r-(n||r);t.diff=o,t.prev=n,t.curr=r,n=r;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,i){if("%%"===n)return n;c++;var r=e.formatters[i];if("function"==typeof r){var o=s[c];n=r.call(t,o),s.splice(c,1),c--}return n}),e.formatArgs.call(t,s),(i.log||e.log||console.log.bind(console)).apply(t,s)}}return i.namespace=t,i.enabled=e.enabled(t),i.useColors=e.useColors(),i.color=function(t){var n,i=0;for(n in t)i=(i<<5)-i+t.charCodeAt(n),i|=0;return e.colors[Math.abs(i)%e.colors.length]}(t),i.destroy=r,"function"==typeof e.init&&e.init(i),e.instances.push(i),i}function r(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=i.debug=i.default=i).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var i=("string"==typeof t?t:"").split(/[\s,]+/),r=i.length;for(n=0;n<r;n++)i[n]&&("-"===(t=i[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var o=e.instances[n];o.enabled=e.enabled(o.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,i;for(n=0,i=e.skips.length;n<i;n++)if(e.skips[n].test(t))return!1;for(n=0,i=e.names.length;n<i;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(14),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e,n){(function(e){var i=n(25),r=n(10);t.exports=l;var o,s=/\n/g,a=/\\n/g;function c(){}function u(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}}function l(t){if(i.call(this,t),this.query=this.query||{},!o){var e=u();o=e.___eio=e.___eio||[]}this.index=o.length;var n=this;o.push(function(t){n.onData(t)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){n.script&&(n.script.onerror=c)},!1)}r(l,i),l.prototype.supportsBinary=!1,l.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},l.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},l.prototype.doWrite=function(t,e){var n=this;if(!this.form){var i,r=document.createElement("form"),o=document.createElement("textarea"),c=this.iframeId="eio_iframe_"+this.index;r.className="socketio",r.style.position="absolute",r.style.top="-1000px",r.style.left="-1000px",r.target=c,r.method="POST",r.setAttribute("accept-charset","utf-8"),o.name="d",r.appendChild(o),document.body.appendChild(r),this.form=r,this.area=o}function u(){l(),e()}function l(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';i=document.createElement(t)}catch(t){(i=document.createElement("iframe")).name=n.iframeId,i.src="javascript:0"}i.id=n.iframeId,n.form.appendChild(i),n.iframe=i}this.form.action=this.uri(),l(),t=t.replace(a,"\\\n"),this.area.value=t.replace(s,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&u()}:this.iframe.onload=u}}).call(this,n(6))},function(t,e,n){(function(e){var i,r,o=n(18),s=n(4),a=n(9),c=n(10),u=n(27),l=n(11)("engine.io-client:websocket");if("undefined"!=typeof WebSocket)i=WebSocket;else if("undefined"!=typeof self)i=self.WebSocket||self.MozWebSocket;else try{r=n(67)}catch(t){}var h=i||r;function f(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=i&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(h=r),o.call(this,t)}t.exports=f,c(f,o),f.prototype.name="websocket",f.prototype.supportsBinary=!0,f.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new h(t,e):new h(t):new h(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},f.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},f.prototype.write=function(t){var n=this;this.writable=!1;for(var i=t.length,r=0,o=i;r<o;r++)!function(t){s.encodePacket(t,n.supportsBinary,function(r){if(!n.usingBrowserWebSocket){var o={};if(t.options&&(o.compress=t.options.compress),n.perMessageDeflate)("string"==typeof r?e.byteLength(r):r.length)<n.perMessageDeflate.threshold&&(o.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(r):n.ws.send(r,o)}catch(t){l("websocket closed before onclose event")}--i||a()})}(t[r]);function a(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},f.prototype.onClose=function(){o.prototype.onClose.call(this)},f.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},f.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=u()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},f.prototype.check=function(){return!(!h||"__initialize"in h&&this.name===f.prototype.name)}}).call(this,n(16).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],i=(e=e||0)||0;i<t.length;i++)n[i-e]=t[i];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e,n){n(1),n(71),n(72),n(73),n(74),n(75),n(76),n(77),n(78),n(79),n(80),n(32),n(81),n(33),n(82),n(83)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Blind 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("blind","hide",function(e,n){var i={up:["bottom","top"],vertical:["bottom","top"],down:["top","bottom"],left:["right","left"],horizontal:["right","left"],right:["left","right"]},r=t(this),o=e.direction||"up",s=r.cssClip(),a={clip:t.extend({},s)},c=t.effects.createPlaceholder(r);a.clip[i[o][0]]=a.clip[i[o][1]],"show"===e.mode&&(r.cssClip(a.clip),c&&c.css(t.effects.clipToBox(a)),a.clip=s),c&&c.animate(t.effects.clipToBox(a),e.duration,e.easing),r.animate(a,{queue:!1,duration:e.duration,easing:e.easing,complete:n})})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Bounce 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("bounce",function(e,n){var i,r,o,s=t(this),a=e.mode,c="hide"===a,u="show"===a,l=e.direction||"up",h=e.distance,f=e.times||5,d=2*f+(u||c?1:0),p=e.duration/d,g=e.easing,v="up"===l||"down"===l?"top":"left",m="up"===l||"left"===l,w=0,y=s.queue().length;for(t.effects.createPlaceholder(s),o=s.css(v),h||(h=s["top"===v?"outerHeight":"outerWidth"]()/3),u&&((r={opacity:1})[v]=o,s.css("opacity",0).css(v,m?2*-h:2*h).animate(r,p,g)),c&&(h/=Math.pow(2,f-1)),(r={})[v]=o;w<f;w++)(i={})[v]=(m?"-=":"+=")+h,s.animate(i,p,g).animate(r,p,g),h=c?2*h:h/2;c&&((i={opacity:0})[v]=(m?"-=":"+=")+h,s.animate(i,p,g)),s.queue(n),t.effects.unshift(s,y,d+1)})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Clip 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("clip","hide",function(e,n){var i,r={},o=t(this),s=e.direction||"vertical",a="both"===s,c=a||"horizontal"===s,u=a||"vertical"===s;i=o.cssClip(),r.clip={top:u?(i.bottom-i.top)/2:i.top,right:c?(i.right-i.left)/2:i.right,bottom:u?(i.bottom-i.top)/2:i.bottom,left:c?(i.right-i.left)/2:i.left},t.effects.createPlaceholder(o),"show"===e.mode&&(o.cssClip(r.clip),r.clip=i),o.animate(r,{queue:!1,duration:e.duration,easing:e.easing,complete:n})})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Drop 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("drop","hide",function(e,n){var i,r=t(this),o=e.mode,s="show"===o,a=e.direction||"left",c="up"===a||"down"===a?"top":"left",u="up"===a||"left"===a?"-=":"+=",l="+="===u?"-=":"+=",h={opacity:0};t.effects.createPlaceholder(r),i=e.distance||r["top"===c?"outerHeight":"outerWidth"](!0)/2,h[c]=u+i,s&&(r.css(h),h[c]=l+i,h.opacity=1),r.animate(h,{queue:!1,duration:e.duration,easing:e.easing,complete:n})})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Explode 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("explode","hide",function(e,n){var i,r,o,s,a,c,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,l=u,h=t(this),f=e.mode,d="show"===f,p=h.show().css("visibility","hidden").offset(),g=Math.ceil(h.outerWidth()/l),v=Math.ceil(h.outerHeight()/u),m=[];function w(){m.push(this),m.length===u*l&&(h.css({visibility:"visible"}),t(m).remove(),n())}for(i=0;i<u;i++)for(s=p.top+i*v,c=i-(u-1)/2,r=0;r<l;r++)o=p.left+r*g,a=r-(l-1)/2,h.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-r*g,top:-i*v}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:g,height:v,left:o+(d?a*g:0),top:s+(d?c*v:0),opacity:d?0:1}).animate({left:o+(d?0:a*g),top:s+(d?0:c*v),opacity:d?1:0},e.duration||500,e.easing,w)})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Fade 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("fade","toggle",function(e,n){var i="show"===e.mode;t(this).css("opacity",i?0:1).animate({opacity:i?1:0},{queue:!1,duration:e.duration,easing:e.easing,complete:n})})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Fold 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("fold","hide",function(e,n){var i=t(this),r=e.mode,o="show"===r,s="hide"===r,a=e.size||15,c=/([0-9]+)%/.exec(a),u=!!e.horizFirst,l=u?["right","bottom"]:["bottom","right"],h=e.duration/2,f=t.effects.createPlaceholder(i),d=i.cssClip(),p={clip:t.extend({},d)},g={clip:t.extend({},d)},v=[d[l[0]],d[l[1]]],m=i.queue().length;c&&(a=parseInt(c[1],10)/100*v[s?0:1]),p.clip[l[0]]=a,g.clip[l[0]]=a,g.clip[l[1]]=0,o&&(i.cssClip(g.clip),f&&f.css(t.effects.clipToBox(g)),g.clip=d),i.queue(function(n){f&&f.animate(t.effects.clipToBox(p),h,e.easing).animate(t.effects.clipToBox(g),h,e.easing),n()}).animate(p,h,e.easing).animate(g,h,e.easing).queue(n),t.effects.unshift(i,m,4)})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Highlight 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("highlight","show",function(e,n){var i=t(this),r={backgroundColor:i.css("backgroundColor")};"hide"===e.mode&&(r.opacity=0),t.effects.saveStyle(i),i.css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(r,{queue:!1,duration:e.duration,easing:e.easing,complete:n})})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Puff 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1),n(32)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("puff","hide",function(e,n){var i=t.extend(!0,{},e,{fade:!0,percent:parseInt(e.percent,10)||150});t.effects.effect.scale.call(this,i,n)})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Pulsate 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("pulsate","show",function(e,n){var i=t(this),r=e.mode,o="show"===r,s="hide"===r,a=o||s,c=2*(e.times||5)+(a?1:0),u=e.duration/c,l=0,h=1,f=i.queue().length;for(!o&&i.is(":visible")||(i.css("opacity",0).show(),l=1);h<c;h++)i.animate({opacity:l},u,e.easing),l=1-l;i.animate({opacity:l},u,e.easing),i.queue(n),t.effects.unshift(i,f,c+1)})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Shake 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("shake",function(e,n){var i=1,r=t(this),o=e.direction||"left",s=e.distance||20,a=e.times||3,c=2*a+1,u=Math.round(e.duration/c),l="up"===o||"down"===o?"top":"left",h="up"===o||"left"===o,f={},d={},p={},g=r.queue().length;for(t.effects.createPlaceholder(r),f[l]=(h?"-=":"+=")+s,d[l]=(h?"+=":"-=")+2*s,p[l]=(h?"-=":"+=")+2*s,r.animate(f,u,e.easing);i<a;i++)r.animate(d,u,e.easing).animate(p,u,e.easing);r.animate(d,u,e.easing).animate(f,u/2,e.easing).queue(n),t.effects.unshift(r,g,c+1)})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Slide 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){return t.effects.define("slide","show",function(e,n){var i,r,o=t(this),s={up:["bottom","top"],down:["top","bottom"],left:["right","left"],right:["left","right"]},a=e.mode,c=e.direction||"left",u="up"===c||"down"===c?"top":"left",l="up"===c||"left"===c,h=e.distance||o["top"===u?"outerHeight":"outerWidth"](!0),f={};t.effects.createPlaceholder(o),i=o.cssClip(),r=o.position()[u],f[u]=(l?-1:1)*h+r,f.clip=o.cssClip(),f.clip[s[c][1]]=f.clip[s[c][0]],"show"===a&&(o.cssClip(f.clip),o.css(u,f[u]),f.clip=i,f[u]=r),o.animate(f,{queue:!1,duration:e.duration,easing:e.easing,complete:n})})})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){var i,r,o;
/*!
 * jQuery UI Effects Transfer 1.12.1
 * http://jqueryui.com
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 */r=[n(0),n(2),n(1)],void 0===(o="function"==typeof(i=function(t){var e;return!1!==t.uiBackCompat&&(e=t.effects.define("transfer",function(e,n){t(this).transfer(e,n)})),e})?i.apply(e,r):i)||(t.exports=o)},function(t,e,n){!function(t){var e=/\S/,n=/\"/g,i=/\n/g,r=/\r/g,o=/\\/g,s=/\u2028/,a=/\u2029/;function c(t){"}"===t.n.substr(t.n.length-1)&&(t.n=t.n.substring(0,t.n.length-1))}function u(t){return t.trim?t.trim():t.replace(/^\s*|\s*$/g,"")}function l(t,e,n){if(e.charAt(n)!=t.charAt(0))return!1;for(var i=1,r=t.length;i<r;i++)if(e.charAt(n+i)!=t.charAt(i))return!1;return!0}t.tags={"#":1,"^":2,"<":3,$:4,"/":5,"!":6,">":7,"=":8,_v:9,"{":10,"&":11,_t:12},t.scan=function(n,i){var r=n.length,o=0,s=null,a=null,h="",f=[],d=!1,p=0,g=0,v="{{",m="}}";function w(){h.length>0&&(f.push({tag:"_t",text:new String(h)}),h="")}function y(n,i){if(w(),n&&function(){for(var n=!0,i=g;i<f.length;i++)if(!(n=t.tags[f[i].tag]<t.tags._v||"_t"==f[i].tag&&null===f[i].text.match(e)))return!1;return n}())for(var r,o=g;o<f.length;o++)f[o].text&&((r=f[o+1])&&">"==r.tag&&(r.indent=f[o].text.toString()),f.splice(o,1));else i||f.push({tag:"\n"});d=!1,g=f.length}function b(t,e){var n="="+m,i=t.indexOf(n,e),r=u(t.substring(t.indexOf("=",e)+1,i)).split(" ");return v=r[0],m=r[r.length-1],i+n.length-1}for(i&&(i=i.split(" "),v=i[0],m=i[1]),p=0;p<r;p++)0==o?l(v,n,p)?(--p,w(),o=1):"\n"==n.charAt(p)?y(d):h+=n.charAt(p):1==o?(p+=v.length-1,"="==(s=(a=t.tags[n.charAt(p+1)])?n.charAt(p+1):"_v")?(p=b(n,p),o=0):(a&&p++,o=2),d=p):l(m,n,p)?(f.push({tag:s,n:u(h),otag:v,ctag:m,i:"/"==s?d-v.length:p+m.length}),h="",p+=m.length-1,o=0,"{"==s&&("}}"==m?p++:c(f[f.length-1]))):h+=n.charAt(p);return y(d,!0),f};var h={_t:!0,"\n":!0,$:!0,"/":!0};function f(t,e){for(var n=0,i=e.length;n<i;n++)if(e[n].o==t.n)return t.tag="#",!0}function d(t,e,n){for(var i=0,r=n.length;i<r;i++)if(n[i].c==t&&n[i].o==e)return!0}function p(t){var e=[];for(var n in t.partials)e.push('"'+v(n)+'":{name:"'+v(t.partials[n].name)+'", '+p(t.partials[n])+"}");return"partials: {"+e.join(",")+"}, subs: "+function(t){var e=[];for(var n in t)e.push('"'+v(n)+'": function(c,p,t,i) {'+t[n]+"}");return"{ "+e.join(",")+" }"}(t.subs)}t.stringify=function(e,n,i){return"{code: function (c,p,i) { "+t.wrapMain(e.code)+" },"+p(e)+"}"};var g=0;function v(t){return t.replace(o,"\\\\").replace(n,'\\"').replace(i,"\\n").replace(r,"\\r").replace(s,"\\u2028").replace(a,"\\u2029")}function m(t){return~t.indexOf(".")?"d":"f"}function w(t,e){var n="<"+(e.prefix||"")+t.n+g++;return e.partials[n]={name:t.n,partials:{}},e.code+='t.b(t.rp("'+v(n)+'",c,p,"'+(t.indent||"")+'"));',n}function y(t,e){e.code+="t.b(t.t(t."+m(t.n)+'("'+v(t.n)+'",c,p,0)));'}function b(t){return"t.b("+t+");"}t.generate=function(e,n,i){g=0;var r={code:"",subs:{},partials:{}};return t.walk(e,r),i.asString?this.stringify(r,n,i):this.makeTemplate(r,n,i)},t.wrapMain=function(t){return'var t=this;t.b(i=i||"");'+t+"return t.fl();"},t.template=t.Template,t.makeTemplate=function(t,e,n){var i=this.makePartials(t);return i.code=new Function("c","p","i",this.wrapMain(t.code)),new this.template(i,e,this,n)},t.makePartials=function(t){var e,n={subs:{},partials:t.partials,name:t.name};for(e in n.partials)n.partials[e]=this.makePartials(n.partials[e]);for(e in t.subs)n.subs[e]=new Function("c","p","t","i",t.subs[e]);return n},t.codegen={"#":function(e,n){n.code+="if(t.s(t."+m(e.n)+'("'+v(e.n)+'",c,p,1),c,p,0,'+e.i+","+e.end+',"'+e.otag+" "+e.ctag+'")){t.rs(c,p,function(c,p,t){',t.walk(e.nodes,n),n.code+="});c.pop();}"},"^":function(e,n){n.code+="if(!t.s(t."+m(e.n)+'("'+v(e.n)+'",c,p,1),c,p,1,0,0,"")){',t.walk(e.nodes,n),n.code+="};"},">":w,"<":function(e,n){var i={partials:{},code:"",subs:{},inPartial:!0};t.walk(e.nodes,i);var r=n.partials[w(e,n)];r.subs=i.subs,r.partials=i.partials},$:function(e,n){var i={subs:{},code:"",partials:n.partials,prefix:e.n};t.walk(e.nodes,i),n.subs[e.n]=i.code,n.inPartial||(n.code+='t.sub("'+v(e.n)+'",c,p,i);')},"\n":function(t,e){e.code+=b('"\\n"'+(t.last?"":" + i"))},_v:function(t,e){e.code+="t.b(t.v(t."+m(t.n)+'("'+v(t.n)+'",c,p,0)));'},_t:function(t,e){e.code+=b('"'+v(t.text)+'"')},"{":y,"&":y},t.walk=function(e,n){for(var i,r=0,o=e.length;r<o;r++)(i=t.codegen[e[r].tag])&&i(e[r],n);return n},t.parse=function(e,n,i){return function e(n,i,r,o){var s,a=[],c=null,u=null;for(s=r[r.length-1];n.length>0;){if(u=n.shift(),s&&"<"==s.tag&&!(u.tag in h))throw new Error("Illegal content in < super tag.");if(t.tags[u.tag]<=t.tags.$||f(u,o))r.push(u),u.nodes=e(n,u.tag,r,o);else{if("/"==u.tag){if(0===r.length)throw new Error("Closing tag without opener: /"+u.n);if(c=r.pop(),u.n!=c.n&&!d(u.n,c.n,o))throw new Error("Nesting error: "+c.n+" vs. "+u.n);return c.end=u.i,a}"\n"==u.tag&&(u.last=0==n.length||"\n"==n[0].tag)}a.push(u)}if(r.length>0)throw new Error("missing closing tag: "+r.pop().n);return a}(e,0,[],(i=i||{}).sectionTags||[])},t.cache={},t.cacheKey=function(t,e){return[t,!!e.asString,!!e.disableLambda,e.delimiters,!!e.modelGet].join("||")},t.compile=function(e,n){n=n||{};var i=t.cacheKey(e,n),r=this.cache[i];if(r){var o=r.partials;for(var s in o)delete o[s].instance;return r}return r=this.generate(this.parse(this.scan(e,n.delimiters),e,n),e,n),this.cache[i]=r}}(e)},function(t,e,n){!function(t){function e(t,e,n){var i;return e&&"object"==typeof e&&(void 0!==e[t]?i=e[t]:n&&e.get&&"function"==typeof e.get&&(i=e.get(t))),i}t.Template=function(t,e,n,i){t=t||{},this.r=t.code||this.r,this.c=n,this.options=i||{},this.text=e||"",this.partials=t.partials||{},this.subs=t.subs||{},this.buf=""},t.Template.prototype={r:function(t,e,n){return""},v:function(t){return t=c(t),a.test(t)?t.replace(n,"&amp;").replace(i,"&lt;").replace(r,"&gt;").replace(o,"&#39;").replace(s,"&quot;"):t},t:c,render:function(t,e,n){return this.ri([t],e||{},n)},ri:function(t,e,n){return this.r(t,e,n)},ep:function(t,e){var n=this.partials[t],i=e[n.name];if(n.instance&&n.base==i)return n.instance;if("string"==typeof i){if(!this.c)throw new Error("No compiler available.");i=this.c.compile(i,this.options)}if(!i)return null;if(this.partials[t].base=i,n.subs){for(key in e.stackText||(e.stackText={}),n.subs)e.stackText[key]||(e.stackText[key]=void 0!==this.activeSub&&e.stackText[this.activeSub]?e.stackText[this.activeSub]:this.text);i=function(t,e,n,i,r,o){function s(){}function a(){}var c;s.prototype=t,a.prototype=t.subs;var u=new s;for(c in u.subs=new a,u.subsText={},u.buf="",i=i||{},u.stackSubs=i,u.subsText=o,e)i[c]||(i[c]=e[c]);for(c in i)u.subs[c]=i[c];for(c in r=r||{},u.stackPartials=r,n)r[c]||(r[c]=n[c]);for(c in r)u.partials[c]=r[c];return u}(i,n.subs,n.partials,this.stackSubs,this.stackPartials,e.stackText)}return this.partials[t].instance=i,i},rp:function(t,e,n,i){var r=this.ep(t,n);return r?r.ri(e,n,i):""},rs:function(t,e,n){var i=t[t.length-1];if(u(i))for(var r=0;r<i.length;r++)t.push(i[r]),n(t,e,this),t.pop();else n(t,e,this)},s:function(t,e,n,i,r,o,s){var a;return(!u(t)||0!==t.length)&&("function"==typeof t&&(t=this.ms(t,e,n,i,r,o,s)),a=!!t,!i&&a&&e&&e.push("object"==typeof t?t:e[e.length-1]),a)},d:function(t,n,i,r){var o,s=t.split("."),a=this.f(s[0],n,i,r),c=this.options.modelGet,l=null;if("."===t&&u(n[n.length-2]))a=n[n.length-1];else for(var h=1;h<s.length;h++)void 0!==(o=e(s[h],a,c))?(l=a,a=o):a="";return!(r&&!a)&&(r||"function"!=typeof a||(n.push(l),a=this.mv(a,n,i),n.pop()),a)},f:function(t,n,i,r){for(var o=!1,s=!1,a=this.options.modelGet,c=n.length-1;c>=0;c--)if(void 0!==(o=e(t,n[c],a))){s=!0;break}return s?(r||"function"!=typeof o||(o=this.mv(o,n,i)),o):!r&&""},ls:function(t,e,n,i,r){var o=this.options.delimiters;return this.options.delimiters=r,this.b(this.ct(c(t.call(e,i)),e,n)),this.options.delimiters=o,!1},ct:function(t,e,n){if(this.options.disableLambda)throw new Error("Lambda features disabled.");return this.c.compile(t,this.options).render(e,n)},b:function(t){this.buf+=t},fl:function(){var t=this.buf;return this.buf="",t},ms:function(t,e,n,i,r,o,s){var a,c=e[e.length-1],u=t.call(c);return"function"==typeof u?!!i||(a=this.activeSub&&this.subsText&&this.subsText[this.activeSub]?this.subsText[this.activeSub]:this.text,this.ls(u,c,n,a.substring(r,o),s)):u},mv:function(t,e,n){var i=e[e.length-1],r=t.call(i);return"function"==typeof r?this.ct(c(r.call(i)),i,n):r},sub:function(t,e,n,i){var r=this.subs[t];r&&(this.activeSub=t,r(e,n,this,i),this.activeSub=!1)}};var n=/&/g,i=/</g,r=/>/g,o=/\'/g,s=/\"/g,a=/[&<>\"\']/;function c(t){return String(null==t?"":t)}var u=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}}(e)},function(t,e,n){var i=n(13),r=n(5),o=function(t,e){this._pathTemplate="M 0,{center} L 100,{center}",i.apply(this,arguments)};(o.prototype=new i).constructor=o,o.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 "+e.strokeWidth),t.setAttribute("preserveAspectRatio","none")},o.prototype._pathString=function(t){return r.render(this._pathTemplate,{center:t.strokeWidth/2})},o.prototype._trailString=function(t){return this._pathString(t)},t.exports=o},function(t,e,n){(function(){var e=this||Function("return this")(),n=function(){"use strict";var n,i,r,o,s,a,c="linear",u=1e3/60,l=Date.now?Date.now:function(){return+new Date},h="undefined"!=typeof SHIFTY_DEBUG_NOW?SHIFTY_DEBUG_NOW:l;function f(){}function d(t,e){var n;for(n in t)Object.hasOwnProperty.call(t,n)&&e(n)}function p(t,e){return d(e,function(n){t[n]=e[n]}),t}function g(t,e){d(e,function(n){void 0===t[n]&&(t[n]=e[n])})}function v(t,e,i,r,o,s,a){var c,u,l,h=t<s?0:(t-s)/o;for(c in e)e.hasOwnProperty(c)&&(l="function"==typeof(u=a[c])?u:n[u],e[c]=m(i[c],r[c],l,h));return e}function m(t,e,n,i){return t+(e-t)*n(i)}function w(t,e){var n=x.prototype.filter,i=t._filterArgs;d(n,function(r){void 0!==n[r][e]&&n[r][e].apply(t,i)})}function y(t,e,n,i,c,l,f,d,p,g,m){r=e+n+i,o=Math.min(m||h(),r),s=o>=r,a=i-(r-o),t.isPlaying()&&(s?(p(f,t._attachment,a),t.stop(!0)):(t._scheduleId=g(t._timeoutHandler,u),w(t,"beforeTween"),o<e+n?v(1,c,l,f,1,1,d):v(o,c,l,f,i,e+n,d),w(t,"afterTween"),p(c,t._attachment,a)))}function b(t,e){var n={},i=typeof e;return d(t,"string"===i||"function"===i?function(t){n[t]=e}:function(t){n[t]||(n[t]=e[t]||c)}),n}function x(t,e){this._currentState=t||{},this._configured=!1,this._scheduleFunction=i,void 0!==e&&this.setConfig(e)}return i="undefined"!=typeof window&&(window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||window.mozCancelRequestAnimationFrame&&window.mozRequestAnimationFrame)||setTimeout,x.prototype.tween=function(t){return this._isTweening?this:(void 0===t&&this._configured||this.setConfig(t),this._timestamp=h(),this._start(this.get(),this._attachment),this.resume())},x.prototype.setConfig=function(t){t=t||{},this._configured=!0,this._attachment=t.attachment,this._pausedAtTime=null,this._scheduleId=null,this._delay=t.delay||0,this._start=t.start||f,this._step=t.step||f,this._finish=t.finish||f,this._duration=t.duration||500,this._currentState=p({},t.from||this.get()),this._originalState=this.get(),this._targetState=p({},t.to||this.get());var e=this;this._timeoutHandler=function(){y(e,e._timestamp,e._delay,e._duration,e._currentState,e._originalState,e._targetState,e._easing,e._step,e._scheduleFunction)};var n=this._currentState,i=this._targetState;return g(i,n),this._easing=b(n,t.easing||c),this._filterArgs=[n,this._originalState,i,this._easing],w(this,"tweenCreated"),this},x.prototype.get=function(){return p({},this._currentState)},x.prototype.set=function(t){this._currentState=t},x.prototype.pause=function(){return this._pausedAtTime=h(),this._isPaused=!0,this},x.prototype.resume=function(){return this._isPaused&&(this._timestamp+=h()-this._pausedAtTime),this._isPaused=!1,this._isTweening=!0,this._timeoutHandler(),this},x.prototype.seek=function(t){t=Math.max(t,0);var e=h();return this._timestamp+t===0?this:(this._timestamp=e-t,this.isPlaying()||(this._isTweening=!0,this._isPaused=!1,y(this,this._timestamp,this._delay,this._duration,this._currentState,this._originalState,this._targetState,this._easing,this._step,this._scheduleFunction,e),this.pause()),this)},x.prototype.stop=function(t){return this._isTweening=!1,this._isPaused=!1,this._timeoutHandler=f,(e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.oCancelAnimationFrame||e.msCancelAnimationFrame||e.mozCancelRequestAnimationFrame||e.clearTimeout)(this._scheduleId),t&&(w(this,"beforeTween"),v(1,this._currentState,this._originalState,this._targetState,1,0,this._easing),w(this,"afterTween"),w(this,"afterTweenEnd"),this._finish.call(this,this._currentState,this._attachment)),this},x.prototype.isPlaying=function(){return this._isTweening&&!this._isPaused},x.prototype.setScheduleFunction=function(t){this._scheduleFunction=t},x.prototype.dispose=function(){var t;for(t in this)this.hasOwnProperty(t)&&delete this[t]},x.prototype.filter={},x.prototype.formula={linear:function(t){return t}},n=x.prototype.formula,p(x,{now:h,each:d,tweenProps:v,tweenProp:m,applyFilter:w,shallowCopy:p,defaults:g,composeEasingObject:b}),"function"==typeof SHIFTY_DEBUG_NOW&&(e.timeoutHandler=y),t.exports=x,x}();n.shallowCopy(n.prototype.formula,{easeInQuad:function(t){return Math.pow(t,2)},easeOutQuad:function(t){return-(Math.pow(t-1,2)-1)},easeInOutQuad:function(t){return(t/=.5)<1?.5*Math.pow(t,2):-.5*((t-=2)*t-2)},easeInCubic:function(t){return Math.pow(t,3)},easeOutCubic:function(t){return Math.pow(t-1,3)+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*Math.pow(t,3):.5*(Math.pow(t-2,3)+2)},easeInQuart:function(t){return Math.pow(t,4)},easeOutQuart:function(t){return-(Math.pow(t-1,4)-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},easeInQuint:function(t){return Math.pow(t,5)},easeOutQuint:function(t){return Math.pow(t-1,5)+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*Math.pow(t,5):.5*(Math.pow(t-2,5)+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-Math.pow(t-1,2))},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},elastic:function(t){return-1*Math.pow(4,-8*t)*Math.sin((6*t-1)*(2*Math.PI)/2)+1},swingFromTo:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},swingFrom:function(t){var e=1.70158;return t*t*((e+1)*t-e)},swingTo:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},bounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},bouncePast:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?2-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?2-(7.5625*(t-=2.25/2.75)*t+.9375):2-(7.5625*(t-=2.625/2.75)*t+.984375)},easeFromTo:function(t){return(t/=.5)<1?.5*Math.pow(t,4):-.5*((t-=2)*Math.pow(t,3)-2)},easeFrom:function(t){return Math.pow(t,4)},easeTo:function(t){return Math.pow(t,.25)}}),function(){function t(t,e,n,i,r,o){var s=0,a=0,c=0,u=0,l=0,h=0;function f(t){return((s*t+a)*t+c)*t}function d(t){return t>=0?t:0-t}return s=1-(c=3*e)-(a=3*(i-e)-c),u=1-(h=3*n)-(l=3*(r-n)-h),function(t,e){return n=function(t,e){var n,i,r,o,u,l,h;for(r=t,l=0;l<8;l++){if(d(o=f(r)-t)<e)return r;if(d(u=(3*s*(h=r)+2*a)*h+c)<1e-6)break;r-=o/u}if(i=1,(r=t)<(n=0))return n;if(r>i)return i;for(;n<i;){if(d((o=f(r))-t)<e)return r;t>o?n=r:i=r,r=.5*(i-n)+n}return r}(t,e),((u*n+l)*n+h)*n;var n}(t,function(t){return 1/(200*t)}(o))}n.setBezierFunction=function(e,i,r,o,s){var a=function(e,n,i,r){return function(o){return t(o,e,n,i,r,1)}}(i,r,o,s);return a.displayName=e,a.x1=i,a.y1=r,a.x2=o,a.y2=s,n.prototype.formula[e]=a},n.unsetBezierFunction=function(t){delete n.prototype.formula[t]}}(),function(){var t=new n;t._filterArgs=[],n.interpolate=function(e,i,r,o,s){var a=n.shallowCopy({},e),c=s||0,u=n.composeEasingObject(e,o||"linear");t.set({});var l=t._filterArgs;l.length=0,l[0]=a,l[1]=e,l[2]=i,l[3]=u,n.applyFilter(t,"tweenCreated"),n.applyFilter(t,"beforeTween");var h=function(t,e,i,r,o,s){return n.tweenProps(r,e,t,i,1,s,o)}(e,a,i,r,u,c);return n.applyFilter(t,"afterTween"),h}}(),function(t){var e=/(\d|\-|\.)/,n=/([^\-0-9\.]+)/g,i=/[0-9.\-]+/g,r=new RegExp("rgb\\("+i.source+/,\s*/.source+i.source+/,\s*/.source+i.source+"\\)","g"),o=/^.*\(/,s=/#([0-9]|[a-f]){3,6}/gi,a="VAL";function c(t,e){var n,i=[],r=t.length;for(n=0;n<r;n++)i.push("_"+e+"_"+n);return i}function u(e){t.each(e,function(t){var n=e[t];"string"==typeof n&&n.match(s)&&(e[t]=d(s,n,l))})}function l(t){var e=function(t){3===(t=t.replace(/#/,"")).length&&(t=(t=t.split(""))[0]+t[0]+t[1]+t[1]+t[2]+t[2]);return h[0]=f(t.substr(0,2)),h[1]=f(t.substr(2,2)),h[2]=f(t.substr(4,2)),h}(t);return"rgb("+e[0]+","+e[1]+","+e[2]+")"}var h=[];function f(t){return parseInt(t,16)}function d(t,e,n){var i=e.match(t),r=e.replace(t,a);if(i)for(var o,s=i.length,c=0;c<s;c++)o=i.shift(),r=r.replace(a,n(o));return r}function p(t){for(var e=t.match(i),n=e.length,r=t.match(o)[0],s=0;s<n;s++)r+=parseInt(e[s],10)+",";return r=r.slice(0,-1)+")"}function g(e,n){t.each(n,function(t){for(var i=w(e[t]),r=i.length,o=0;o<r;o++)e[n[t].chunkNames[o]]=+i[o];delete e[t]})}function v(e,n){t.each(n,function(t){var i=e[t],o=function(t,e){m.length=0;for(var n=e.length,i=0;i<n;i++)m.push(t[e[i]]);return m}(function(t,e){for(var n,i={},r=e.length,o=0;o<r;o++)n=e[o],i[n]=t[n],delete t[n];return i}(e,n[t].chunkNames),n[t].chunkNames);i=function(t,e){for(var n=t,i=e.length,r=0;r<i;r++)n=n.replace(a,+e[r].toFixed(4));return n}(n[t].formatString,o),e[t]=d(r,i,p)})}var m=[];function w(t){return t.match(i)}t.prototype.filter.token={tweenCreated:function(i,r,o,s){var l,h;u(i),u(r),u(o),this._tokenData=(l=i,h={},t.each(l,function(t){var i,r,o=l[t];if("string"==typeof o){var s=w(o);h[t]={formatString:(i=o,r=i.match(n),r?(1===r.length||i.charAt(0).match(e))&&r.unshift(""):r=["",""],r.join(a)),chunkNames:c(s,t)}}}),h)},beforeTween:function(e,n,i,r){!function(e,n){t.each(n,function(t){var i,r=n[t].chunkNames,o=r.length,s=e[t];if("string"==typeof s){var a=s.split(" "),c=a[a.length-1];for(i=0;i<o;i++)e[r[i]]=a[i]||c}else for(i=0;i<o;i++)e[r[i]]=s;delete e[t]})}(r,this._tokenData),g(e,this._tokenData),g(n,this._tokenData),g(i,this._tokenData)},afterTween:function(e,n,i,r){v(e,this._tokenData),v(n,this._tokenData),v(i,this._tokenData),function(e,n){t.each(n,function(t){var i=n[t].chunkNames,r=i.length,o=e[i[0]];if("string"==typeof o){for(var s="",a=0;a<r;a++)s+=" "+e[i[a]],delete e[i[a]];e[t]=s.substr(1)}else e[t]=o})}(r,this._tokenData)}}}(n)}).call(null)},function(t,e,n){var i=n(13),r=n(35),o=n(5),s=function(t,e){this._pathTemplate="M 50,50 m -{radius},0 a {radius},{radius} 0 1 1 {2radius},0",this.containerAspectRatio=2,i.apply(this,arguments)};(s.prototype=new i).constructor=s,s.prototype._initializeSvg=function(t,e){t.setAttribute("viewBox","0 0 100 50")},s.prototype._initializeTextContainer=function(t,e,n){t.text.style&&(n.style.top="auto",n.style.bottom="0",t.text.alignToBottom?o.setStyle(n,"transform","translate(-50%, 0)"):o.setStyle(n,"transform","translate(-50%, 50%)"))},s.prototype._pathString=r.prototype._pathString,s.prototype._trailString=r.prototype._trailString,t.exports=s},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n.r(e);var i=n(36),r=n.n(i),o=n(37),s=n.n(o),a=n(19),c=n.n(a),u=n(0),l=n.n(u),h=n(38),f=n.n(h);var d=new function(){let t;t=void 0,this.waitingData={status:"",colourClass:""},this.init=(e=>{t=e,this.update()}),this.update=function(t){t&&(this.waitingData.status=t.message);const n=f()(this.waitingData);l()("#view").html(n),e()};const e=()=>{1==t.interface.inverseClassToggle?l()("#waiting").addClass("uk-light",{duration:500}):l()("#title").removeClass("uk-light",{waiting:500})}},p=n(39),g=n.n(p);var v=new function(){this.init=(()=>{}),this.update=(e=>{1==e.players?(e.extraIcon=!1,e.players=`${e.players} Human Player`):(e.extraIcon=!0,e.players=`${e.players} Human Players`);const n=g()(e);l()("#view").html(n),t()});const t=()=>{let t=l()("#challenge");t.css("opacity",0),t.css("marginTop",100);let e=l()(".uk-card"),n=e.height();e.css("height",0),e.css("opacity",0),t.animate({marginTop:0,opacity:1},1500),e.delay(1e3).animate({height:n,opacity:1},1500)}},m=n(40),w=n.n(m),y=n(41),b=n.n(y);var x=new function(){let t,e=void 0,n=0;this.canvas="",this.canvasContext="",this.pageData={colourClass:""},this.init=((o,s)=>{t=o,this.pageData.colourClass=t.interface.inverseClass(),this.pageData.challenge=s.challenge;const a=w()(this.pageData);l()("#view").html(a),this.canvas=l()("canvas")[0],this.canvasContext=this.canvas.getContext("2d"),e=new b.a.SemiCircle("#progress",{strokeWidth:12,color:"#FFEA82",duration:1400,svgStyle:null,text:{value:"",alignToBottom:!0},from:{color:"#ED6A5A"},to:{color:"#FFEA82"},step:(t,e)=>{e.path.setAttribute("stroke",t.color),n+1===0?e.setText(""):e.setText(`${n+1}'`),e.text.style.color=t.color}}),window.addEventListener("resize",i,!1),i(),r()}),this.update=(()=>{}),this.draw=(t=>{let e=this.canvas.width,n=this.canvas.height;this.drawLine(t.x0*e,t.y0*n,t.x1*e,t.y1*n,t.color)}),this.drawLine=((t,e,n,i,r)=>{this.canvasContext.beginPath(),this.canvasContext.moveTo(t,e),this.canvasContext.lineTo(n,i),this.canvasContext.strokeStyle=r,this.canvasContext.lineWidth=2,this.canvasContext.stroke(),this.canvasContext.closePath()}),this.clear=(()=>{l()("#guess")[0].innerHTML="...",this.canvasContext.clearRect(0,0,this.canvas.width,this.canvas.height)}),this.guess=(t=>{l()("#guess")[0].innerHTML=t,l()("#container-guess").fadeIn("fast"),l()("#container-guess").fadeOut("slow")}),this.timer=(t=>{n=t.timer,e.set(t.timerPercentage/100)});const i=()=>{this.canvas&&(this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight)},r=()=>{let t=l()("#game");t.css("opacity",0),t.css("marginTop",100);let e=l()(".uk-card"),n=e.height();e.css("height",0),e.css("opacity",0),t.animate({marginTop:0,opacity:1},1500),e.delay(1e3).animate({height:n,opacity:1},1500)}},C=n(42),k=n.n(C);var T=new function(){this.init=(()=>{}),this.update=(t=>{const e=k()(t);l()(e).appendTo(l()("#view"));const n=l()("#view").find(".tags");for(let e of t.bestGuesses){const t=e.replace(/\s/g,"-").toLowerCase();n.append(`<span class="uk-label uk-label-primary" data-i18n="categories.${t}">${e}</span>\n`)}})};function A(t){const e=t;this.currentViewName="waiting",this.currentView="",this.inverseClassToggle=!1,this.classColor="",this.classBlend="",this.init=(()=>{this.currentViewName="waiting",this.changeView(this.currentViewName)}),this.changeView=((t,n)=>{l()("#view").empty(),this.currentViewName=t,"waiting"==t?this.currentView=d:"challenge"==t?this.currentView=v:"game"==t?this.currentView=x:"post-game"==t&&(this.currentView=T),this.currentView.init(e,n)}),this.updateView=(t=>{"partners"==t.view||"challenges"==t.view||"players"==t.view?("waiting"!=this.currentViewName&&this.changeView("waiting"),t.colour&&this.changeColour(t.colour)):"challenge"==t.view?this.changeView("challenge"):"game"==t.view?this.changeView("game",t):"post-game"==t.view?this.changeView("post-game"):"waiting"==t.view&&"waiting"!=this.currentViewName&&this.changeView("waiting"),this.currentView.update(t)}),this.updateGuess=(t=>{"game"==this.currentViewName&&("clear"==t.action?this.currentView.clear(t):this.currentView.guess(t.attempt))}),this.updateTimer=(t=>{"game"==this.currentViewName&&this.currentView.timer(t)}),this.draw=(t=>{"game"==this.currentViewName&&this.currentView.draw(t)}),this.inverseClass=(()=>this.inverseClassToggle?"uk-light":"uk-dark"),this.changeColour=(t=>{let e,n,i=this.classColor,r=this.classBlend;"light"==t?(this.inverseClassToggle=!1,e="uk-background-default",n="uk-background-blend-multiply"):"blue"==t?(this.inverseClassToggle=!0,e="uk-background-primary",n="uk-background-blend-multiply"):"dark"==t?(this.inverseClassToggle=!0,e="uk-background-secondary",n="uk-background-blend-color-burn"):"yellow"==t&&(this.inverseClassToggle=!1,e="background-yellow",n="uk-background-blend-multiply"),this.classColor=e,this.classBlend=n,l()("#view").switchClass(i,e,1e3,"easeInOutQuad"),r!=this.classBlend&&l()("#view").switchClass(r,this.classBlend,1e3,"easeInOutQuad")})}n(70);n(89),n(90);const S=new function(){this.socket=void 0,this.interface=new A(this),this.init=(()=>{s()(r.a),S.socket=c()(),S.socket=c()(),S.socket.on("connected",()=>{S.socket.emit("dashboardAdded",{msg:"dashboardAdded",socketID:S.socket.id})}),S.socket.on("interface",t),S.socket.on("drawing",e),S.socket.on("timer",i),S.socket.on("guess",n),S.interface.init(this)});const t=function(t){S.interface.updateView(t)},e=function(t){S.interface.draw(t)},n=function(t){S.interface.updateGuess(t)},i=function(t){S.interface.updateTimer(t)}};window.app=S,S.init()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,